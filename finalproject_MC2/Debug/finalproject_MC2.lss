
finalproject_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002c00  00002c94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  0080006e  0080006e  00002ca2  2**0
                  ALLOC
  3 .stab         000029b8  00000000  00000000  00002ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f64  00000000  00000000  0000565c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000065c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006870  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000084b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000093a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a154  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a541  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 09 	call	0x12fc	; 0x12fc <main>
      8a:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ISR_COUNT>:
uint8 tick=0;
uint8 seconds=0;
uint8 seconds_needed=0;
uint8 m=0;
void ISR_COUNT(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	tick++;
     b4e:	80 91 6e 00 	lds	r24, 0x006E
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 6e 00 	sts	0x006E, r24
	if(tick==NO_OVERFLOWS_SECOND)
     b58:	80 91 6e 00 	lds	r24, 0x006E
     b5c:	80 31       	cpi	r24, 0x10	; 16
     b5e:	a1 f4       	brne	.+40     	; 0xb88 <ISR_COUNT+0x42>
	{
		seconds++;
     b60:	80 91 6f 00 	lds	r24, 0x006F
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	80 93 6f 00 	sts	0x006F, r24
		tick=0;
     b6a:	10 92 6e 00 	sts	0x006E, r1
		if(seconds==seconds_needed)
     b6e:	90 91 6f 00 	lds	r25, 0x006F
     b72:	80 91 70 00 	lds	r24, 0x0070
     b76:	98 17       	cp	r25, r24
     b78:	39 f4       	brne	.+14     	; 0xb88 <ISR_COUNT+0x42>
		{
			seconds=0;
     b7a:	10 92 6f 00 	sts	0x006F, r1
			timer0_DeInit();
     b7e:	0e 94 bb 14 	call	0x2976	; 0x2976 <timer0_DeInit>
				m=1;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 93 71 00 	sts	0x0071, r24
		}
	}
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <strcmp>:
uint8 strcmp(const char *p,const char *e)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	27 97       	sbiw	r28, 0x07	; 7
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	9c 83       	std	Y+4, r25	; 0x04
     ba4:	8b 83       	std	Y+3, r24	; 0x03
     ba6:	7e 83       	std	Y+6, r23	; 0x06
     ba8:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i=0;
     baa:	1a 82       	std	Y+2, r1	; 0x02
	uint8 matched=1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	16 c0       	rjmp	.+44     	; 0xbde <strcmp+0x50>
	while(pass[i]!='\0'||repass[i]!='\0')
			{
				if(pass[i]!=repass[i])
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	88 2f       	mov	r24, r24
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	fc 01       	movw	r30, r24
     bba:	ec 58       	subi	r30, 0x8C	; 140
     bbc:	ff 4f       	sbci	r31, 0xFF	; 255
     bbe:	20 81       	ld	r18, Z
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	88 2f       	mov	r24, r24
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	fc 01       	movw	r30, r24
     bc8:	e8 57       	subi	r30, 0x78	; 120
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	80 81       	ld	r24, Z
     bce:	28 17       	cp	r18, r24
     bd0:	19 f0       	breq	.+6      	; 0xbd8 <strcmp+0x4a>
				{
					matched=0;
     bd2:	19 82       	std	Y+1, r1	; 0x01
				    return 0;
     bd4:	1f 82       	std	Y+7, r1	; 0x07
     bd6:	17 c0       	rjmp	.+46     	; 0xc06 <strcmp+0x78>
				}
				i++;
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	8a 83       	std	Y+2, r24	; 0x02
}
uint8 strcmp(const char *p,const char *e)
{
	uint8 i=0;
	uint8 matched=1;
	while(pass[i]!='\0'||repass[i]!='\0')
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	88 2f       	mov	r24, r24
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	fc 01       	movw	r30, r24
     be6:	ec 58       	subi	r30, 0x8C	; 140
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	80 81       	ld	r24, Z
     bec:	88 23       	and	r24, r24
     bee:	09 f7       	brne	.-62     	; 0xbb2 <strcmp+0x24>
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	fc 01       	movw	r30, r24
     bf8:	e8 57       	subi	r30, 0x78	; 120
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	80 81       	ld	r24, Z
     bfe:	88 23       	and	r24, r24
     c00:	c1 f6       	brne	.-80     	; 0xbb2 <strcmp+0x24>
					matched=0;
				    return 0;
				}
				i++;
			}
	return 1;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	8f 83       	std	Y+7, r24	; 0x07
     c06:	8f 81       	ldd	r24, Y+7	; 0x07
}
     c08:	27 96       	adiw	r28, 0x07	; 7
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <strcpy>:
void strcpy(const char *old, char *new)
{
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <strcpy+0x6>
     c20:	00 d0       	rcall	.+0      	; 0xc22 <strcpy+0x8>
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9b 83       	std	Y+3, r25	; 0x03
     c2a:	8a 83       	std	Y+2, r24	; 0x02
     c2c:	7d 83       	std	Y+5, r23	; 0x05
     c2e:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
     c30:	19 82       	std	Y+1, r1	; 0x01
     c32:	15 c0       	rjmp	.+42     	; 0xc5e <strcpy+0x44>
	while(old[i]!='\0')
	{
		new[i]=old[i];
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	8c 81       	ldd	r24, Y+4	; 0x04
     c3c:	9d 81       	ldd	r25, Y+5	; 0x05
     c3e:	dc 01       	movw	r26, r24
     c40:	a2 0f       	add	r26, r18
     c42:	b3 1f       	adc	r27, r19
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	9b 81       	ldd	r25, Y+3	; 0x03
     c4e:	fc 01       	movw	r30, r24
     c50:	e2 0f       	add	r30, r18
     c52:	f3 1f       	adc	r31, r19
     c54:	80 81       	ld	r24, Z
     c56:	8c 93       	st	X, r24
		i++;
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	8f 5f       	subi	r24, 0xFF	; 255
     c5c:	89 83       	std	Y+1, r24	; 0x01
	return 1;
}
void strcpy(const char *old, char *new)
{
	uint8 i=0;
	while(old[i]!='\0')
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	9b 81       	ldd	r25, Y+3	; 0x03
     c68:	fc 01       	movw	r30, r24
     c6a:	e2 0f       	add	r30, r18
     c6c:	f3 1f       	adc	r31, r19
     c6e:	80 81       	ld	r24, Z
     c70:	88 23       	and	r24, r24
     c72:	01 f7       	brne	.-64     	; 0xc34 <strcpy+0x1a>
	{
		new[i]=old[i];
		i++;
	}
}
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <empty_password>:
void empty_password(char *str)
{
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	00 d0       	rcall	.+0      	; 0xc8a <empty_password+0x6>
     c8a:	0f 92       	push	r0
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	9b 83       	std	Y+3, r25	; 0x03
     c92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 j=0;
     c94:	19 82       	std	Y+1, r1	; 0x01
     c96:	0c c0       	rjmp	.+24     	; 0xcb0 <empty_password+0x2c>
	while(str[j]!='\0')
		{
		str[j]='\0';
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	9b 81       	ldd	r25, Y+3	; 0x03
     ca2:	fc 01       	movw	r30, r24
     ca4:	e2 0f       	add	r30, r18
     ca6:	f3 1f       	adc	r31, r19
     ca8:	10 82       	st	Z, r1
		j++;
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	8f 5f       	subi	r24, 0xFF	; 255
     cae:	89 83       	std	Y+1, r24	; 0x01
	}
}
void empty_password(char *str)
{
	uint8 j=0;
	while(str[j]!='\0')
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	9b 81       	ldd	r25, Y+3	; 0x03
     cba:	fc 01       	movw	r30, r24
     cbc:	e2 0f       	add	r30, r18
     cbe:	f3 1f       	adc	r31, r19
     cc0:	80 81       	ld	r24, Z
     cc2:	88 23       	and	r24, r24
     cc4:	49 f7       	brne	.-46     	; 0xc98 <empty_password+0x14>
		{
		str[j]='\0';
		j++;
		}
}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <Reciving_password>:
void Reciving_password(uint8 *Str)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	6f 97       	sbiw	r28, 0x1f	; 31
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	9f 8f       	std	Y+31, r25	; 0x1f
     ce8:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i=0;
     cea:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Str[0]=='4'&&Str[1]=='8')
     cec:	ee 8d       	ldd	r30, Y+30	; 0x1e
     cee:	ff 8d       	ldd	r31, Y+31	; 0x1f
     cf0:	80 81       	ld	r24, Z
     cf2:	84 33       	cpi	r24, 0x34	; 52
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <Reciving_password+0x26>
     cf6:	a7 c0       	rjmp	.+334    	; 0xe46 <Reciving_password+0x174>
     cf8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cfa:	9f 8d       	ldd	r25, Y+31	; 0x1f
     cfc:	fc 01       	movw	r30, r24
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	80 81       	ld	r24, Z
     d02:	88 33       	cpi	r24, 0x38	; 56
     d04:	09 f0       	breq	.+2      	; 0xd08 <Reciving_password+0x36>
     d06:	9f c0       	rjmp	.+318    	; 0xe46 <Reciving_password+0x174>
			{
		empty_password(pass);
     d08:	84 e7       	ldi	r24, 0x74	; 116
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 42 06 	call	0xc84	; 0xc84 <empty_password>
     d10:	16 c0       	rjmp	.+44     	; 0xd3e <Reciving_password+0x6c>
		     while(Str[i+2] != '\0')
		     {
		    	 pass[i]=Str[i+2];
     d12:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d14:	48 2f       	mov	r20, r24
     d16:	50 e0       	ldi	r21, 0x00	; 0
     d18:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d1a:	88 2f       	mov	r24, r24
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	9c 01       	movw	r18, r24
     d20:	2e 5f       	subi	r18, 0xFE	; 254
     d22:	3f 4f       	sbci	r19, 0xFF	; 255
     d24:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d26:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d28:	fc 01       	movw	r30, r24
     d2a:	e2 0f       	add	r30, r18
     d2c:	f3 1f       	adc	r31, r19
     d2e:	80 81       	ld	r24, Z
     d30:	fa 01       	movw	r30, r20
     d32:	ec 58       	subi	r30, 0x8C	; 140
     d34:	ff 4f       	sbci	r31, 0xFF	; 255
     d36:	80 83       	st	Z, r24
		    	 i++;
     d38:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d3a:	8f 5f       	subi	r24, 0xFF	; 255
     d3c:	8d 8f       	std	Y+29, r24	; 0x1d
{
	uint8 i=0;
	if(Str[0]=='4'&&Str[1]=='8')
			{
		empty_password(pass);
		     while(Str[i+2] != '\0')
     d3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	9c 01       	movw	r18, r24
     d46:	2e 5f       	subi	r18, 0xFE	; 254
     d48:	3f 4f       	sbci	r19, 0xFF	; 255
     d4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d4e:	fc 01       	movw	r30, r24
     d50:	e2 0f       	add	r30, r18
     d52:	f3 1f       	adc	r31, r19
     d54:	80 81       	ld	r24, Z
     d56:	88 23       	and	r24, r24
     d58:	e1 f6       	brne	.-72     	; 0xd12 <Reciving_password+0x40>
		     {
		    	 pass[i]=Str[i+2];
		    	 i++;
		     }
		     UART_sendByte(OKPASS);
     d5a:	82 e1       	ldi	r24, 0x12	; 18
     d5c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	aa ef       	ldi	r26, 0xFA	; 250
     d66:	b4 e4       	ldi	r27, 0x44	; 68
     d68:	89 8f       	std	Y+25, r24	; 0x19
     d6a:	9a 8f       	std	Y+26, r25	; 0x1a
     d6c:	ab 8f       	std	Y+27, r26	; 0x1b
     d6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d70:	69 8d       	ldd	r22, Y+25	; 0x19
     d72:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d76:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	4a e7       	ldi	r20, 0x7A	; 122
     d7e:	53 e4       	ldi	r21, 0x43	; 67
     d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	8d 8b       	std	Y+21, r24	; 0x15
     d8a:	9e 8b       	std	Y+22, r25	; 0x16
     d8c:	af 8b       	std	Y+23, r26	; 0x17
     d8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d90:	6d 89       	ldd	r22, Y+21	; 0x15
     d92:	7e 89       	ldd	r23, Y+22	; 0x16
     d94:	8f 89       	ldd	r24, Y+23	; 0x17
     d96:	98 8d       	ldd	r25, Y+24	; 0x18
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	40 e8       	ldi	r20, 0x80	; 128
     d9e:	5f e3       	ldi	r21, 0x3F	; 63
     da0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da4:	88 23       	and	r24, r24
     da6:	2c f4       	brge	.+10     	; 0xdb2 <Reciving_password+0xe0>
		__ticks = 1;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	9c 8b       	std	Y+20, r25	; 0x14
     dae:	8b 8b       	std	Y+19, r24	; 0x13
     db0:	3f c0       	rjmp	.+126    	; 0xe30 <Reciving_password+0x15e>
	else if (__tmp > 65535)
     db2:	6d 89       	ldd	r22, Y+21	; 0x15
     db4:	7e 89       	ldd	r23, Y+22	; 0x16
     db6:	8f 89       	ldd	r24, Y+23	; 0x17
     db8:	98 8d       	ldd	r25, Y+24	; 0x18
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	3f ef       	ldi	r19, 0xFF	; 255
     dbe:	4f e7       	ldi	r20, 0x7F	; 127
     dc0:	57 e4       	ldi	r21, 0x47	; 71
     dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc6:	18 16       	cp	r1, r24
     dc8:	4c f5       	brge	.+82     	; 0xe1c <Reciving_password+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dca:	69 8d       	ldd	r22, Y+25	; 0x19
     dcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dce:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e2       	ldi	r20, 0x20	; 32
     dd8:	51 e4       	ldi	r21, 0x41	; 65
     dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	bc 01       	movw	r22, r24
     de4:	cd 01       	movw	r24, r26
     de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	9c 8b       	std	Y+20, r25	; 0x14
     df0:	8b 8b       	std	Y+19, r24	; 0x13
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <Reciving_password+0x140>
     df4:	89 e1       	ldi	r24, 0x19	; 25
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	9a 8b       	std	Y+18, r25	; 0x12
     dfa:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dfc:	89 89       	ldd	r24, Y+17	; 0x11
     dfe:	9a 89       	ldd	r25, Y+18	; 0x12
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <Reciving_password+0x12e>
     e04:	9a 8b       	std	Y+18, r25	; 0x12
     e06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e08:	8b 89       	ldd	r24, Y+19	; 0x13
     e0a:	9c 89       	ldd	r25, Y+20	; 0x14
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	9c 8b       	std	Y+20, r25	; 0x14
     e10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e12:	8b 89       	ldd	r24, Y+19	; 0x13
     e14:	9c 89       	ldd	r25, Y+20	; 0x14
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	69 f7       	brne	.-38     	; 0xdf4 <Reciving_password+0x122>
     e1a:	c5 c0       	rjmp	.+394    	; 0xfa6 <Reciving_password+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1c:	6d 89       	ldd	r22, Y+21	; 0x15
     e1e:	7e 89       	ldd	r23, Y+22	; 0x16
     e20:	8f 89       	ldd	r24, Y+23	; 0x17
     e22:	98 8d       	ldd	r25, Y+24	; 0x18
     e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	9c 8b       	std	Y+20, r25	; 0x14
     e2e:	8b 8b       	std	Y+19, r24	; 0x13
     e30:	8b 89       	ldd	r24, Y+19	; 0x13
     e32:	9c 89       	ldd	r25, Y+20	; 0x14
     e34:	98 8b       	std	Y+16, r25	; 0x10
     e36:	8f 87       	std	Y+15, r24	; 0x0f
     e38:	8f 85       	ldd	r24, Y+15	; 0x0f
     e3a:	98 89       	ldd	r25, Y+16	; 0x10
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <Reciving_password+0x16a>
     e40:	98 8b       	std	Y+16, r25	; 0x10
     e42:	8f 87       	std	Y+15, r24	; 0x0f
     e44:	b0 c0       	rjmp	.+352    	; 0xfa6 <Reciving_password+0x2d4>
		     	_delay_ms(2000);
			}
	else if(Str[0]=='6'&&Str[1]=='8')
     e46:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e48:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e4a:	80 81       	ld	r24, Z
     e4c:	86 33       	cpi	r24, 0x36	; 54
     e4e:	09 f0       	breq	.+2      	; 0xe52 <Reciving_password+0x180>
     e50:	aa c0       	rjmp	.+340    	; 0xfa6 <Reciving_password+0x2d4>
     e52:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e54:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e56:	fc 01       	movw	r30, r24
     e58:	31 96       	adiw	r30, 0x01	; 1
     e5a:	80 81       	ld	r24, Z
     e5c:	88 33       	cpi	r24, 0x38	; 56
     e5e:	09 f0       	breq	.+2      	; 0xe62 <Reciving_password+0x190>
     e60:	a2 c0       	rjmp	.+324    	; 0xfa6 <Reciving_password+0x2d4>
	{
		empty_password(repass);
     e62:	88 e8       	ldi	r24, 0x88	; 136
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 42 06 	call	0xc84	; 0xc84 <empty_password>
     e6a:	16 c0       	rjmp	.+44     	; 0xe98 <Reciving_password+0x1c6>
		 while(Str[i+2] != '\0')
		     {
		    	 repass[i]=Str[i+2];
     e6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e6e:	48 2f       	mov	r20, r24
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	9c 01       	movw	r18, r24
     e7a:	2e 5f       	subi	r18, 0xFE	; 254
     e7c:	3f 4f       	sbci	r19, 0xFF	; 255
     e7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e80:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e82:	fc 01       	movw	r30, r24
     e84:	e2 0f       	add	r30, r18
     e86:	f3 1f       	adc	r31, r19
     e88:	80 81       	ld	r24, Z
     e8a:	fa 01       	movw	r30, r20
     e8c:	e8 57       	subi	r30, 0x78	; 120
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	80 83       	st	Z, r24
		    	 i++;
     e92:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	8d 8f       	std	Y+29, r24	; 0x1d
		     	_delay_ms(2000);
			}
	else if(Str[0]=='6'&&Str[1]=='8')
	{
		empty_password(repass);
		 while(Str[i+2] != '\0')
     e98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9c 01       	movw	r18, r24
     ea0:	2e 5f       	subi	r18, 0xFE	; 254
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ea6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ea8:	fc 01       	movw	r30, r24
     eaa:	e2 0f       	add	r30, r18
     eac:	f3 1f       	adc	r31, r19
     eae:	80 81       	ld	r24, Z
     eb0:	88 23       	and	r24, r24
     eb2:	e1 f6       	brne	.-72     	; 0xe6c <Reciving_password+0x19a>
		     {
		    	 repass[i]=Str[i+2];
		    	 i++;
		     }
		     UART_sendByte(OKREPASS);
     eb4:	83 e1       	ldi	r24, 0x13	; 19
     eb6:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
		     	LCD_displayString(repass);
     eba:	88 e8       	ldi	r24, 0x88	; 136
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 15 13 	call	0x262a	; 0x262a <LCD_displayString>
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	aa ef       	ldi	r26, 0xFA	; 250
     ec8:	b4 e4       	ldi	r27, 0x44	; 68
     eca:	8b 87       	std	Y+11, r24	; 0x0b
     ecc:	9c 87       	std	Y+12, r25	; 0x0c
     ece:	ad 87       	std	Y+13, r26	; 0x0d
     ed0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	4a e7       	ldi	r20, 0x7A	; 122
     ee0:	53 e4       	ldi	r21, 0x43	; 67
     ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	8f 83       	std	Y+7, r24	; 0x07
     eec:	98 87       	std	Y+8, r25	; 0x08
     eee:	a9 87       	std	Y+9, r26	; 0x09
     ef0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ef2:	6f 81       	ldd	r22, Y+7	; 0x07
     ef4:	78 85       	ldd	r23, Y+8	; 0x08
     ef6:	89 85       	ldd	r24, Y+9	; 0x09
     ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e8       	ldi	r20, 0x80	; 128
     f00:	5f e3       	ldi	r21, 0x3F	; 63
     f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f06:	88 23       	and	r24, r24
     f08:	2c f4       	brge	.+10     	; 0xf14 <Reciving_password+0x242>
		__ticks = 1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05
     f12:	3f c0       	rjmp	.+126    	; 0xf92 <Reciving_password+0x2c0>
	else if (__tmp > 65535)
     f14:	6f 81       	ldd	r22, Y+7	; 0x07
     f16:	78 85       	ldd	r23, Y+8	; 0x08
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	3f ef       	ldi	r19, 0xFF	; 255
     f20:	4f e7       	ldi	r20, 0x7F	; 127
     f22:	57 e4       	ldi	r21, 0x47	; 71
     f24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f28:	18 16       	cp	r1, r24
     f2a:	4c f5       	brge	.+82     	; 0xf7e <Reciving_password+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f30:	8d 85       	ldd	r24, Y+13	; 0x0d
     f32:	9e 85       	ldd	r25, Y+14	; 0x0e
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e2       	ldi	r20, 0x20	; 32
     f3a:	51 e4       	ldi	r21, 0x41	; 65
     f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	9e 83       	std	Y+6, r25	; 0x06
     f52:	8d 83       	std	Y+5, r24	; 0x05
     f54:	0f c0       	rjmp	.+30     	; 0xf74 <Reciving_password+0x2a2>
     f56:	89 e1       	ldi	r24, 0x19	; 25
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	8b 83       	std	Y+3, r24	; 0x03
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <Reciving_password+0x290>
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	9e 81       	ldd	r25, Y+6	; 0x06
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	9e 83       	std	Y+6, r25	; 0x06
     f72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f74:	8d 81       	ldd	r24, Y+5	; 0x05
     f76:	9e 81       	ldd	r25, Y+6	; 0x06
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	69 f7       	brne	.-38     	; 0xf56 <Reciving_password+0x284>
     f7c:	14 c0       	rjmp	.+40     	; 0xfa6 <Reciving_password+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7e:	6f 81       	ldd	r22, Y+7	; 0x07
     f80:	78 85       	ldd	r23, Y+8	; 0x08
     f82:	89 85       	ldd	r24, Y+9	; 0x09
     f84:	9a 85       	ldd	r25, Y+10	; 0x0a
     f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	9e 83       	std	Y+6, r25	; 0x06
     f90:	8d 83       	std	Y+5, r24	; 0x05
     f92:	8d 81       	ldd	r24, Y+5	; 0x05
     f94:	9e 81       	ldd	r25, Y+6	; 0x06
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <Reciving_password+0x2cc>
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	89 83       	std	Y+1, r24	; 0x01
		     	_delay_ms(2000);
	}
}
     fa6:	6f 96       	adiw	r28, 0x1f	; 31
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <MC2_checking>:
void MC2_checking(void)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	2e 97       	sbiw	r28, 0x0e	; 14
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
     fcc:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Str[12];
		uint8 matched=1;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01
		while(1)
		{
		   matched=1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	89 83       	std	Y+1, r24	; 0x01
		 empty_password(pass);
     fd6:	84 e7       	ldi	r24, 0x74	; 116
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 42 06 	call	0xc84	; 0xc84 <empty_password>
		 empty_password(repass);
     fde:	88 e8       	ldi	r24, 0x88	; 136
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 42 06 	call	0xc84	; 0xc84 <empty_password>
		   UART_receiveString(Str);
     fe6:	ce 01       	movw	r24, r28
     fe8:	03 96       	adiw	r24, 0x03	; 3
     fea:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <UART_receiveString>
		   Reciving_password(Str);
     fee:	ce 01       	movw	r24, r28
     ff0:	03 96       	adiw	r24, 0x03	; 3
     ff2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Reciving_password>
		LCD_clearScreen();
     ff6:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_clearScreen>
		UART_receiveString(Str);
     ffa:	ce 01       	movw	r24, r28
     ffc:	03 96       	adiw	r24, 0x03	; 3
     ffe:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <UART_receiveString>
		Reciving_password(Str);
    1002:	ce 01       	movw	r24, r28
    1004:	03 96       	adiw	r24, 0x03	; 3
    1006:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Reciving_password>

		LCD_clearScreen();
    100a:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_clearScreen>
    100e:	15 c0       	rjmp	.+42     	; 0x103a <MC2_checking+0x82>
		while(pass[i]!='\0'||repass[i]!='\0')
		{
			if(pass[i]!=repass[i])
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	fc 01       	movw	r30, r24
    1018:	ec 58       	subi	r30, 0x8C	; 140
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	20 81       	ld	r18, Z
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	fc 01       	movw	r30, r24
    1026:	e8 57       	subi	r30, 0x78	; 120
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	80 81       	ld	r24, Z
    102c:	28 17       	cp	r18, r24
    102e:	11 f0       	breq	.+4      	; 0x1034 <MC2_checking+0x7c>
			{
				matched=0;
    1030:	19 82       	std	Y+1, r1	; 0x01
    1032:	15 c0       	rjmp	.+42     	; 0x105e <MC2_checking+0xa6>
			    break;
			}
			i++;
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	8f 5f       	subi	r24, 0xFF	; 255
    1038:	8a 83       	std	Y+2, r24	; 0x02
		LCD_clearScreen();
		UART_receiveString(Str);
		Reciving_password(Str);

		LCD_clearScreen();
		while(pass[i]!='\0'||repass[i]!='\0')
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	fc 01       	movw	r30, r24
    1042:	ec 58       	subi	r30, 0x8C	; 140
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 81       	ld	r24, Z
    1048:	88 23       	and	r24, r24
    104a:	11 f7       	brne	.-60     	; 0x1010 <MC2_checking+0x58>
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	fc 01       	movw	r30, r24
    1054:	e8 57       	subi	r30, 0x78	; 120
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	80 81       	ld	r24, Z
    105a:	88 23       	and	r24, r24
    105c:	c9 f6       	brne	.-78     	; 0x1010 <MC2_checking+0x58>
				matched=0;
			    break;
			}
			i++;
		}
		if(matched)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	88 23       	and	r24, r24
    1062:	99 f0       	breq	.+38     	; 0x108a <MC2_checking+0xd2>
		{
			UART_sendByte(MATCHED);
    1064:	84 e1       	ldi	r24, 0x14	; 20
    1066:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
			strcpy(pass,eeprompass);
    106a:	84 e7       	ldi	r24, 0x74	; 116
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	2e e7       	ldi	r18, 0x7E	; 126
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	b9 01       	movw	r22, r18
    1074:	0e 94 0d 06 	call	0xc1a	; 0xc1a <strcpy>
			break;
		}
		else
			UART_sendByte(UNMATCHED);
		}
}
    1078:	2e 96       	adiw	r28, 0x0e	; 14
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret
			UART_sendByte(MATCHED);
			strcpy(pass,eeprompass);
			break;
		}
		else
			UART_sendByte(UNMATCHED);
    108a:	85 e1       	ldi	r24, 0x15	; 21
    108c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
    1090:	a0 cf       	rjmp	.-192    	; 0xfd2 <MC2_checking+0x1a>

00001092 <Thiefmode>:
		}
}
void Thiefmode(void)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	28 97       	sbiw	r28, 0x08	; 8
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
 DDRC|=(1<<PC6);
    10a6:	a4 e3       	ldi	r26, 0x34	; 52
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e4 e3       	ldi	r30, 0x34	; 52
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 64       	ori	r24, 0x40	; 64
    10b2:	8c 93       	st	X, r24
 PORTC &=0xBF;
    10b4:	a5 e3       	ldi	r26, 0x35	; 53
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e5 e3       	ldi	r30, 0x35	; 53
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8f 7b       	andi	r24, 0xBF	; 191
    10c0:	8c 93       	st	X, r24
 SREG |= (1<<7);
    10c2:	af e5       	ldi	r26, 0x5F	; 95
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ef e5       	ldi	r30, 0x5F	; 95
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	8c 93       	st	X, r24
 seconds_needed=20;
    10d0:	84 e1       	ldi	r24, 0x14	; 20
    10d2:	80 93 70 00 	sts	0x0070, r24
 Set_callBack(ISR_COUNT);
    10d6:	83 ea       	ldi	r24, 0xA3	; 163
    10d8:	95 e0       	ldi	r25, 0x05	; 5
    10da:	0e 94 2c 14 	call	0x2858	; 0x2858 <Set_callBack>
 Timer0_ConfigType config={CTC,F_CPU_256,250};
    10de:	ce 01       	movw	r24, r28
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	9d 83       	std	Y+5, r25	; 0x05
    10e4:	8c 83       	std	Y+4, r24	; 0x04
    10e6:	e8 e6       	ldi	r30, 0x68	; 104
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	ff 83       	std	Y+7, r31	; 0x07
    10ec:	ee 83       	std	Y+6, r30	; 0x06
    10ee:	f3 e0       	ldi	r31, 0x03	; 3
    10f0:	f8 87       	std	Y+8, r31	; 0x08
    10f2:	ee 81       	ldd	r30, Y+6	; 0x06
    10f4:	ff 81       	ldd	r31, Y+7	; 0x07
    10f6:	00 80       	ld	r0, Z
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	9f 81       	ldd	r25, Y+7	; 0x07
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	9f 83       	std	Y+7, r25	; 0x07
    1100:	8e 83       	std	Y+6, r24	; 0x06
    1102:	ec 81       	ldd	r30, Y+4	; 0x04
    1104:	fd 81       	ldd	r31, Y+5	; 0x05
    1106:	00 82       	st	Z, r0
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	9d 81       	ldd	r25, Y+5	; 0x05
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	9d 83       	std	Y+5, r25	; 0x05
    1110:	8c 83       	std	Y+4, r24	; 0x04
    1112:	98 85       	ldd	r25, Y+8	; 0x08
    1114:	91 50       	subi	r25, 0x01	; 1
    1116:	98 87       	std	Y+8, r25	; 0x08
    1118:	e8 85       	ldd	r30, Y+8	; 0x08
    111a:	ee 23       	and	r30, r30
    111c:	51 f7       	brne	.-44     	; 0x10f2 <Thiefmode+0x60>
 PORTC|=(1<<PC6);
    111e:	a5 e3       	ldi	r26, 0x35	; 53
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e5 e3       	ldi	r30, 0x35	; 53
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	80 64       	ori	r24, 0x40	; 64
    112a:	8c 93       	st	X, r24
 Timer0_init(&config);
    112c:	ce 01       	movw	r24, r28
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	0e 94 3e 14 	call	0x287c	; 0x287c <Timer0_init>
 while(m==0);
    1134:	80 91 71 00 	lds	r24, 0x0071
    1138:	88 23       	and	r24, r24
    113a:	e1 f3       	breq	.-8      	; 0x1134 <Thiefmode+0xa2>
 m=0;
    113c:	10 92 71 00 	sts	0x0071, r1
 PORTC&=~(1<<PC6);
    1140:	a5 e3       	ldi	r26, 0x35	; 53
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e5 e3       	ldi	r30, 0x35	; 53
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	8f 7b       	andi	r24, 0xBF	; 191
    114c:	8c 93       	st	X, r24
}
    114e:	28 96       	adiw	r28, 0x08	; 8
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <Motor_Stepper>:
void Motor_Stepper(void)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	28 97       	sbiw	r28, 0x08	; 8
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
		DDRC |= 0x18;  // Configure first 4 pins in PORTC as output pins
    1174:	a4 e3       	ldi	r26, 0x34	; 52
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e4 e3       	ldi	r30, 0x34	; 52
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	88 61       	ori	r24, 0x18	; 24
    1180:	8c 93       	st	X, r24
		PORTC &= 0xE7;// Clear first four bits in PORTC
    1182:	a5 e3       	ldi	r26, 0x35	; 53
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e5 e3       	ldi	r30, 0x35	; 53
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	87 7e       	andi	r24, 0xE7	; 231
    118e:	8c 93       	st	X, r24
		SREG |= (1<<7);
    1190:	af e5       	ldi	r26, 0x5F	; 95
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	ef e5       	ldi	r30, 0x5F	; 95
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	80 68       	ori	r24, 0x80	; 128
    119c:	8c 93       	st	X, r24
		seconds_needed=10;
    119e:	8a e0       	ldi	r24, 0x0A	; 10
    11a0:	80 93 70 00 	sts	0x0070, r24
	    Set_callBack(ISR_COUNT);
    11a4:	83 ea       	ldi	r24, 0xA3	; 163
    11a6:	95 e0       	ldi	r25, 0x05	; 5
    11a8:	0e 94 2c 14 	call	0x2858	; 0x2858 <Set_callBack>
	    Timer0_ConfigType config={CTC,F_CPU_256,250};
    11ac:	ce 01       	movw	r24, r28
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	9d 83       	std	Y+5, r25	; 0x05
    11b2:	8c 83       	std	Y+4, r24	; 0x04
    11b4:	eb e6       	ldi	r30, 0x6B	; 107
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	ff 83       	std	Y+7, r31	; 0x07
    11ba:	ee 83       	std	Y+6, r30	; 0x06
    11bc:	f3 e0       	ldi	r31, 0x03	; 3
    11be:	f8 87       	std	Y+8, r31	; 0x08
    11c0:	ee 81       	ldd	r30, Y+6	; 0x06
    11c2:	ff 81       	ldd	r31, Y+7	; 0x07
    11c4:	00 80       	ld	r0, Z
    11c6:	8e 81       	ldd	r24, Y+6	; 0x06
    11c8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	9f 83       	std	Y+7, r25	; 0x07
    11ce:	8e 83       	std	Y+6, r24	; 0x06
    11d0:	ec 81       	ldd	r30, Y+4	; 0x04
    11d2:	fd 81       	ldd	r31, Y+5	; 0x05
    11d4:	00 82       	st	Z, r0
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	9d 83       	std	Y+5, r25	; 0x05
    11de:	8c 83       	std	Y+4, r24	; 0x04
    11e0:	98 85       	ldd	r25, Y+8	; 0x08
    11e2:	91 50       	subi	r25, 0x01	; 1
    11e4:	98 87       	std	Y+8, r25	; 0x08
    11e6:	e8 85       	ldd	r30, Y+8	; 0x08
    11e8:	ee 23       	and	r30, r30
    11ea:	51 f7       	brne	.-44     	; 0x11c0 <Motor_Stepper+0x60>
	    PORTC&=~(1<<PC3);
    11ec:	a5 e3       	ldi	r26, 0x35	; 53
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e5 e3       	ldi	r30, 0x35	; 53
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	87 7f       	andi	r24, 0xF7	; 247
    11f8:	8c 93       	st	X, r24
	    PORTC|=(1<<PC4);
    11fa:	a5 e3       	ldi	r26, 0x35	; 53
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e5 e3       	ldi	r30, 0x35	; 53
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	80 61       	ori	r24, 0x10	; 16
    1206:	8c 93       	st	X, r24
		Timer0_init(&config);
    1208:	ce 01       	movw	r24, r28
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	0e 94 3e 14 	call	0x287c	; 0x287c <Timer0_init>
        while(m==0);
    1210:	80 91 71 00 	lds	r24, 0x0071
    1214:	88 23       	and	r24, r24
    1216:	e1 f3       	breq	.-8      	; 0x1210 <Motor_Stepper+0xb0>
       m=0;
    1218:	10 92 71 00 	sts	0x0071, r1
       PORTC|=(1<<PC3);
    121c:	a5 e3       	ldi	r26, 0x35	; 53
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e5 e3       	ldi	r30, 0x35	; 53
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 60       	ori	r24, 0x08	; 8
    1228:	8c 93       	st	X, r24
       PORTC&=~(1<<PC4);
    122a:	a5 e3       	ldi	r26, 0x35	; 53
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e5 e3       	ldi	r30, 0x35	; 53
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8f 7e       	andi	r24, 0xEF	; 239
    1236:	8c 93       	st	X, r24
       Timer0_init(&config);
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	0e 94 3e 14 	call	0x287c	; 0x287c <Timer0_init>
        while(m==0);
    1240:	80 91 71 00 	lds	r24, 0x0071
    1244:	88 23       	and	r24, r24
    1246:	e1 f3       	breq	.-8      	; 0x1240 <Motor_Stepper+0xe0>
        m=0;
    1248:	10 92 71 00 	sts	0x0071, r1
        PORTC&=~(1<<PC3);
    124c:	a5 e3       	ldi	r26, 0x35	; 53
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e3       	ldi	r30, 0x35	; 53
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	87 7f       	andi	r24, 0xF7	; 247
    1258:	8c 93       	st	X, r24
        PORTC&=~(1<<PC4);
    125a:	a5 e3       	ldi	r26, 0x35	; 53
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e5 e3       	ldi	r30, 0x35	; 53
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8f 7e       	andi	r24, 0xEF	; 239
    1266:	8c 93       	st	X, r24
}
    1268:	28 96       	adiw	r28, 0x08	; 8
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <checkingdoor_uart2>:
void checkingdoor_uart2(void)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	2e 97       	sbiw	r28, 0x0e	; 14
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
	uint8 reciver;
	uint8 counter=0;
    128e:	19 82       	std	Y+1, r1	; 0x01
    1290:	1e c0       	rjmp	.+60     	; 0x12ce <checkingdoor_uart2+0x54>
	uint8 Str[12];
	while(counter<3)
	{
	UART_receiveString(Str);
    1292:	ce 01       	movw	r24, r28
    1294:	03 96       	adiw	r24, 0x03	; 3
    1296:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <UART_receiveString>
			Reciving_password(Str);
    129a:	ce 01       	movw	r24, r28
    129c:	03 96       	adiw	r24, 0x03	; 3
    129e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Reciving_password>
			if(strcmp(pass,eeprompass))
    12a2:	84 e7       	ldi	r24, 0x74	; 116
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	2e e7       	ldi	r18, 0x7E	; 126
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	b9 01       	movw	r22, r18
    12ac:	0e 94 c7 05 	call	0xb8e	; 0xb8e <strcmp>
    12b0:	88 23       	and	r24, r24
    12b2:	39 f0       	breq	.+14     	; 0x12c2 <checkingdoor_uart2+0x48>
			{
				UART_sendByte(OPENED);
    12b4:	86 e1       	ldi	r24, 0x16	; 22
    12b6:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
     			Motor_Stepper();
    12ba:	0e 94 b0 08 	call	0x1160	; 0x1160 <Motor_Stepper>
				counter=0;
    12be:	19 82       	std	Y+1, r1	; 0x01
    12c0:	09 c0       	rjmp	.+18     	; 0x12d4 <checkingdoor_uart2+0x5a>
				break;
			}
			else
			{
				counter++;
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
    12c6:	89 83       	std	Y+1, r24	; 0x01
				UART_sendByte(CLOSED);
    12c8:	87 e1       	ldi	r24, 0x17	; 23
    12ca:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
void checkingdoor_uart2(void)
{
	uint8 reciver;
	uint8 counter=0;
	uint8 Str[12];
	while(counter<3)
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	83 30       	cpi	r24, 0x03	; 3
    12d2:	f8 f2       	brcs	.-66     	; 0x1292 <checkingdoor_uart2+0x18>
				counter++;
				UART_sendByte(CLOSED);

			}
	}
	if(counter==3)
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	83 30       	cpi	r24, 0x03	; 3
    12d8:	41 f4       	brne	.+16     	; 0x12ea <checkingdoor_uart2+0x70>
	{
			reciver=UART_recieveByte();
    12da:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <UART_recieveByte>
    12de:	8a 83       	std	Y+2, r24	; 0x02
			if(reciver==THIEF)
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	88 31       	cpi	r24, 0x18	; 24
    12e4:	11 f4       	brne	.+4      	; 0x12ea <checkingdoor_uart2+0x70>
				Thiefmode();
    12e6:	0e 94 49 08 	call	0x1092	; 0x1092 <Thiefmode>
	}

}
    12ea:	2e 96       	adiw	r28, 0x0e	; 14
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <main>:
int main(void)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	UART_init(); // initialize UART driver
    1306:	0e 94 d6 14 	call	0x29ac	; 0x29ac <UART_init>
	EEPROM_init();
    130a:	0e 94 9f 09 	call	0x133e	; 0x133e <EEPROM_init>
	//initialize LCD
	MC2_checking();
    130e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <MC2_checking>
	while(1)
	{
		uint8 Plus_Minus=UART_recieveByte();
    1312:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <UART_recieveByte>
    1316:	89 83       	std	Y+1, r24	; 0x01
        if(Plus_Minus==0x22)
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	82 32       	cpi	r24, 0x22	; 34
    131c:	19 f4       	brne	.+6      	; 0x1324 <main+0x28>
		checkingdoor_uart2();
    131e:	0e 94 3d 09 	call	0x127a	; 0x127a <checkingdoor_uart2>
    1322:	f7 cf       	rjmp	.-18     	; 0x1312 <main+0x16>
        else if(Plus_Minus==0x23)
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	83 32       	cpi	r24, 0x23	; 35
    1328:	a1 f7       	brne	.-24     	; 0x1312 <main+0x16>
        {
        	MC2_checking();
    132a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <MC2_checking>
        	strcpy(pass,eeprompass);
    132e:	84 e7       	ldi	r24, 0x74	; 116
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	2e e7       	ldi	r18, 0x7E	; 126
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	b9 01       	movw	r22, r18
    1338:	0e 94 0d 06 	call	0xc1a	; 0xc1a <strcpy>
    133c:	ea cf       	rjmp	.-44     	; 0x1312 <main+0x16>

0000133e <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    1346:	0e 94 49 0a 	call	0x1492	; 0x1492 <TWI_init>
}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <EEPROM_writeByte+0x6>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <EEPROM_writeByte+0x8>
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	9a 83       	std	Y+2, r25	; 0x02
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1362:	0e 94 5f 0a 	call	0x14be	; 0x14be <TWI_start>
    if (TWI_getStatus() != TW_START)
    1366:	0e 94 b7 0a 	call	0x156e	; 0x156e <TWI_getStatus>
    136a:	88 30       	cpi	r24, 0x08	; 8
    136c:	11 f0       	breq	.+4      	; 0x1372 <EEPROM_writeByte+0x22>
        return ERROR;
    136e:	1c 82       	std	Y+4, r1	; 0x04
    1370:	28 c0       	rjmp	.+80     	; 0x13c2 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	9a 81       	ldd	r25, Y+2	; 0x02
    1376:	80 70       	andi	r24, 0x00	; 0
    1378:	97 70       	andi	r25, 0x07	; 7
    137a:	88 0f       	add	r24, r24
    137c:	89 2f       	mov	r24, r25
    137e:	88 1f       	adc	r24, r24
    1380:	99 0b       	sbc	r25, r25
    1382:	91 95       	neg	r25
    1384:	80 6a       	ori	r24, 0xA0	; 160
    1386:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    138a:	0e 94 b7 0a 	call	0x156e	; 0x156e <TWI_getStatus>
    138e:	88 31       	cpi	r24, 0x18	; 24
    1390:	11 f0       	breq	.+4      	; 0x1396 <EEPROM_writeByte+0x46>
        return ERROR; 
    1392:	1c 82       	std	Y+4, r1	; 0x04
    1394:	16 c0       	rjmp	.+44     	; 0x13c2 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    139c:	0e 94 b7 0a 	call	0x156e	; 0x156e <TWI_getStatus>
    13a0:	88 32       	cpi	r24, 0x28	; 40
    13a2:	11 f0       	breq	.+4      	; 0x13a8 <EEPROM_writeByte+0x58>
        return ERROR;
    13a4:	1c 82       	std	Y+4, r1	; 0x04
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    13ae:	0e 94 b7 0a 	call	0x156e	; 0x156e <TWI_getStatus>
    13b2:	88 32       	cpi	r24, 0x28	; 40
    13b4:	11 f0       	breq	.+4      	; 0x13ba <EEPROM_writeByte+0x6a>
        return ERROR;
    13b6:	1c 82       	std	Y+4, r1	; 0x04
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    13ba:	0e 94 6f 0a 	call	0x14de	; 0x14de <TWI_stop>
	
    return SUCCESS;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	8c 83       	std	Y+4, r24	; 0x04
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <EEPROM_readByte+0x6>
    13d8:	00 d0       	rcall	.+0      	; 0x13da <EEPROM_readByte+0x8>
    13da:	0f 92       	push	r0
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	9a 83       	std	Y+2, r25	; 0x02
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	7c 83       	std	Y+4, r23	; 0x04
    13e6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    13e8:	0e 94 5f 0a 	call	0x14be	; 0x14be <TWI_start>
    if (TWI_getStatus() != TW_START)
    13ec:	0e 94 b7 0a 	call	0x156e	; 0x156e <TWI_getStatus>
    13f0:	88 30       	cpi	r24, 0x08	; 8
    13f2:	11 f0       	breq	.+4      	; 0x13f8 <EEPROM_readByte+0x26>
        return ERROR;
    13f4:	1d 82       	std	Y+5, r1	; 0x05
    13f6:	44 c0       	rjmp	.+136    	; 0x1480 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	80 70       	andi	r24, 0x00	; 0
    13fe:	97 70       	andi	r25, 0x07	; 7
    1400:	88 0f       	add	r24, r24
    1402:	89 2f       	mov	r24, r25
    1404:	88 1f       	adc	r24, r24
    1406:	99 0b       	sbc	r25, r25
    1408:	91 95       	neg	r25
    140a:	80 6a       	ori	r24, 0xA0	; 160
    140c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1410:	0e 94 b7 0a 	call	0x156e	; 0x156e <TWI_getStatus>
    1414:	88 31       	cpi	r24, 0x18	; 24
    1416:	11 f0       	breq	.+4      	; 0x141c <EEPROM_readByte+0x4a>
        return ERROR;
    1418:	1d 82       	std	Y+5, r1	; 0x05
    141a:	32 c0       	rjmp	.+100    	; 0x1480 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1422:	0e 94 b7 0a 	call	0x156e	; 0x156e <TWI_getStatus>
    1426:	88 32       	cpi	r24, 0x28	; 40
    1428:	11 f0       	breq	.+4      	; 0x142e <EEPROM_readByte+0x5c>
        return ERROR;
    142a:	1d 82       	std	Y+5, r1	; 0x05
    142c:	29 c0       	rjmp	.+82     	; 0x1480 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    142e:	0e 94 5f 0a 	call	0x14be	; 0x14be <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    1432:	0e 94 b7 0a 	call	0x156e	; 0x156e <TWI_getStatus>
    1436:	80 31       	cpi	r24, 0x10	; 16
    1438:	11 f0       	breq	.+4      	; 0x143e <EEPROM_readByte+0x6c>
        return ERROR;
    143a:	1d 82       	std	Y+5, r1	; 0x05
    143c:	21 c0       	rjmp	.+66     	; 0x1480 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	9a 81       	ldd	r25, Y+2	; 0x02
    1442:	80 70       	andi	r24, 0x00	; 0
    1444:	97 70       	andi	r25, 0x07	; 7
    1446:	88 0f       	add	r24, r24
    1448:	89 2f       	mov	r24, r25
    144a:	88 1f       	adc	r24, r24
    144c:	99 0b       	sbc	r25, r25
    144e:	91 95       	neg	r25
    1450:	81 6a       	ori	r24, 0xA1	; 161
    1452:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1456:	0e 94 b7 0a 	call	0x156e	; 0x156e <TWI_getStatus>
    145a:	80 34       	cpi	r24, 0x40	; 64
    145c:	11 f0       	breq	.+4      	; 0x1462 <EEPROM_readByte+0x90>
        return ERROR;
    145e:	1d 82       	std	Y+5, r1	; 0x05
    1460:	0f c0       	rjmp	.+30     	; 0x1480 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    1462:	0e 94 a4 0a 	call	0x1548	; 0x1548 <TWI_readWithNACK>
    1466:	eb 81       	ldd	r30, Y+3	; 0x03
    1468:	fc 81       	ldd	r31, Y+4	; 0x04
    146a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    146c:	0e 94 b7 0a 	call	0x156e	; 0x156e <TWI_getStatus>
    1470:	88 35       	cpi	r24, 0x58	; 88
    1472:	11 f0       	breq	.+4      	; 0x1478 <EEPROM_readByte+0xa6>
        return ERROR;
    1474:	1d 82       	std	Y+5, r1	; 0x05
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1478:	0e 94 6f 0a 	call	0x14de	; 0x14de <TWI_stop>
    return SUCCESS;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	8d 83       	std	Y+5, r24	; 0x05
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    149a:	e0 e2       	ldi	r30, 0x20	; 32
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	80 83       	st	Z, r24
	TWSR = 0x00;
    14a2:	e1 e2       	ldi	r30, 0x21	; 33
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    14a8:	e2 e2       	ldi	r30, 0x22	; 34
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    14b0:	e6 e5       	ldi	r30, 0x56	; 86
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	84 e0       	ldi	r24, 0x04	; 4
    14b6:	80 83       	st	Z, r24
}
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <TWI_start>:

void TWI_start(void)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    14c6:	e6 e5       	ldi	r30, 0x56	; 86
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	84 ea       	ldi	r24, 0xA4	; 164
    14cc:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    14ce:	e6 e5       	ldi	r30, 0x56	; 86
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	88 23       	and	r24, r24
    14d6:	dc f7       	brge	.-10     	; 0x14ce <TWI_start+0x10>
}
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <TWI_stop>:

void TWI_stop(void)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    14e6:	e6 e5       	ldi	r30, 0x56	; 86
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	84 e9       	ldi	r24, 0x94	; 148
    14ec:	80 83       	st	Z, r24
}
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <TWI_write>:

void TWI_write(uint8 data)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	0f 92       	push	r0
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1500:	e3 e2       	ldi	r30, 0x23	; 35
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1508:	e6 e5       	ldi	r30, 0x56	; 86
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	84 e8       	ldi	r24, 0x84	; 132
    150e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1510:	e6 e5       	ldi	r30, 0x56	; 86
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	88 23       	and	r24, r24
    1518:	dc f7       	brge	.-10     	; 0x1510 <TWI_write+0x1c>
}
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    152a:	e6 e5       	ldi	r30, 0x56	; 86
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	84 ec       	ldi	r24, 0xC4	; 196
    1530:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1532:	e6 e5       	ldi	r30, 0x56	; 86
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	88 23       	and	r24, r24
    153a:	dc f7       	brge	.-10     	; 0x1532 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    153c:	e3 e2       	ldi	r30, 0x23	; 35
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
}
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1550:	e6 e5       	ldi	r30, 0x56	; 86
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	84 e8       	ldi	r24, 0x84	; 132
    1556:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1558:	e6 e5       	ldi	r30, 0x56	; 86
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	88 23       	and	r24, r24
    1560:	dc f7       	brge	.-10     	; 0x1558 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1562:	e3 e2       	ldi	r30, 0x23	; 35
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
}
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1578:	e1 e2       	ldi	r30, 0x21	; 33
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	88 7f       	andi	r24, 0xF8	; 248
    1580:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1582:	89 81       	ldd	r24, Y+1	; 0x01
}
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1594:	a1 e3       	ldi	r26, 0x31	; 49
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e1 e3       	ldi	r30, 0x31	; 49
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 6e       	ori	r24, 0xE0	; 224
    15a0:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
    15a2:	aa e3       	ldi	r26, 0x3A	; 58
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ea e3       	ldi	r30, 0x3A	; 58
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8f 60       	ori	r24, 0x0F	; 15
    15ae:	8c 93       	st	X, r24
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    15b6:	88 e2       	ldi	r24, 0x28	; 40
    15b8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    15bc:	8c e0       	ldi	r24, 0x0C	; 12
    15be:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <LCD_sendCommand>
}
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	c3 56       	subi	r28, 0x63	; 99
    15dc:	d0 40       	sbci	r29, 0x00	; 0
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	fe 01       	movw	r30, r28
    15ea:	ed 59       	subi	r30, 0x9D	; 157
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    15f0:	a2 e3       	ldi	r26, 0x32	; 50
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e2 e3       	ldi	r30, 0x32	; 50
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8f 7d       	andi	r24, 0xDF	; 223
    15fc:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    15fe:	a2 e3       	ldi	r26, 0x32	; 50
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e2 e3       	ldi	r30, 0x32	; 50
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8f 7b       	andi	r24, 0xBF	; 191
    160a:	8c 93       	st	X, r24
    160c:	fe 01       	movw	r30, r28
    160e:	e1 5a       	subi	r30, 0xA1	; 161
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a0 e8       	ldi	r26, 0x80	; 128
    1618:	bf e3       	ldi	r27, 0x3F	; 63
    161a:	80 83       	st	Z, r24
    161c:	91 83       	std	Z+1, r25	; 0x01
    161e:	a2 83       	std	Z+2, r26	; 0x02
    1620:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1622:	8e 01       	movw	r16, r28
    1624:	05 5a       	subi	r16, 0xA5	; 165
    1626:	1f 4f       	sbci	r17, 0xFF	; 255
    1628:	fe 01       	movw	r30, r28
    162a:	e1 5a       	subi	r30, 0xA1	; 161
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	82 81       	ldd	r24, Z+2	; 0x02
    1634:	93 81       	ldd	r25, Z+3	; 0x03
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a e7       	ldi	r20, 0x7A	; 122
    163c:	53 e4       	ldi	r21, 0x43	; 67
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	f8 01       	movw	r30, r16
    1648:	80 83       	st	Z, r24
    164a:	91 83       	std	Z+1, r25	; 0x01
    164c:	a2 83       	std	Z+2, r26	; 0x02
    164e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1650:	fe 01       	movw	r30, r28
    1652:	e5 5a       	subi	r30, 0xA5	; 165
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e8       	ldi	r20, 0x80	; 128
    1664:	5f e3       	ldi	r21, 0x3F	; 63
    1666:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    166a:	88 23       	and	r24, r24
    166c:	44 f4       	brge	.+16     	; 0x167e <LCD_sendCommand+0xb0>
		__ticks = 1;
    166e:	fe 01       	movw	r30, r28
    1670:	e7 5a       	subi	r30, 0xA7	; 167
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	80 83       	st	Z, r24
    167c:	64 c0       	rjmp	.+200    	; 0x1746 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    167e:	fe 01       	movw	r30, r28
    1680:	e5 5a       	subi	r30, 0xA5	; 165
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	60 81       	ld	r22, Z
    1686:	71 81       	ldd	r23, Z+1	; 0x01
    1688:	82 81       	ldd	r24, Z+2	; 0x02
    168a:	93 81       	ldd	r25, Z+3	; 0x03
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	3f ef       	ldi	r19, 0xFF	; 255
    1690:	4f e7       	ldi	r20, 0x7F	; 127
    1692:	57 e4       	ldi	r21, 0x47	; 71
    1694:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1698:	18 16       	cp	r1, r24
    169a:	0c f0       	brlt	.+2      	; 0x169e <LCD_sendCommand+0xd0>
    169c:	43 c0       	rjmp	.+134    	; 0x1724 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169e:	fe 01       	movw	r30, r28
    16a0:	e1 5a       	subi	r30, 0xA1	; 161
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	60 81       	ld	r22, Z
    16a6:	71 81       	ldd	r23, Z+1	; 0x01
    16a8:	82 81       	ldd	r24, Z+2	; 0x02
    16aa:	93 81       	ldd	r25, Z+3	; 0x03
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e2       	ldi	r20, 0x20	; 32
    16b2:	51 e4       	ldi	r21, 0x41	; 65
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	8e 01       	movw	r16, r28
    16be:	07 5a       	subi	r16, 0xA7	; 167
    16c0:	1f 4f       	sbci	r17, 0xFF	; 255
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	f8 01       	movw	r30, r16
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	80 83       	st	Z, r24
    16d4:	1f c0       	rjmp	.+62     	; 0x1714 <LCD_sendCommand+0x146>
    16d6:	fe 01       	movw	r30, r28
    16d8:	e9 5a       	subi	r30, 0xA9	; 169
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	89 e1       	ldi	r24, 0x19	; 25
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    16e4:	fe 01       	movw	r30, r28
    16e6:	e9 5a       	subi	r30, 0xA9	; 169
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	80 81       	ld	r24, Z
    16ec:	91 81       	ldd	r25, Z+1	; 0x01
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <LCD_sendCommand+0x120>
    16f2:	fe 01       	movw	r30, r28
    16f4:	e9 5a       	subi	r30, 0xA9	; 169
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fc:	de 01       	movw	r26, r28
    16fe:	a7 5a       	subi	r26, 0xA7	; 167
    1700:	bf 4f       	sbci	r27, 0xFF	; 255
    1702:	fe 01       	movw	r30, r28
    1704:	e7 5a       	subi	r30, 0xA7	; 167
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	80 81       	ld	r24, Z
    170a:	91 81       	ldd	r25, Z+1	; 0x01
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	11 96       	adiw	r26, 0x01	; 1
    1710:	9c 93       	st	X, r25
    1712:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1714:	fe 01       	movw	r30, r28
    1716:	e7 5a       	subi	r30, 0xA7	; 167
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	d1 f6       	brne	.-76     	; 0x16d6 <LCD_sendCommand+0x108>
    1722:	27 c0       	rjmp	.+78     	; 0x1772 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1724:	8e 01       	movw	r16, r28
    1726:	07 5a       	subi	r16, 0xA7	; 167
    1728:	1f 4f       	sbci	r17, 0xFF	; 255
    172a:	fe 01       	movw	r30, r28
    172c:	e5 5a       	subi	r30, 0xA5	; 165
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	60 81       	ld	r22, Z
    1732:	71 81       	ldd	r23, Z+1	; 0x01
    1734:	82 81       	ldd	r24, Z+2	; 0x02
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	f8 01       	movw	r30, r16
    1742:	91 83       	std	Z+1, r25	; 0x01
    1744:	80 83       	st	Z, r24
    1746:	de 01       	movw	r26, r28
    1748:	ab 5a       	subi	r26, 0xAB	; 171
    174a:	bf 4f       	sbci	r27, 0xFF	; 255
    174c:	fe 01       	movw	r30, r28
    174e:	e7 5a       	subi	r30, 0xA7	; 167
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	80 81       	ld	r24, Z
    1754:	91 81       	ldd	r25, Z+1	; 0x01
    1756:	8d 93       	st	X+, r24
    1758:	9c 93       	st	X, r25
    175a:	fe 01       	movw	r30, r28
    175c:	eb 5a       	subi	r30, 0xAB	; 171
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <LCD_sendCommand+0x196>
    1768:	fe 01       	movw	r30, r28
    176a:	eb 5a       	subi	r30, 0xAB	; 171
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1772:	a2 e3       	ldi	r26, 0x32	; 50
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e2 e3       	ldi	r30, 0x32	; 50
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	80 68       	ori	r24, 0x80	; 128
    177e:	8c 93       	st	X, r24
    1780:	fe 01       	movw	r30, r28
    1782:	ef 5a       	subi	r30, 0xAF	; 175
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	a0 e8       	ldi	r26, 0x80	; 128
    178c:	bf e3       	ldi	r27, 0x3F	; 63
    178e:	80 83       	st	Z, r24
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	a2 83       	std	Z+2, r26	; 0x02
    1794:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1796:	8e 01       	movw	r16, r28
    1798:	03 5b       	subi	r16, 0xB3	; 179
    179a:	1f 4f       	sbci	r17, 0xFF	; 255
    179c:	fe 01       	movw	r30, r28
    179e:	ef 5a       	subi	r30, 0xAF	; 175
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	4a e7       	ldi	r20, 0x7A	; 122
    17b0:	53 e4       	ldi	r21, 0x43	; 67
    17b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	f8 01       	movw	r30, r16
    17bc:	80 83       	st	Z, r24
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	a2 83       	std	Z+2, r26	; 0x02
    17c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17c4:	fe 01       	movw	r30, r28
    17c6:	e3 5b       	subi	r30, 0xB3	; 179
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e8       	ldi	r20, 0x80	; 128
    17d8:	5f e3       	ldi	r21, 0x3F	; 63
    17da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17de:	88 23       	and	r24, r24
    17e0:	44 f4       	brge	.+16     	; 0x17f2 <LCD_sendCommand+0x224>
		__ticks = 1;
    17e2:	fe 01       	movw	r30, r28
    17e4:	e5 5b       	subi	r30, 0xB5	; 181
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	80 83       	st	Z, r24
    17f0:	64 c0       	rjmp	.+200    	; 0x18ba <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    17f2:	fe 01       	movw	r30, r28
    17f4:	e3 5b       	subi	r30, 0xB3	; 179
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	0c f0       	brlt	.+2      	; 0x1812 <LCD_sendCommand+0x244>
    1810:	43 c0       	rjmp	.+134    	; 0x1898 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1812:	fe 01       	movw	r30, r28
    1814:	ef 5a       	subi	r30, 0xAF	; 175
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	82 81       	ldd	r24, Z+2	; 0x02
    181e:	93 81       	ldd	r25, Z+3	; 0x03
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	8e 01       	movw	r16, r28
    1832:	05 5b       	subi	r16, 0xB5	; 181
    1834:	1f 4f       	sbci	r17, 0xFF	; 255
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	f8 01       	movw	r30, r16
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	80 83       	st	Z, r24
    1848:	1f c0       	rjmp	.+62     	; 0x1888 <LCD_sendCommand+0x2ba>
    184a:	fe 01       	movw	r30, r28
    184c:	e7 5b       	subi	r30, 0xB7	; 183
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	89 e1       	ldi	r24, 0x19	; 25
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
    1858:	fe 01       	movw	r30, r28
    185a:	e7 5b       	subi	r30, 0xB7	; 183
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <LCD_sendCommand+0x294>
    1866:	fe 01       	movw	r30, r28
    1868:	e7 5b       	subi	r30, 0xB7	; 183
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	91 83       	std	Z+1, r25	; 0x01
    186e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1870:	de 01       	movw	r26, r28
    1872:	a5 5b       	subi	r26, 0xB5	; 181
    1874:	bf 4f       	sbci	r27, 0xFF	; 255
    1876:	fe 01       	movw	r30, r28
    1878:	e5 5b       	subi	r30, 0xB5	; 181
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	11 96       	adiw	r26, 0x01	; 1
    1884:	9c 93       	st	X, r25
    1886:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1888:	fe 01       	movw	r30, r28
    188a:	e5 5b       	subi	r30, 0xB5	; 181
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	d1 f6       	brne	.-76     	; 0x184a <LCD_sendCommand+0x27c>
    1896:	27 c0       	rjmp	.+78     	; 0x18e6 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	8e 01       	movw	r16, r28
    189a:	05 5b       	subi	r16, 0xB5	; 181
    189c:	1f 4f       	sbci	r17, 0xFF	; 255
    189e:	fe 01       	movw	r30, r28
    18a0:	e3 5b       	subi	r30, 0xB3	; 179
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	f8 01       	movw	r30, r16
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	de 01       	movw	r26, r28
    18bc:	a9 5b       	subi	r26, 0xB9	; 185
    18be:	bf 4f       	sbci	r27, 0xFF	; 255
    18c0:	fe 01       	movw	r30, r28
    18c2:	e5 5b       	subi	r30, 0xB5	; 181
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	8d 93       	st	X+, r24
    18cc:	9c 93       	st	X, r25
    18ce:	fe 01       	movw	r30, r28
    18d0:	e9 5b       	subi	r30, 0xB9	; 185
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	80 81       	ld	r24, Z
    18d6:	91 81       	ldd	r25, Z+1	; 0x01
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	f1 f7       	brne	.-4      	; 0x18d8 <LCD_sendCommand+0x30a>
    18dc:	fe 01       	movw	r30, r28
    18de:	e9 5b       	subi	r30, 0xB9	; 185
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	91 83       	std	Z+1, r25	; 0x01
    18e4:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
    18e6:	ab e3       	ldi	r26, 0x3B	; 59
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	eb e3       	ldi	r30, 0x3B	; 59
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	98 2f       	mov	r25, r24
    18f2:	90 7f       	andi	r25, 0xF0	; 240
    18f4:	fe 01       	movw	r30, r28
    18f6:	ed 59       	subi	r30, 0x9D	; 157
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 81       	ld	r24, Z
    18fc:	82 95       	swap	r24
    18fe:	8f 70       	andi	r24, 0x0F	; 15
    1900:	89 2b       	or	r24, r25
    1902:	8c 93       	st	X, r24
    1904:	fe 01       	movw	r30, r28
    1906:	ed 5b       	subi	r30, 0xBD	; 189
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	a0 e8       	ldi	r26, 0x80	; 128
    1910:	bf e3       	ldi	r27, 0x3F	; 63
    1912:	80 83       	st	Z, r24
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	a2 83       	std	Z+2, r26	; 0x02
    1918:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191a:	8e 01       	movw	r16, r28
    191c:	01 5c       	subi	r16, 0xC1	; 193
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	fe 01       	movw	r30, r28
    1922:	ed 5b       	subi	r30, 0xBD	; 189
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	4a e7       	ldi	r20, 0x7A	; 122
    1934:	53 e4       	ldi	r21, 0x43	; 67
    1936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	f8 01       	movw	r30, r16
    1940:	80 83       	st	Z, r24
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	a2 83       	std	Z+2, r26	; 0x02
    1946:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1948:	fe 01       	movw	r30, r28
    194a:	ff 96       	adiw	r30, 0x3f	; 63
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e8       	ldi	r20, 0x80	; 128
    195a:	5f e3       	ldi	r21, 0x3F	; 63
    195c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1960:	88 23       	and	r24, r24
    1962:	2c f4       	brge	.+10     	; 0x196e <LCD_sendCommand+0x3a0>
		__ticks = 1;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9e af       	std	Y+62, r25	; 0x3e
    196a:	8d af       	std	Y+61, r24	; 0x3d
    196c:	46 c0       	rjmp	.+140    	; 0x19fa <LCD_sendCommand+0x42c>
	else if (__tmp > 65535)
    196e:	fe 01       	movw	r30, r28
    1970:	ff 96       	adiw	r30, 0x3f	; 63
    1972:	60 81       	ld	r22, Z
    1974:	71 81       	ldd	r23, Z+1	; 0x01
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	3f ef       	ldi	r19, 0xFF	; 255
    197e:	4f e7       	ldi	r20, 0x7F	; 127
    1980:	57 e4       	ldi	r21, 0x47	; 71
    1982:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1986:	18 16       	cp	r1, r24
    1988:	64 f5       	brge	.+88     	; 0x19e2 <LCD_sendCommand+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198a:	fe 01       	movw	r30, r28
    198c:	ed 5b       	subi	r30, 0xBD	; 189
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	51 e4       	ldi	r21, 0x41	; 65
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9e af       	std	Y+62, r25	; 0x3e
    19b6:	8d af       	std	Y+61, r24	; 0x3d
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <LCD_sendCommand+0x40a>
    19ba:	89 e1       	ldi	r24, 0x19	; 25
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	9c af       	std	Y+60, r25	; 0x3c
    19c0:	8b af       	std	Y+59, r24	; 0x3b
    19c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    19c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <LCD_sendCommand+0x3f8>
    19ca:	9c af       	std	Y+60, r25	; 0x3c
    19cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    19d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	9e af       	std	Y+62, r25	; 0x3e
    19d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    19da:	9e ad       	ldd	r25, Y+62	; 0x3e
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	69 f7       	brne	.-38     	; 0x19ba <LCD_sendCommand+0x3ec>
    19e0:	16 c0       	rjmp	.+44     	; 0x1a0e <LCD_sendCommand+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e2:	fe 01       	movw	r30, r28
    19e4:	ff 96       	adiw	r30, 0x3f	; 63
    19e6:	60 81       	ld	r22, Z
    19e8:	71 81       	ldd	r23, Z+1	; 0x01
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	93 81       	ldd	r25, Z+3	; 0x03
    19ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	9e af       	std	Y+62, r25	; 0x3e
    19f8:	8d af       	std	Y+61, r24	; 0x3d
    19fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    19fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    19fe:	9a af       	std	Y+58, r25	; 0x3a
    1a00:	89 af       	std	Y+57, r24	; 0x39
    1a02:	89 ad       	ldd	r24, Y+57	; 0x39
    1a04:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <LCD_sendCommand+0x438>
    1a0a:	9a af       	std	Y+58, r25	; 0x3a
    1a0c:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1a0e:	a2 e3       	ldi	r26, 0x32	; 50
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e2 e3       	ldi	r30, 0x32	; 50
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	8f 77       	andi	r24, 0x7F	; 127
    1a1a:	8c 93       	st	X, r24
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	a0 e8       	ldi	r26, 0x80	; 128
    1a22:	bf e3       	ldi	r27, 0x3F	; 63
    1a24:	8d ab       	std	Y+53, r24	; 0x35
    1a26:	9e ab       	std	Y+54, r25	; 0x36
    1a28:	af ab       	std	Y+55, r26	; 0x37
    1a2a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a2e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a30:	8f a9       	ldd	r24, Y+55	; 0x37
    1a32:	98 ad       	ldd	r25, Y+56	; 0x38
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	4a e7       	ldi	r20, 0x7A	; 122
    1a3a:	53 e4       	ldi	r21, 0x43	; 67
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	89 ab       	std	Y+49, r24	; 0x31
    1a46:	9a ab       	std	Y+50, r25	; 0x32
    1a48:	ab ab       	std	Y+51, r26	; 0x33
    1a4a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a50:	8b a9       	ldd	r24, Y+51	; 0x33
    1a52:	9c a9       	ldd	r25, Y+52	; 0x34
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e8       	ldi	r20, 0x80	; 128
    1a5a:	5f e3       	ldi	r21, 0x3F	; 63
    1a5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a60:	88 23       	and	r24, r24
    1a62:	2c f4       	brge	.+10     	; 0x1a6e <LCD_sendCommand+0x4a0>
		__ticks = 1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	98 ab       	std	Y+48, r25	; 0x30
    1a6a:	8f a7       	std	Y+47, r24	; 0x2f
    1a6c:	3f c0       	rjmp	.+126    	; 0x1aec <LCD_sendCommand+0x51e>
	else if (__tmp > 65535)
    1a6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a70:	7a a9       	ldd	r23, Y+50	; 0x32
    1a72:	8b a9       	ldd	r24, Y+51	; 0x33
    1a74:	9c a9       	ldd	r25, Y+52	; 0x34
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	3f ef       	ldi	r19, 0xFF	; 255
    1a7a:	4f e7       	ldi	r20, 0x7F	; 127
    1a7c:	57 e4       	ldi	r21, 0x47	; 71
    1a7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a82:	18 16       	cp	r1, r24
    1a84:	4c f5       	brge	.+82     	; 0x1ad8 <LCD_sendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a86:	6d a9       	ldd	r22, Y+53	; 0x35
    1a88:	7e a9       	ldd	r23, Y+54	; 0x36
    1a8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e2       	ldi	r20, 0x20	; 32
    1a94:	51 e4       	ldi	r21, 0x41	; 65
    1a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	bc 01       	movw	r22, r24
    1aa0:	cd 01       	movw	r24, r26
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	98 ab       	std	Y+48, r25	; 0x30
    1aac:	8f a7       	std	Y+47, r24	; 0x2f
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <LCD_sendCommand+0x500>
    1ab0:	89 e1       	ldi	r24, 0x19	; 25
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	9e a7       	std	Y+46, r25	; 0x2e
    1ab6:	8d a7       	std	Y+45, r24	; 0x2d
    1ab8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aba:	9e a5       	ldd	r25, Y+46	; 0x2e
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <LCD_sendCommand+0x4ee>
    1ac0:	9e a7       	std	Y+46, r25	; 0x2e
    1ac2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	98 ab       	std	Y+48, r25	; 0x30
    1acc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ace:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ad0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	69 f7       	brne	.-38     	; 0x1ab0 <LCD_sendCommand+0x4e2>
    1ad6:	14 c0       	rjmp	.+40     	; 0x1b00 <LCD_sendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad8:	69 a9       	ldd	r22, Y+49	; 0x31
    1ada:	7a a9       	ldd	r23, Y+50	; 0x32
    1adc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ade:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	98 ab       	std	Y+48, r25	; 0x30
    1aea:	8f a7       	std	Y+47, r24	; 0x2f
    1aec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aee:	98 a9       	ldd	r25, Y+48	; 0x30
    1af0:	9c a7       	std	Y+44, r25	; 0x2c
    1af2:	8b a7       	std	Y+43, r24	; 0x2b
    1af4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1af6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <LCD_sendCommand+0x52a>
    1afc:	9c a7       	std	Y+44, r25	; 0x2c
    1afe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1b00:	a2 e3       	ldi	r26, 0x32	; 50
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e2 e3       	ldi	r30, 0x32	; 50
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	80 68       	ori	r24, 0x80	; 128
    1b0c:	8c 93       	st	X, r24
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e8       	ldi	r26, 0x80	; 128
    1b14:	bf e3       	ldi	r27, 0x3F	; 63
    1b16:	8f a3       	std	Y+39, r24	; 0x27
    1b18:	98 a7       	std	Y+40, r25	; 0x28
    1b1a:	a9 a7       	std	Y+41, r26	; 0x29
    1b1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b20:	78 a5       	ldd	r23, Y+40	; 0x28
    1b22:	89 a5       	ldd	r24, Y+41	; 0x29
    1b24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a e7       	ldi	r20, 0x7A	; 122
    1b2c:	53 e4       	ldi	r21, 0x43	; 67
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	8b a3       	std	Y+35, r24	; 0x23
    1b38:	9c a3       	std	Y+36, r25	; 0x24
    1b3a:	ad a3       	std	Y+37, r26	; 0x25
    1b3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b40:	7c a1       	ldd	r23, Y+36	; 0x24
    1b42:	8d a1       	ldd	r24, Y+37	; 0x25
    1b44:	9e a1       	ldd	r25, Y+38	; 0x26
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5f e3       	ldi	r21, 0x3F	; 63
    1b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b52:	88 23       	and	r24, r24
    1b54:	2c f4       	brge	.+10     	; 0x1b60 <LCD_sendCommand+0x592>
		__ticks = 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9a a3       	std	Y+34, r25	; 0x22
    1b5c:	89 a3       	std	Y+33, r24	; 0x21
    1b5e:	3f c0       	rjmp	.+126    	; 0x1bde <LCD_sendCommand+0x610>
	else if (__tmp > 65535)
    1b60:	6b a1       	ldd	r22, Y+35	; 0x23
    1b62:	7c a1       	ldd	r23, Y+36	; 0x24
    1b64:	8d a1       	ldd	r24, Y+37	; 0x25
    1b66:	9e a1       	ldd	r25, Y+38	; 0x26
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	3f ef       	ldi	r19, 0xFF	; 255
    1b6c:	4f e7       	ldi	r20, 0x7F	; 127
    1b6e:	57 e4       	ldi	r21, 0x47	; 71
    1b70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b74:	18 16       	cp	r1, r24
    1b76:	4c f5       	brge	.+82     	; 0x1bca <LCD_sendCommand+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b78:	6f a1       	ldd	r22, Y+39	; 0x27
    1b7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e2       	ldi	r20, 0x20	; 32
    1b86:	51 e4       	ldi	r21, 0x41	; 65
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9a a3       	std	Y+34, r25	; 0x22
    1b9e:	89 a3       	std	Y+33, r24	; 0x21
    1ba0:	0f c0       	rjmp	.+30     	; 0x1bc0 <LCD_sendCommand+0x5f2>
    1ba2:	89 e1       	ldi	r24, 0x19	; 25
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	98 a3       	std	Y+32, r25	; 0x20
    1ba8:	8f 8f       	std	Y+31, r24	; 0x1f
    1baa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bac:	98 a1       	ldd	r25, Y+32	; 0x20
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <LCD_sendCommand+0x5e0>
    1bb2:	98 a3       	std	Y+32, r25	; 0x20
    1bb4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	9a a3       	std	Y+34, r25	; 0x22
    1bbe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	69 f7       	brne	.-38     	; 0x1ba2 <LCD_sendCommand+0x5d4>
    1bc8:	14 c0       	rjmp	.+40     	; 0x1bf2 <LCD_sendCommand+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bca:	6b a1       	ldd	r22, Y+35	; 0x23
    1bcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bce:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9a a3       	std	Y+34, r25	; 0x22
    1bdc:	89 a3       	std	Y+33, r24	; 0x21
    1bde:	89 a1       	ldd	r24, Y+33	; 0x21
    1be0:	9a a1       	ldd	r25, Y+34	; 0x22
    1be2:	9e 8f       	std	Y+30, r25	; 0x1e
    1be4:	8d 8f       	std	Y+29, r24	; 0x1d
    1be6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <LCD_sendCommand+0x61c>
    1bee:	9e 8f       	std	Y+30, r25	; 0x1e
    1bf0:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    1bf2:	ab e3       	ldi	r26, 0x3B	; 59
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	eb e3       	ldi	r30, 0x3B	; 59
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	98 2f       	mov	r25, r24
    1bfe:	90 7f       	andi	r25, 0xF0	; 240
    1c00:	fe 01       	movw	r30, r28
    1c02:	ed 59       	subi	r30, 0x9D	; 157
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	8f 70       	andi	r24, 0x0F	; 15
    1c0a:	89 2b       	or	r24, r25
    1c0c:	8c 93       	st	X, r24
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a0 e8       	ldi	r26, 0x80	; 128
    1c14:	bf e3       	ldi	r27, 0x3F	; 63
    1c16:	89 8f       	std	Y+25, r24	; 0x19
    1c18:	9a 8f       	std	Y+26, r25	; 0x1a
    1c1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4a e7       	ldi	r20, 0x7A	; 122
    1c2c:	53 e4       	ldi	r21, 0x43	; 67
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	8d 8b       	std	Y+21, r24	; 0x15
    1c38:	9e 8b       	std	Y+22, r25	; 0x16
    1c3a:	af 8b       	std	Y+23, r26	; 0x17
    1c3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c40:	7e 89       	ldd	r23, Y+22	; 0x16
    1c42:	8f 89       	ldd	r24, Y+23	; 0x17
    1c44:	98 8d       	ldd	r25, Y+24	; 0x18
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c52:	88 23       	and	r24, r24
    1c54:	2c f4       	brge	.+10     	; 0x1c60 <LCD_sendCommand+0x692>
		__ticks = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9c 8b       	std	Y+20, r25	; 0x14
    1c5c:	8b 8b       	std	Y+19, r24	; 0x13
    1c5e:	3f c0       	rjmp	.+126    	; 0x1cde <LCD_sendCommand+0x710>
	else if (__tmp > 65535)
    1c60:	6d 89       	ldd	r22, Y+21	; 0x15
    1c62:	7e 89       	ldd	r23, Y+22	; 0x16
    1c64:	8f 89       	ldd	r24, Y+23	; 0x17
    1c66:	98 8d       	ldd	r25, Y+24	; 0x18
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	3f ef       	ldi	r19, 0xFF	; 255
    1c6c:	4f e7       	ldi	r20, 0x7F	; 127
    1c6e:	57 e4       	ldi	r21, 0x47	; 71
    1c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c74:	18 16       	cp	r1, r24
    1c76:	4c f5       	brge	.+82     	; 0x1cca <LCD_sendCommand+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c78:	69 8d       	ldd	r22, Y+25	; 0x19
    1c7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e2       	ldi	r20, 0x20	; 32
    1c86:	51 e4       	ldi	r21, 0x41	; 65
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9c 8b       	std	Y+20, r25	; 0x14
    1c9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <LCD_sendCommand+0x6f2>
    1ca2:	89 e1       	ldi	r24, 0x19	; 25
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9a 8b       	std	Y+18, r25	; 0x12
    1ca8:	89 8b       	std	Y+17, r24	; 0x11
    1caa:	89 89       	ldd	r24, Y+17	; 0x11
    1cac:	9a 89       	ldd	r25, Y+18	; 0x12
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCD_sendCommand+0x6e0>
    1cb2:	9a 8b       	std	Y+18, r25	; 0x12
    1cb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	9c 8b       	std	Y+20, r25	; 0x14
    1cbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	69 f7       	brne	.-38     	; 0x1ca2 <LCD_sendCommand+0x6d4>
    1cc8:	14 c0       	rjmp	.+40     	; 0x1cf2 <LCD_sendCommand+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cce:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9c 8b       	std	Y+20, r25	; 0x14
    1cdc:	8b 8b       	std	Y+19, r24	; 0x13
    1cde:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce2:	98 8b       	std	Y+16, r25	; 0x10
    1ce4:	8f 87       	std	Y+15, r24	; 0x0f
    1ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce8:	98 89       	ldd	r25, Y+16	; 0x10
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <LCD_sendCommand+0x71c>
    1cee:	98 8b       	std	Y+16, r25	; 0x10
    1cf0:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1cf2:	a2 e3       	ldi	r26, 0x32	; 50
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e2 e3       	ldi	r30, 0x32	; 50
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8f 77       	andi	r24, 0x7F	; 127
    1cfe:	8c 93       	st	X, r24
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	a0 e8       	ldi	r26, 0x80	; 128
    1d06:	bf e3       	ldi	r27, 0x3F	; 63
    1d08:	8b 87       	std	Y+11, r24	; 0x0b
    1d0a:	9c 87       	std	Y+12, r25	; 0x0c
    1d0c:	ad 87       	std	Y+13, r26	; 0x0d
    1d0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	4a e7       	ldi	r20, 0x7A	; 122
    1d1e:	53 e4       	ldi	r21, 0x43	; 67
    1d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	8f 83       	std	Y+7, r24	; 0x07
    1d2a:	98 87       	std	Y+8, r25	; 0x08
    1d2c:	a9 87       	std	Y+9, r26	; 0x09
    1d2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d30:	6f 81       	ldd	r22, Y+7	; 0x07
    1d32:	78 85       	ldd	r23, Y+8	; 0x08
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e8       	ldi	r20, 0x80	; 128
    1d3e:	5f e3       	ldi	r21, 0x3F	; 63
    1d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d44:	88 23       	and	r24, r24
    1d46:	2c f4       	brge	.+10     	; 0x1d52 <LCD_sendCommand+0x784>
		__ticks = 1;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
    1d50:	3f c0       	rjmp	.+126    	; 0x1dd0 <LCD_sendCommand+0x802>
	else if (__tmp > 65535)
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	3f ef       	ldi	r19, 0xFF	; 255
    1d5e:	4f e7       	ldi	r20, 0x7F	; 127
    1d60:	57 e4       	ldi	r21, 0x47	; 71
    1d62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d66:	18 16       	cp	r1, r24
    1d68:	4c f5       	brge	.+82     	; 0x1dbc <LCD_sendCommand+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e2       	ldi	r20, 0x20	; 32
    1d78:	51 e4       	ldi	r21, 0x41	; 65
    1d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
    1d92:	0f c0       	rjmp	.+30     	; 0x1db2 <LCD_sendCommand+0x7e4>
    1d94:	89 e1       	ldi	r24, 0x19	; 25
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	9c 83       	std	Y+4, r25	; 0x04
    1d9a:	8b 83       	std	Y+3, r24	; 0x03
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <LCD_sendCommand+0x7d2>
    1da4:	9c 83       	std	Y+4, r25	; 0x04
    1da6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da8:	8d 81       	ldd	r24, Y+5	; 0x05
    1daa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	9e 83       	std	Y+6, r25	; 0x06
    1db0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db2:	8d 81       	ldd	r24, Y+5	; 0x05
    1db4:	9e 81       	ldd	r25, Y+6	; 0x06
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	69 f7       	brne	.-38     	; 0x1d94 <LCD_sendCommand+0x7c6>
    1dba:	14 c0       	rjmp	.+40     	; 0x1de4 <LCD_sendCommand+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbe:	78 85       	ldd	r23, Y+8	; 0x08
    1dc0:	89 85       	ldd	r24, Y+9	; 0x09
    1dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9e 83       	std	Y+6, r25	; 0x06
    1dce:	8d 83       	std	Y+5, r24	; 0x05
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd4:	9a 83       	std	Y+2, r25	; 0x02
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	9a 81       	ldd	r25, Y+2	; 0x02
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <LCD_sendCommand+0x80e>
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1de4:	cd 59       	subi	r28, 0x9D	; 157
    1de6:	df 4f       	sbci	r29, 0xFF	; 255
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	08 95       	ret

00001dfc <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	c3 56       	subi	r28, 0x63	; 99
    1e0a:	d0 40       	sbci	r29, 0x00	; 0
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	fe 01       	movw	r30, r28
    1e18:	ed 59       	subi	r30, 0x9D	; 157
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1e1e:	a2 e3       	ldi	r26, 0x32	; 50
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e2 e3       	ldi	r30, 0x32	; 50
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	80 62       	ori	r24, 0x20	; 32
    1e2a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1e2c:	a2 e3       	ldi	r26, 0x32	; 50
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e2 e3       	ldi	r30, 0x32	; 50
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	8f 7b       	andi	r24, 0xBF	; 191
    1e38:	8c 93       	st	X, r24
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e1 5a       	subi	r30, 0xA1	; 161
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	a0 e8       	ldi	r26, 0x80	; 128
    1e46:	bf e3       	ldi	r27, 0x3F	; 63
    1e48:	80 83       	st	Z, r24
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	a2 83       	std	Z+2, r26	; 0x02
    1e4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e50:	8e 01       	movw	r16, r28
    1e52:	05 5a       	subi	r16, 0xA5	; 165
    1e54:	1f 4f       	sbci	r17, 0xFF	; 255
    1e56:	fe 01       	movw	r30, r28
    1e58:	e1 5a       	subi	r30, 0xA1	; 161
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	60 81       	ld	r22, Z
    1e5e:	71 81       	ldd	r23, Z+1	; 0x01
    1e60:	82 81       	ldd	r24, Z+2	; 0x02
    1e62:	93 81       	ldd	r25, Z+3	; 0x03
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	4a e7       	ldi	r20, 0x7A	; 122
    1e6a:	53 e4       	ldi	r21, 0x43	; 67
    1e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	f8 01       	movw	r30, r16
    1e76:	80 83       	st	Z, r24
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	a2 83       	std	Z+2, r26	; 0x02
    1e7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e5 5a       	subi	r30, 0xA5	; 165
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	60 81       	ld	r22, Z
    1e86:	71 81       	ldd	r23, Z+1	; 0x01
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	93 81       	ldd	r25, Z+3	; 0x03
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e8       	ldi	r20, 0x80	; 128
    1e92:	5f e3       	ldi	r21, 0x3F	; 63
    1e94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e98:	88 23       	and	r24, r24
    1e9a:	44 f4       	brge	.+16     	; 0x1eac <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e7 5a       	subi	r30, 0xA7	; 167
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	80 83       	st	Z, r24
    1eaa:	64 c0       	rjmp	.+200    	; 0x1f74 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1eac:	fe 01       	movw	r30, r28
    1eae:	e5 5a       	subi	r30, 0xA5	; 165
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	60 81       	ld	r22, Z
    1eb4:	71 81       	ldd	r23, Z+1	; 0x01
    1eb6:	82 81       	ldd	r24, Z+2	; 0x02
    1eb8:	93 81       	ldd	r25, Z+3	; 0x03
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	3f ef       	ldi	r19, 0xFF	; 255
    1ebe:	4f e7       	ldi	r20, 0x7F	; 127
    1ec0:	57 e4       	ldi	r21, 0x47	; 71
    1ec2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec6:	18 16       	cp	r1, r24
    1ec8:	0c f0       	brlt	.+2      	; 0x1ecc <LCD_displayCharacter+0xd0>
    1eca:	43 c0       	rjmp	.+134    	; 0x1f52 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e1 5a       	subi	r30, 0xA1	; 161
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	60 81       	ld	r22, Z
    1ed4:	71 81       	ldd	r23, Z+1	; 0x01
    1ed6:	82 81       	ldd	r24, Z+2	; 0x02
    1ed8:	93 81       	ldd	r25, Z+3	; 0x03
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	8e 01       	movw	r16, r28
    1eec:	07 5a       	subi	r16, 0xA7	; 167
    1eee:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	f8 01       	movw	r30, r16
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
    1f02:	1f c0       	rjmp	.+62     	; 0x1f42 <LCD_displayCharacter+0x146>
    1f04:	fe 01       	movw	r30, r28
    1f06:	e9 5a       	subi	r30, 0xA9	; 169
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	89 e1       	ldi	r24, 0x19	; 25
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	80 83       	st	Z, r24
    1f12:	fe 01       	movw	r30, r28
    1f14:	e9 5a       	subi	r30, 0xA9	; 169
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	80 81       	ld	r24, Z
    1f1a:	91 81       	ldd	r25, Z+1	; 0x01
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <LCD_displayCharacter+0x120>
    1f20:	fe 01       	movw	r30, r28
    1f22:	e9 5a       	subi	r30, 0xA9	; 169
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2a:	de 01       	movw	r26, r28
    1f2c:	a7 5a       	subi	r26, 0xA7	; 167
    1f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f30:	fe 01       	movw	r30, r28
    1f32:	e7 5a       	subi	r30, 0xA7	; 167
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	80 81       	ld	r24, Z
    1f38:	91 81       	ldd	r25, Z+1	; 0x01
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	11 96       	adiw	r26, 0x01	; 1
    1f3e:	9c 93       	st	X, r25
    1f40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f42:	fe 01       	movw	r30, r28
    1f44:	e7 5a       	subi	r30, 0xA7	; 167
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	80 81       	ld	r24, Z
    1f4a:	91 81       	ldd	r25, Z+1	; 0x01
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	d1 f6       	brne	.-76     	; 0x1f04 <LCD_displayCharacter+0x108>
    1f50:	27 c0       	rjmp	.+78     	; 0x1fa0 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f52:	8e 01       	movw	r16, r28
    1f54:	07 5a       	subi	r16, 0xA7	; 167
    1f56:	1f 4f       	sbci	r17, 0xFF	; 255
    1f58:	fe 01       	movw	r30, r28
    1f5a:	e5 5a       	subi	r30, 0xA5	; 165
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	60 81       	ld	r22, Z
    1f60:	71 81       	ldd	r23, Z+1	; 0x01
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	93 81       	ldd	r25, Z+3	; 0x03
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	f8 01       	movw	r30, r16
    1f70:	91 83       	std	Z+1, r25	; 0x01
    1f72:	80 83       	st	Z, r24
    1f74:	de 01       	movw	r26, r28
    1f76:	ab 5a       	subi	r26, 0xAB	; 171
    1f78:	bf 4f       	sbci	r27, 0xFF	; 255
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e7 5a       	subi	r30, 0xA7	; 167
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	80 81       	ld	r24, Z
    1f82:	91 81       	ldd	r25, Z+1	; 0x01
    1f84:	8d 93       	st	X+, r24
    1f86:	9c 93       	st	X, r25
    1f88:	fe 01       	movw	r30, r28
    1f8a:	eb 5a       	subi	r30, 0xAB	; 171
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	80 81       	ld	r24, Z
    1f90:	91 81       	ldd	r25, Z+1	; 0x01
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <LCD_displayCharacter+0x196>
    1f96:	fe 01       	movw	r30, r28
    1f98:	eb 5a       	subi	r30, 0xAB	; 171
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1fa0:	a2 e3       	ldi	r26, 0x32	; 50
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e2 e3       	ldi	r30, 0x32	; 50
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	80 68       	ori	r24, 0x80	; 128
    1fac:	8c 93       	st	X, r24
    1fae:	fe 01       	movw	r30, r28
    1fb0:	ef 5a       	subi	r30, 0xAF	; 175
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a0 e8       	ldi	r26, 0x80	; 128
    1fba:	bf e3       	ldi	r27, 0x3F	; 63
    1fbc:	80 83       	st	Z, r24
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	a2 83       	std	Z+2, r26	; 0x02
    1fc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc4:	8e 01       	movw	r16, r28
    1fc6:	03 5b       	subi	r16, 0xB3	; 179
    1fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fca:	fe 01       	movw	r30, r28
    1fcc:	ef 5a       	subi	r30, 0xAF	; 175
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	60 81       	ld	r22, Z
    1fd2:	71 81       	ldd	r23, Z+1	; 0x01
    1fd4:	82 81       	ldd	r24, Z+2	; 0x02
    1fd6:	93 81       	ldd	r25, Z+3	; 0x03
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a e7       	ldi	r20, 0x7A	; 122
    1fde:	53 e4       	ldi	r21, 0x43	; 67
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	f8 01       	movw	r30, r16
    1fea:	80 83       	st	Z, r24
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	a2 83       	std	Z+2, r26	; 0x02
    1ff0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e3 5b       	subi	r30, 0xB3	; 179
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    200c:	88 23       	and	r24, r24
    200e:	44 f4       	brge	.+16     	; 0x2020 <LCD_displayCharacter+0x224>
		__ticks = 1;
    2010:	fe 01       	movw	r30, r28
    2012:	e5 5b       	subi	r30, 0xB5	; 181
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
    201e:	64 c0       	rjmp	.+200    	; 0x20e8 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    2020:	fe 01       	movw	r30, r28
    2022:	e3 5b       	subi	r30, 0xB3	; 179
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	0c f0       	brlt	.+2      	; 0x2040 <LCD_displayCharacter+0x244>
    203e:	43 c0       	rjmp	.+134    	; 0x20c6 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2040:	fe 01       	movw	r30, r28
    2042:	ef 5a       	subi	r30, 0xAF	; 175
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e2       	ldi	r20, 0x20	; 32
    2054:	51 e4       	ldi	r21, 0x41	; 65
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	8e 01       	movw	r16, r28
    2060:	05 5b       	subi	r16, 0xB5	; 181
    2062:	1f 4f       	sbci	r17, 0xFF	; 255
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	f8 01       	movw	r30, r16
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
    2076:	1f c0       	rjmp	.+62     	; 0x20b6 <LCD_displayCharacter+0x2ba>
    2078:	fe 01       	movw	r30, r28
    207a:	e7 5b       	subi	r30, 0xB7	; 183
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	89 e1       	ldi	r24, 0x19	; 25
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
    2086:	fe 01       	movw	r30, r28
    2088:	e7 5b       	subi	r30, 0xB7	; 183
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	80 81       	ld	r24, Z
    208e:	91 81       	ldd	r25, Z+1	; 0x01
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_displayCharacter+0x294>
    2094:	fe 01       	movw	r30, r28
    2096:	e7 5b       	subi	r30, 0xB7	; 183
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209e:	de 01       	movw	r26, r28
    20a0:	a5 5b       	subi	r26, 0xB5	; 181
    20a2:	bf 4f       	sbci	r27, 0xFF	; 255
    20a4:	fe 01       	movw	r30, r28
    20a6:	e5 5b       	subi	r30, 0xB5	; 181
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 81       	ld	r24, Z
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	11 96       	adiw	r26, 0x01	; 1
    20b2:	9c 93       	st	X, r25
    20b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b6:	fe 01       	movw	r30, r28
    20b8:	e5 5b       	subi	r30, 0xB5	; 181
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 81       	ld	r24, Z
    20be:	91 81       	ldd	r25, Z+1	; 0x01
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	d1 f6       	brne	.-76     	; 0x2078 <LCD_displayCharacter+0x27c>
    20c4:	27 c0       	rjmp	.+78     	; 0x2114 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	8e 01       	movw	r16, r28
    20c8:	05 5b       	subi	r16, 0xB5	; 181
    20ca:	1f 4f       	sbci	r17, 0xFF	; 255
    20cc:	fe 01       	movw	r30, r28
    20ce:	e3 5b       	subi	r30, 0xB3	; 179
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	f8 01       	movw	r30, r16
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	80 83       	st	Z, r24
    20e8:	de 01       	movw	r26, r28
    20ea:	a9 5b       	subi	r26, 0xB9	; 185
    20ec:	bf 4f       	sbci	r27, 0xFF	; 255
    20ee:	fe 01       	movw	r30, r28
    20f0:	e5 5b       	subi	r30, 0xB5	; 181
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	91 81       	ldd	r25, Z+1	; 0x01
    20f8:	8d 93       	st	X+, r24
    20fa:	9c 93       	st	X, r25
    20fc:	fe 01       	movw	r30, r28
    20fe:	e9 5b       	subi	r30, 0xB9	; 185
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 81       	ld	r24, Z
    2104:	91 81       	ldd	r25, Z+1	; 0x01
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_displayCharacter+0x30a>
    210a:	fe 01       	movw	r30, r28
    210c:	e9 5b       	subi	r30, 0xB9	; 185
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	91 83       	std	Z+1, r25	; 0x01
    2112:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    2114:	ab e3       	ldi	r26, 0x3B	; 59
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	eb e3       	ldi	r30, 0x3B	; 59
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	98 2f       	mov	r25, r24
    2120:	90 7f       	andi	r25, 0xF0	; 240
    2122:	fe 01       	movw	r30, r28
    2124:	ed 59       	subi	r30, 0x9D	; 157
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	80 81       	ld	r24, Z
    212a:	82 95       	swap	r24
    212c:	8f 70       	andi	r24, 0x0F	; 15
    212e:	89 2b       	or	r24, r25
    2130:	8c 93       	st	X, r24
    2132:	fe 01       	movw	r30, r28
    2134:	ed 5b       	subi	r30, 0xBD	; 189
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	a0 e8       	ldi	r26, 0x80	; 128
    213e:	bf e3       	ldi	r27, 0x3F	; 63
    2140:	80 83       	st	Z, r24
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	a2 83       	std	Z+2, r26	; 0x02
    2146:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2148:	8e 01       	movw	r16, r28
    214a:	01 5c       	subi	r16, 0xC1	; 193
    214c:	1f 4f       	sbci	r17, 0xFF	; 255
    214e:	fe 01       	movw	r30, r28
    2150:	ed 5b       	subi	r30, 0xBD	; 189
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	60 81       	ld	r22, Z
    2156:	71 81       	ldd	r23, Z+1	; 0x01
    2158:	82 81       	ldd	r24, Z+2	; 0x02
    215a:	93 81       	ldd	r25, Z+3	; 0x03
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4a e7       	ldi	r20, 0x7A	; 122
    2162:	53 e4       	ldi	r21, 0x43	; 67
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	f8 01       	movw	r30, r16
    216e:	80 83       	st	Z, r24
    2170:	91 83       	std	Z+1, r25	; 0x01
    2172:	a2 83       	std	Z+2, r26	; 0x02
    2174:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2176:	fe 01       	movw	r30, r28
    2178:	ff 96       	adiw	r30, 0x3f	; 63
    217a:	60 81       	ld	r22, Z
    217c:	71 81       	ldd	r23, Z+1	; 0x01
    217e:	82 81       	ldd	r24, Z+2	; 0x02
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218e:	88 23       	and	r24, r24
    2190:	2c f4       	brge	.+10     	; 0x219c <LCD_displayCharacter+0x3a0>
		__ticks = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9e af       	std	Y+62, r25	; 0x3e
    2198:	8d af       	std	Y+61, r24	; 0x3d
    219a:	46 c0       	rjmp	.+140    	; 0x2228 <LCD_displayCharacter+0x42c>
	else if (__tmp > 65535)
    219c:	fe 01       	movw	r30, r28
    219e:	ff 96       	adiw	r30, 0x3f	; 63
    21a0:	60 81       	ld	r22, Z
    21a2:	71 81       	ldd	r23, Z+1	; 0x01
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	93 81       	ldd	r25, Z+3	; 0x03
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	3f ef       	ldi	r19, 0xFF	; 255
    21ac:	4f e7       	ldi	r20, 0x7F	; 127
    21ae:	57 e4       	ldi	r21, 0x47	; 71
    21b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b4:	18 16       	cp	r1, r24
    21b6:	64 f5       	brge	.+88     	; 0x2210 <LCD_displayCharacter+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b8:	fe 01       	movw	r30, r28
    21ba:	ed 5b       	subi	r30, 0xBD	; 189
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	60 81       	ld	r22, Z
    21c0:	71 81       	ldd	r23, Z+1	; 0x01
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e2       	ldi	r20, 0x20	; 32
    21cc:	51 e4       	ldi	r21, 0x41	; 65
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9e af       	std	Y+62, r25	; 0x3e
    21e4:	8d af       	std	Y+61, r24	; 0x3d
    21e6:	0f c0       	rjmp	.+30     	; 0x2206 <LCD_displayCharacter+0x40a>
    21e8:	89 e1       	ldi	r24, 0x19	; 25
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9c af       	std	Y+60, r25	; 0x3c
    21ee:	8b af       	std	Y+59, r24	; 0x3b
    21f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    21f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <LCD_displayCharacter+0x3f8>
    21f8:	9c af       	std	Y+60, r25	; 0x3c
    21fa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    21fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	9e af       	std	Y+62, r25	; 0x3e
    2204:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2206:	8d ad       	ldd	r24, Y+61	; 0x3d
    2208:	9e ad       	ldd	r25, Y+62	; 0x3e
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	69 f7       	brne	.-38     	; 0x21e8 <LCD_displayCharacter+0x3ec>
    220e:	16 c0       	rjmp	.+44     	; 0x223c <LCD_displayCharacter+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2210:	fe 01       	movw	r30, r28
    2212:	ff 96       	adiw	r30, 0x3f	; 63
    2214:	60 81       	ld	r22, Z
    2216:	71 81       	ldd	r23, Z+1	; 0x01
    2218:	82 81       	ldd	r24, Z+2	; 0x02
    221a:	93 81       	ldd	r25, Z+3	; 0x03
    221c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9e af       	std	Y+62, r25	; 0x3e
    2226:	8d af       	std	Y+61, r24	; 0x3d
    2228:	8d ad       	ldd	r24, Y+61	; 0x3d
    222a:	9e ad       	ldd	r25, Y+62	; 0x3e
    222c:	9a af       	std	Y+58, r25	; 0x3a
    222e:	89 af       	std	Y+57, r24	; 0x39
    2230:	89 ad       	ldd	r24, Y+57	; 0x39
    2232:	9a ad       	ldd	r25, Y+58	; 0x3a
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <LCD_displayCharacter+0x438>
    2238:	9a af       	std	Y+58, r25	; 0x3a
    223a:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    223c:	a2 e3       	ldi	r26, 0x32	; 50
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e2 e3       	ldi	r30, 0x32	; 50
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	8f 77       	andi	r24, 0x7F	; 127
    2248:	8c 93       	st	X, r24
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	a0 e8       	ldi	r26, 0x80	; 128
    2250:	bf e3       	ldi	r27, 0x3F	; 63
    2252:	8d ab       	std	Y+53, r24	; 0x35
    2254:	9e ab       	std	Y+54, r25	; 0x36
    2256:	af ab       	std	Y+55, r26	; 0x37
    2258:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225a:	6d a9       	ldd	r22, Y+53	; 0x35
    225c:	7e a9       	ldd	r23, Y+54	; 0x36
    225e:	8f a9       	ldd	r24, Y+55	; 0x37
    2260:	98 ad       	ldd	r25, Y+56	; 0x38
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	4a e7       	ldi	r20, 0x7A	; 122
    2268:	53 e4       	ldi	r21, 0x43	; 67
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	89 ab       	std	Y+49, r24	; 0x31
    2274:	9a ab       	std	Y+50, r25	; 0x32
    2276:	ab ab       	std	Y+51, r26	; 0x33
    2278:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    227a:	69 a9       	ldd	r22, Y+49	; 0x31
    227c:	7a a9       	ldd	r23, Y+50	; 0x32
    227e:	8b a9       	ldd	r24, Y+51	; 0x33
    2280:	9c a9       	ldd	r25, Y+52	; 0x34
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e8       	ldi	r20, 0x80	; 128
    2288:	5f e3       	ldi	r21, 0x3F	; 63
    228a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    228e:	88 23       	and	r24, r24
    2290:	2c f4       	brge	.+10     	; 0x229c <LCD_displayCharacter+0x4a0>
		__ticks = 1;
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	98 ab       	std	Y+48, r25	; 0x30
    2298:	8f a7       	std	Y+47, r24	; 0x2f
    229a:	3f c0       	rjmp	.+126    	; 0x231a <LCD_displayCharacter+0x51e>
	else if (__tmp > 65535)
    229c:	69 a9       	ldd	r22, Y+49	; 0x31
    229e:	7a a9       	ldd	r23, Y+50	; 0x32
    22a0:	8b a9       	ldd	r24, Y+51	; 0x33
    22a2:	9c a9       	ldd	r25, Y+52	; 0x34
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f e7       	ldi	r20, 0x7F	; 127
    22aa:	57 e4       	ldi	r21, 0x47	; 71
    22ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b0:	18 16       	cp	r1, r24
    22b2:	4c f5       	brge	.+82     	; 0x2306 <LCD_displayCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b4:	6d a9       	ldd	r22, Y+53	; 0x35
    22b6:	7e a9       	ldd	r23, Y+54	; 0x36
    22b8:	8f a9       	ldd	r24, Y+55	; 0x37
    22ba:	98 ad       	ldd	r25, Y+56	; 0x38
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e2       	ldi	r20, 0x20	; 32
    22c2:	51 e4       	ldi	r21, 0x41	; 65
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
    22d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	98 ab       	std	Y+48, r25	; 0x30
    22da:	8f a7       	std	Y+47, r24	; 0x2f
    22dc:	0f c0       	rjmp	.+30     	; 0x22fc <LCD_displayCharacter+0x500>
    22de:	89 e1       	ldi	r24, 0x19	; 25
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	9e a7       	std	Y+46, r25	; 0x2e
    22e4:	8d a7       	std	Y+45, r24	; 0x2d
    22e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    22e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <LCD_displayCharacter+0x4ee>
    22ee:	9e a7       	std	Y+46, r25	; 0x2e
    22f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22f4:	98 a9       	ldd	r25, Y+48	; 0x30
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	98 ab       	std	Y+48, r25	; 0x30
    22fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	69 f7       	brne	.-38     	; 0x22de <LCD_displayCharacter+0x4e2>
    2304:	14 c0       	rjmp	.+40     	; 0x232e <LCD_displayCharacter+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2306:	69 a9       	ldd	r22, Y+49	; 0x31
    2308:	7a a9       	ldd	r23, Y+50	; 0x32
    230a:	8b a9       	ldd	r24, Y+51	; 0x33
    230c:	9c a9       	ldd	r25, Y+52	; 0x34
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	98 ab       	std	Y+48, r25	; 0x30
    2318:	8f a7       	std	Y+47, r24	; 0x2f
    231a:	8f a5       	ldd	r24, Y+47	; 0x2f
    231c:	98 a9       	ldd	r25, Y+48	; 0x30
    231e:	9c a7       	std	Y+44, r25	; 0x2c
    2320:	8b a7       	std	Y+43, r24	; 0x2b
    2322:	8b a5       	ldd	r24, Y+43	; 0x2b
    2324:	9c a5       	ldd	r25, Y+44	; 0x2c
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <LCD_displayCharacter+0x52a>
    232a:	9c a7       	std	Y+44, r25	; 0x2c
    232c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    232e:	a2 e3       	ldi	r26, 0x32	; 50
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e2 e3       	ldi	r30, 0x32	; 50
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	80 68       	ori	r24, 0x80	; 128
    233a:	8c 93       	st	X, r24
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	a0 e8       	ldi	r26, 0x80	; 128
    2342:	bf e3       	ldi	r27, 0x3F	; 63
    2344:	8f a3       	std	Y+39, r24	; 0x27
    2346:	98 a7       	std	Y+40, r25	; 0x28
    2348:	a9 a7       	std	Y+41, r26	; 0x29
    234a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234c:	6f a1       	ldd	r22, Y+39	; 0x27
    234e:	78 a5       	ldd	r23, Y+40	; 0x28
    2350:	89 a5       	ldd	r24, Y+41	; 0x29
    2352:	9a a5       	ldd	r25, Y+42	; 0x2a
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	4a e7       	ldi	r20, 0x7A	; 122
    235a:	53 e4       	ldi	r21, 0x43	; 67
    235c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	8b a3       	std	Y+35, r24	; 0x23
    2366:	9c a3       	std	Y+36, r25	; 0x24
    2368:	ad a3       	std	Y+37, r26	; 0x25
    236a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    236c:	6b a1       	ldd	r22, Y+35	; 0x23
    236e:	7c a1       	ldd	r23, Y+36	; 0x24
    2370:	8d a1       	ldd	r24, Y+37	; 0x25
    2372:	9e a1       	ldd	r25, Y+38	; 0x26
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e8       	ldi	r20, 0x80	; 128
    237a:	5f e3       	ldi	r21, 0x3F	; 63
    237c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2380:	88 23       	and	r24, r24
    2382:	2c f4       	brge	.+10     	; 0x238e <LCD_displayCharacter+0x592>
		__ticks = 1;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	9a a3       	std	Y+34, r25	; 0x22
    238a:	89 a3       	std	Y+33, r24	; 0x21
    238c:	3f c0       	rjmp	.+126    	; 0x240c <LCD_displayCharacter+0x610>
	else if (__tmp > 65535)
    238e:	6b a1       	ldd	r22, Y+35	; 0x23
    2390:	7c a1       	ldd	r23, Y+36	; 0x24
    2392:	8d a1       	ldd	r24, Y+37	; 0x25
    2394:	9e a1       	ldd	r25, Y+38	; 0x26
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	3f ef       	ldi	r19, 0xFF	; 255
    239a:	4f e7       	ldi	r20, 0x7F	; 127
    239c:	57 e4       	ldi	r21, 0x47	; 71
    239e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23a2:	18 16       	cp	r1, r24
    23a4:	4c f5       	brge	.+82     	; 0x23f8 <LCD_displayCharacter+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a6:	6f a1       	ldd	r22, Y+39	; 0x27
    23a8:	78 a5       	ldd	r23, Y+40	; 0x28
    23aa:	89 a5       	ldd	r24, Y+41	; 0x29
    23ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e2       	ldi	r20, 0x20	; 32
    23b4:	51 e4       	ldi	r21, 0x41	; 65
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	bc 01       	movw	r22, r24
    23c0:	cd 01       	movw	r24, r26
    23c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	9a a3       	std	Y+34, r25	; 0x22
    23cc:	89 a3       	std	Y+33, r24	; 0x21
    23ce:	0f c0       	rjmp	.+30     	; 0x23ee <LCD_displayCharacter+0x5f2>
    23d0:	89 e1       	ldi	r24, 0x19	; 25
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	98 a3       	std	Y+32, r25	; 0x20
    23d6:	8f 8f       	std	Y+31, r24	; 0x1f
    23d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23da:	98 a1       	ldd	r25, Y+32	; 0x20
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <LCD_displayCharacter+0x5e0>
    23e0:	98 a3       	std	Y+32, r25	; 0x20
    23e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e4:	89 a1       	ldd	r24, Y+33	; 0x21
    23e6:	9a a1       	ldd	r25, Y+34	; 0x22
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	9a a3       	std	Y+34, r25	; 0x22
    23ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ee:	89 a1       	ldd	r24, Y+33	; 0x21
    23f0:	9a a1       	ldd	r25, Y+34	; 0x22
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	69 f7       	brne	.-38     	; 0x23d0 <LCD_displayCharacter+0x5d4>
    23f6:	14 c0       	rjmp	.+40     	; 0x2420 <LCD_displayCharacter+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f8:	6b a1       	ldd	r22, Y+35	; 0x23
    23fa:	7c a1       	ldd	r23, Y+36	; 0x24
    23fc:	8d a1       	ldd	r24, Y+37	; 0x25
    23fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	9a a3       	std	Y+34, r25	; 0x22
    240a:	89 a3       	std	Y+33, r24	; 0x21
    240c:	89 a1       	ldd	r24, Y+33	; 0x21
    240e:	9a a1       	ldd	r25, Y+34	; 0x22
    2410:	9e 8f       	std	Y+30, r25	; 0x1e
    2412:	8d 8f       	std	Y+29, r24	; 0x1d
    2414:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2416:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	f1 f7       	brne	.-4      	; 0x2418 <LCD_displayCharacter+0x61c>
    241c:	9e 8f       	std	Y+30, r25	; 0x1e
    241e:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    2420:	ab e3       	ldi	r26, 0x3B	; 59
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	eb e3       	ldi	r30, 0x3B	; 59
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	98 2f       	mov	r25, r24
    242c:	90 7f       	andi	r25, 0xF0	; 240
    242e:	fe 01       	movw	r30, r28
    2430:	ed 59       	subi	r30, 0x9D	; 157
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	8f 70       	andi	r24, 0x0F	; 15
    2438:	89 2b       	or	r24, r25
    243a:	8c 93       	st	X, r24
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	a0 e8       	ldi	r26, 0x80	; 128
    2442:	bf e3       	ldi	r27, 0x3F	; 63
    2444:	89 8f       	std	Y+25, r24	; 0x19
    2446:	9a 8f       	std	Y+26, r25	; 0x1a
    2448:	ab 8f       	std	Y+27, r26	; 0x1b
    244a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244c:	69 8d       	ldd	r22, Y+25	; 0x19
    244e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2450:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2452:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	4a e7       	ldi	r20, 0x7A	; 122
    245a:	53 e4       	ldi	r21, 0x43	; 67
    245c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	8d 8b       	std	Y+21, r24	; 0x15
    2466:	9e 8b       	std	Y+22, r25	; 0x16
    2468:	af 8b       	std	Y+23, r26	; 0x17
    246a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    246c:	6d 89       	ldd	r22, Y+21	; 0x15
    246e:	7e 89       	ldd	r23, Y+22	; 0x16
    2470:	8f 89       	ldd	r24, Y+23	; 0x17
    2472:	98 8d       	ldd	r25, Y+24	; 0x18
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e8       	ldi	r20, 0x80	; 128
    247a:	5f e3       	ldi	r21, 0x3F	; 63
    247c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2480:	88 23       	and	r24, r24
    2482:	2c f4       	brge	.+10     	; 0x248e <LCD_displayCharacter+0x692>
		__ticks = 1;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	9c 8b       	std	Y+20, r25	; 0x14
    248a:	8b 8b       	std	Y+19, r24	; 0x13
    248c:	3f c0       	rjmp	.+126    	; 0x250c <LCD_displayCharacter+0x710>
	else if (__tmp > 65535)
    248e:	6d 89       	ldd	r22, Y+21	; 0x15
    2490:	7e 89       	ldd	r23, Y+22	; 0x16
    2492:	8f 89       	ldd	r24, Y+23	; 0x17
    2494:	98 8d       	ldd	r25, Y+24	; 0x18
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	3f ef       	ldi	r19, 0xFF	; 255
    249a:	4f e7       	ldi	r20, 0x7F	; 127
    249c:	57 e4       	ldi	r21, 0x47	; 71
    249e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a2:	18 16       	cp	r1, r24
    24a4:	4c f5       	brge	.+82     	; 0x24f8 <LCD_displayCharacter+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a6:	69 8d       	ldd	r22, Y+25	; 0x19
    24a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e2       	ldi	r20, 0x20	; 32
    24b4:	51 e4       	ldi	r21, 0x41	; 65
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9c 8b       	std	Y+20, r25	; 0x14
    24cc:	8b 8b       	std	Y+19, r24	; 0x13
    24ce:	0f c0       	rjmp	.+30     	; 0x24ee <LCD_displayCharacter+0x6f2>
    24d0:	89 e1       	ldi	r24, 0x19	; 25
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	9a 8b       	std	Y+18, r25	; 0x12
    24d6:	89 8b       	std	Y+17, r24	; 0x11
    24d8:	89 89       	ldd	r24, Y+17	; 0x11
    24da:	9a 89       	ldd	r25, Y+18	; 0x12
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <LCD_displayCharacter+0x6e0>
    24e0:	9a 8b       	std	Y+18, r25	; 0x12
    24e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e4:	8b 89       	ldd	r24, Y+19	; 0x13
    24e6:	9c 89       	ldd	r25, Y+20	; 0x14
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	9c 8b       	std	Y+20, r25	; 0x14
    24ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ee:	8b 89       	ldd	r24, Y+19	; 0x13
    24f0:	9c 89       	ldd	r25, Y+20	; 0x14
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	69 f7       	brne	.-38     	; 0x24d0 <LCD_displayCharacter+0x6d4>
    24f6:	14 c0       	rjmp	.+40     	; 0x2520 <LCD_displayCharacter+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f8:	6d 89       	ldd	r22, Y+21	; 0x15
    24fa:	7e 89       	ldd	r23, Y+22	; 0x16
    24fc:	8f 89       	ldd	r24, Y+23	; 0x17
    24fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9c 8b       	std	Y+20, r25	; 0x14
    250a:	8b 8b       	std	Y+19, r24	; 0x13
    250c:	8b 89       	ldd	r24, Y+19	; 0x13
    250e:	9c 89       	ldd	r25, Y+20	; 0x14
    2510:	98 8b       	std	Y+16, r25	; 0x10
    2512:	8f 87       	std	Y+15, r24	; 0x0f
    2514:	8f 85       	ldd	r24, Y+15	; 0x0f
    2516:	98 89       	ldd	r25, Y+16	; 0x10
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <LCD_displayCharacter+0x71c>
    251c:	98 8b       	std	Y+16, r25	; 0x10
    251e:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2520:	a2 e3       	ldi	r26, 0x32	; 50
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e2 e3       	ldi	r30, 0x32	; 50
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	8f 77       	andi	r24, 0x7F	; 127
    252c:	8c 93       	st	X, r24
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	a0 e8       	ldi	r26, 0x80	; 128
    2534:	bf e3       	ldi	r27, 0x3F	; 63
    2536:	8b 87       	std	Y+11, r24	; 0x0b
    2538:	9c 87       	std	Y+12, r25	; 0x0c
    253a:	ad 87       	std	Y+13, r26	; 0x0d
    253c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2540:	7c 85       	ldd	r23, Y+12	; 0x0c
    2542:	8d 85       	ldd	r24, Y+13	; 0x0d
    2544:	9e 85       	ldd	r25, Y+14	; 0x0e
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	4a e7       	ldi	r20, 0x7A	; 122
    254c:	53 e4       	ldi	r21, 0x43	; 67
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	8f 83       	std	Y+7, r24	; 0x07
    2558:	98 87       	std	Y+8, r25	; 0x08
    255a:	a9 87       	std	Y+9, r26	; 0x09
    255c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e8       	ldi	r20, 0x80	; 128
    256c:	5f e3       	ldi	r21, 0x3F	; 63
    256e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2572:	88 23       	and	r24, r24
    2574:	2c f4       	brge	.+10     	; 0x2580 <LCD_displayCharacter+0x784>
		__ticks = 1;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9e 83       	std	Y+6, r25	; 0x06
    257c:	8d 83       	std	Y+5, r24	; 0x05
    257e:	3f c0       	rjmp	.+126    	; 0x25fe <LCD_displayCharacter+0x802>
	else if (__tmp > 65535)
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	3f ef       	ldi	r19, 0xFF	; 255
    258c:	4f e7       	ldi	r20, 0x7F	; 127
    258e:	57 e4       	ldi	r21, 0x47	; 71
    2590:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2594:	18 16       	cp	r1, r24
    2596:	4c f5       	brge	.+82     	; 0x25ea <LCD_displayCharacter+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2598:	6b 85       	ldd	r22, Y+11	; 0x0b
    259a:	7c 85       	ldd	r23, Y+12	; 0x0c
    259c:	8d 85       	ldd	r24, Y+13	; 0x0d
    259e:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e2       	ldi	r20, 0x20	; 32
    25a6:	51 e4       	ldi	r21, 0x41	; 65
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	0f c0       	rjmp	.+30     	; 0x25e0 <LCD_displayCharacter+0x7e4>
    25c2:	89 e1       	ldi	r24, 0x19	; 25
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9c 83       	std	Y+4, r25	; 0x04
    25c8:	8b 83       	std	Y+3, r24	; 0x03
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	9c 81       	ldd	r25, Y+4	; 0x04
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <LCD_displayCharacter+0x7d2>
    25d2:	9c 83       	std	Y+4, r25	; 0x04
    25d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	69 f7       	brne	.-38     	; 0x25c2 <LCD_displayCharacter+0x7c6>
    25e8:	14 c0       	rjmp	.+40     	; 0x2612 <LCD_displayCharacter+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2600:	9e 81       	ldd	r25, Y+6	; 0x06
    2602:	9a 83       	std	Y+2, r25	; 0x02
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <LCD_displayCharacter+0x80e>
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2612:	cd 59       	subi	r28, 0x9D	; 157
    2614:	df 4f       	sbci	r29, 0xFF	; 255
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	1f 91       	pop	r17
    2626:	0f 91       	pop	r16
    2628:	08 95       	ret

0000262a <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <LCD_displayString+0x6>
    2630:	0f 92       	push	r0
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	9b 83       	std	Y+3, r25	; 0x03
    2638:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    263a:	19 82       	std	Y+1, r1	; 0x01
    263c:	0e c0       	rjmp	.+28     	; 0x265a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	28 2f       	mov	r18, r24
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	9b 81       	ldd	r25, Y+3	; 0x03
    2648:	fc 01       	movw	r30, r24
    264a:	e2 0f       	add	r30, r18
    264c:	f3 1f       	adc	r31, r19
    264e:	80 81       	ld	r24, Z
    2650:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_displayCharacter>
		i++;
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	8f 5f       	subi	r24, 0xFF	; 255
    2658:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	9b 81       	ldd	r25, Y+3	; 0x03
    2664:	fc 01       	movw	r30, r24
    2666:	e2 0f       	add	r30, r18
    2668:	f3 1f       	adc	r31, r19
    266a:	80 81       	ld	r24, Z
    266c:	88 23       	and	r24, r24
    266e:	39 f7       	brne	.-50     	; 0x263e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	00 d0       	rcall	.+0      	; 0x2682 <LCD_goToRowColumn+0x6>
    2682:	00 d0       	rcall	.+0      	; 0x2684 <LCD_goToRowColumn+0x8>
    2684:	0f 92       	push	r0
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	8a 83       	std	Y+2, r24	; 0x02
    268c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	3d 83       	std	Y+5, r19	; 0x05
    2696:	2c 83       	std	Y+4, r18	; 0x04
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	9d 81       	ldd	r25, Y+5	; 0x05
    269c:	81 30       	cpi	r24, 0x01	; 1
    269e:	91 05       	cpc	r25, r1
    26a0:	c1 f0       	breq	.+48     	; 0x26d2 <LCD_goToRowColumn+0x56>
    26a2:	2c 81       	ldd	r18, Y+4	; 0x04
    26a4:	3d 81       	ldd	r19, Y+5	; 0x05
    26a6:	22 30       	cpi	r18, 0x02	; 2
    26a8:	31 05       	cpc	r19, r1
    26aa:	2c f4       	brge	.+10     	; 0x26b6 <LCD_goToRowColumn+0x3a>
    26ac:	8c 81       	ldd	r24, Y+4	; 0x04
    26ae:	9d 81       	ldd	r25, Y+5	; 0x05
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	61 f0       	breq	.+24     	; 0x26cc <LCD_goToRowColumn+0x50>
    26b4:	19 c0       	rjmp	.+50     	; 0x26e8 <LCD_goToRowColumn+0x6c>
    26b6:	2c 81       	ldd	r18, Y+4	; 0x04
    26b8:	3d 81       	ldd	r19, Y+5	; 0x05
    26ba:	22 30       	cpi	r18, 0x02	; 2
    26bc:	31 05       	cpc	r19, r1
    26be:	69 f0       	breq	.+26     	; 0x26da <LCD_goToRowColumn+0x5e>
    26c0:	8c 81       	ldd	r24, Y+4	; 0x04
    26c2:	9d 81       	ldd	r25, Y+5	; 0x05
    26c4:	83 30       	cpi	r24, 0x03	; 3
    26c6:	91 05       	cpc	r25, r1
    26c8:	61 f0       	breq	.+24     	; 0x26e2 <LCD_goToRowColumn+0x66>
    26ca:	0e c0       	rjmp	.+28     	; 0x26e8 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	0b c0       	rjmp	.+22     	; 0x26e8 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	80 5c       	subi	r24, 0xC0	; 192
    26d6:	89 83       	std	Y+1, r24	; 0x01
    26d8:	07 c0       	rjmp	.+14     	; 0x26e8 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	80 5f       	subi	r24, 0xF0	; 240
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	03 c0       	rjmp	.+6      	; 0x26e8 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	80 5b       	subi	r24, 0xB0	; 176
    26e6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	80 68       	ori	r24, 0x80	; 128
    26ec:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <LCD_sendCommand>
}
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	00 d0       	rcall	.+0      	; 0x2706 <LCD_displayStringRowColumn+0x6>
    2706:	00 d0       	rcall	.+0      	; 0x2708 <LCD_displayStringRowColumn+0x8>
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	6a 83       	std	Y+2, r22	; 0x02
    2710:	5c 83       	std	Y+4, r21	; 0x04
    2712:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	6a 81       	ldd	r22, Y+2	; 0x02
    2718:	0e 94 3e 13 	call	0x267c	; 0x267c <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	0e 94 15 13 	call	0x262a	; 0x262a <LCD_displayString>
}
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	62 97       	sbiw	r28, 0x12	; 18
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	cd bf       	out	0x3d, r28	; 61
    2746:	9a 8b       	std	Y+18, r25	; 0x12
    2748:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    274a:	89 89       	ldd	r24, Y+17	; 0x11
    274c:	9a 89       	ldd	r25, Y+18	; 0x12
    274e:	9e 01       	movw	r18, r28
    2750:	2f 5f       	subi	r18, 0xFF	; 255
    2752:	3f 4f       	sbci	r19, 0xFF	; 255
    2754:	b9 01       	movw	r22, r18
    2756:	4a e0       	ldi	r20, 0x0A	; 10
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <itoa>
   LCD_displayString(buff);
    275e:	ce 01       	movw	r24, r28
    2760:	01 96       	adiw	r24, 0x01	; 1
    2762:	0e 94 15 13 	call	0x262a	; 0x262a <LCD_displayString>
}
    2766:	62 96       	adiw	r28, 0x12	; 18
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	de bf       	out	0x3e, r29	; 62
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	cd bf       	out	0x3d, r28	; 61
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <LCD_sendCommand>
}
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <__vector_9>:
#define NULL_PTR ((void*)0)

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER0_OVF_vect)
{
    278c:	1f 92       	push	r1
    278e:	0f 92       	push	r0
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	0f 92       	push	r0
    2794:	11 24       	eor	r1, r1
    2796:	2f 93       	push	r18
    2798:	3f 93       	push	r19
    279a:	4f 93       	push	r20
    279c:	5f 93       	push	r21
    279e:	6f 93       	push	r22
    27a0:	7f 93       	push	r23
    27a2:	8f 93       	push	r24
    27a4:	9f 93       	push	r25
    27a6:	af 93       	push	r26
    27a8:	bf 93       	push	r27
    27aa:	ef 93       	push	r30
    27ac:	ff 93       	push	r31
    27ae:	df 93       	push	r29
    27b0:	cf 93       	push	r28
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    27b6:	80 91 72 00 	lds	r24, 0x0072
    27ba:	90 91 73 00 	lds	r25, 0x0073
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	29 f0       	breq	.+10     	; 0x27cc <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    27c2:	e0 91 72 00 	lds	r30, 0x0072
    27c6:	f0 91 73 00 	lds	r31, 0x0073
    27ca:	09 95       	icall
	}
}
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	ff 91       	pop	r31
    27d2:	ef 91       	pop	r30
    27d4:	bf 91       	pop	r27
    27d6:	af 91       	pop	r26
    27d8:	9f 91       	pop	r25
    27da:	8f 91       	pop	r24
    27dc:	7f 91       	pop	r23
    27de:	6f 91       	pop	r22
    27e0:	5f 91       	pop	r21
    27e2:	4f 91       	pop	r20
    27e4:	3f 91       	pop	r19
    27e6:	2f 91       	pop	r18
    27e8:	0f 90       	pop	r0
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	0f 90       	pop	r0
    27ee:	1f 90       	pop	r1
    27f0:	18 95       	reti

000027f2 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    27f2:	1f 92       	push	r1
    27f4:	0f 92       	push	r0
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	0f 92       	push	r0
    27fa:	11 24       	eor	r1, r1
    27fc:	2f 93       	push	r18
    27fe:	3f 93       	push	r19
    2800:	4f 93       	push	r20
    2802:	5f 93       	push	r21
    2804:	6f 93       	push	r22
    2806:	7f 93       	push	r23
    2808:	8f 93       	push	r24
    280a:	9f 93       	push	r25
    280c:	af 93       	push	r26
    280e:	bf 93       	push	r27
    2810:	ef 93       	push	r30
    2812:	ff 93       	push	r31
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    281c:	80 91 72 00 	lds	r24, 0x0072
    2820:	90 91 73 00 	lds	r25, 0x0073
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	29 f0       	breq	.+10     	; 0x2832 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2828:	e0 91 72 00 	lds	r30, 0x0072
    282c:	f0 91 73 00 	lds	r31, 0x0073
    2830:	09 95       	icall
	}
}
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	ff 91       	pop	r31
    2838:	ef 91       	pop	r30
    283a:	bf 91       	pop	r27
    283c:	af 91       	pop	r26
    283e:	9f 91       	pop	r25
    2840:	8f 91       	pop	r24
    2842:	7f 91       	pop	r23
    2844:	6f 91       	pop	r22
    2846:	5f 91       	pop	r21
    2848:	4f 91       	pop	r20
    284a:	3f 91       	pop	r19
    284c:	2f 91       	pop	r18
    284e:	0f 90       	pop	r0
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	0f 90       	pop	r0
    2854:	1f 90       	pop	r1
    2856:	18 95       	reti

00002858 <Set_callBack>:

void Set_callBack(void(*a_ptr)(void)){
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	00 d0       	rcall	.+0      	; 0x285e <Set_callBack+0x6>
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	9a 83       	std	Y+2, r25	; 0x02
    2864:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	90 93 73 00 	sts	0x0073, r25
    286e:	80 93 72 00 	sts	0x0072, r24
}
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <Timer0_init>:


void Timer0_init(const Timer0_ConfigType * Config_Ptr){
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	00 d0       	rcall	.+0      	; 0x2882 <Timer0_init+0x6>
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	9a 83       	std	Y+2, r25	; 0x02
    2888:	89 83       	std	Y+1, r24	; 0x01

	TCNT0=0;
    288a:	e2 e5       	ldi	r30, 0x52	; 82
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	10 82       	st	Z, r1

	if ((Config_Ptr->mode==NORMAL_MODE)){
    2890:	e9 81       	ldd	r30, Y+1	; 0x01
    2892:	fa 81       	ldd	r31, Y+2	; 0x02
    2894:	80 81       	ld	r24, Z
    2896:	88 23       	and	r24, r24
    2898:	41 f4       	brne	.+16     	; 0x28aa <Timer0_init+0x2e>
			SET_BIT(TIMSK,TOIE0);
    289a:	a9 e5       	ldi	r26, 0x59	; 89
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	e9 e5       	ldi	r30, 0x59	; 89
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	81 60       	ori	r24, 0x01	; 1
    28a6:	8c 93       	st	X, r24
    28a8:	07 c0       	rjmp	.+14     	; 0x28b8 <Timer0_init+0x3c>
		}else {
			SET_BIT(TIMSK,OCIE0);
    28aa:	a9 e5       	ldi	r26, 0x59	; 89
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	e9 e5       	ldi	r30, 0x59	; 89
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	82 60       	ori	r24, 0x02	; 2
    28b6:	8c 93       	st	X, r24
		}


	if ((Config_Ptr->mode==NORMAL_MODE)||(Config_Ptr->mode==CTC)){
    28b8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ba:	fa 81       	ldd	r31, Y+2	; 0x02
    28bc:	80 81       	ld	r24, Z
    28be:	88 23       	and	r24, r24
    28c0:	29 f0       	breq	.+10     	; 0x28cc <Timer0_init+0x50>
    28c2:	e9 81       	ldd	r30, Y+1	; 0x01
    28c4:	fa 81       	ldd	r31, Y+2	; 0x02
    28c6:	80 81       	ld	r24, Z
    28c8:	82 30       	cpi	r24, 0x02	; 2
    28ca:	41 f4       	brne	.+16     	; 0x28dc <Timer0_init+0x60>
		SET_BIT(TCCR0,FOC0);
    28cc:	a3 e5       	ldi	r26, 0x53	; 83
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	e3 e5       	ldi	r30, 0x53	; 83
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	80 68       	ori	r24, 0x80	; 128
    28d8:	8c 93       	st	X, r24
    28da:	07 c0       	rjmp	.+14     	; 0x28ea <Timer0_init+0x6e>
	}else{
		CLEAR_BIT(TCCR0,FOC0);
    28dc:	a3 e5       	ldi	r26, 0x53	; 83
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	e3 e5       	ldi	r30, 0x53	; 83
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	8f 77       	andi	r24, 0x7F	; 127
    28e8:	8c 93       	st	X, r24
	}
	//configue clock
	TCCR0= (TCCR0 & 0xF8) | (Config_Ptr->clock);
    28ea:	a3 e5       	ldi	r26, 0x53	; 83
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	e3 e5       	ldi	r30, 0x53	; 83
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	98 2f       	mov	r25, r24
    28f6:	98 7f       	andi	r25, 0xF8	; 248
    28f8:	e9 81       	ldd	r30, Y+1	; 0x01
    28fa:	fa 81       	ldd	r31, Y+2	; 0x02
    28fc:	81 81       	ldd	r24, Z+1	; 0x01
    28fe:	89 2b       	or	r24, r25
    2900:	8c 93       	st	X, r24

	//configure mode
	TCCR0 = (TCCR0 & 0xB7) | (((Config_Ptr->mode)&0x01)<<6);
    2902:	a3 e5       	ldi	r26, 0x53	; 83
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e3 e5       	ldi	r30, 0x53	; 83
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	28 2f       	mov	r18, r24
    290e:	27 7b       	andi	r18, 0xB7	; 183
    2910:	e9 81       	ldd	r30, Y+1	; 0x01
    2912:	fa 81       	ldd	r31, Y+2	; 0x02
    2914:	80 81       	ld	r24, Z
    2916:	88 2f       	mov	r24, r24
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	81 70       	andi	r24, 0x01	; 1
    291c:	90 70       	andi	r25, 0x00	; 0
    291e:	00 24       	eor	r0, r0
    2920:	96 95       	lsr	r25
    2922:	87 95       	ror	r24
    2924:	07 94       	ror	r0
    2926:	96 95       	lsr	r25
    2928:	87 95       	ror	r24
    292a:	07 94       	ror	r0
    292c:	98 2f       	mov	r25, r24
    292e:	80 2d       	mov	r24, r0
    2930:	82 2b       	or	r24, r18
    2932:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xB7) | (((Config_Ptr->mode)&0x02)<<3);
    2934:	a3 e5       	ldi	r26, 0x53	; 83
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e3 e5       	ldi	r30, 0x53	; 83
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	28 2f       	mov	r18, r24
    2940:	27 7b       	andi	r18, 0xB7	; 183
    2942:	e9 81       	ldd	r30, Y+1	; 0x01
    2944:	fa 81       	ldd	r31, Y+2	; 0x02
    2946:	80 81       	ld	r24, Z
    2948:	88 2f       	mov	r24, r24
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	82 70       	andi	r24, 0x02	; 2
    294e:	90 70       	andi	r25, 0x00	; 0
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	82 2b       	or	r24, r18
    295e:	8c 93       	st	X, r24

	//configure OCR
	OCR0=Config_Ptr->OCR;
    2960:	ac e5       	ldi	r26, 0x5C	; 92
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e9 81       	ldd	r30, Y+1	; 0x01
    2966:	fa 81       	ldd	r31, Y+2	; 0x02
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	8c 93       	st	X, r24
}
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	cf 91       	pop	r28
    2972:	df 91       	pop	r29
    2974:	08 95       	ret

00002976 <timer0_DeInit>:


void timer0_DeInit(){
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    297e:	e3 e5       	ldi	r30, 0x53	; 83
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	10 82       	st	Z, r1
	TCNT0=0;
    2984:	e2 e5       	ldi	r30, 0x52	; 82
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0);
    298a:	a9 e5       	ldi	r26, 0x59	; 89
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e9 e5       	ldi	r30, 0x59	; 89
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	8d 7f       	andi	r24, 0xFD	; 253
    2996:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    2998:	a9 e5       	ldi	r26, 0x59	; 89
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e9 e5       	ldi	r30, 0x59	; 89
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	8e 7f       	andi	r24, 0xFE	; 254
    29a4:	8c 93       	st	X, r24
}
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    29b4:	eb e2       	ldi	r30, 0x2B	; 43
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	82 e0       	ldi	r24, 0x02	; 2
    29ba:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    29bc:	ea e2       	ldi	r30, 0x2A	; 42
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	88 e1       	ldi	r24, 0x18	; 24
    29c2:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    29c4:	e0 e4       	ldi	r30, 0x40	; 64
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	86 e8       	ldi	r24, 0x86	; 134
    29ca:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    29cc:	e0 e4       	ldi	r30, 0x40	; 64
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    29d2:	e9 e2       	ldi	r30, 0x29	; 41
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	8c e0       	ldi	r24, 0x0C	; 12
    29d8:	80 83       	st	Z, r24
}
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	0f 92       	push	r0
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    29ec:	eb e2       	ldi	r30, 0x2B	; 43
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	80 72       	andi	r24, 0x20	; 32
    29f8:	90 70       	andi	r25, 0x00	; 0
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	b9 f3       	breq	.-18     	; 0x29ec <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    29fe:	ec e2       	ldi	r30, 0x2C	; 44
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2a06:	0f 90       	pop	r0
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a16:	eb e2       	ldi	r30, 0x2B	; 43
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	88 23       	and	r24, r24
    2a1e:	dc f7       	brge	.-10     	; 0x2a16 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2a20:	ec e2       	ldi	r30, 0x2C	; 44
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
}
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	08 95       	ret

00002a2c <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <UART_sendString+0x6>
    2a32:	0f 92       	push	r0
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    2a38:	9b 83       	std	Y+3, r25	; 0x03
    2a3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a3c:	19 82       	std	Y+1, r1	; 0x01
    2a3e:	0e c0       	rjmp	.+28     	; 0x2a5c <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	e2 0f       	add	r30, r18
    2a4e:	f3 1f       	adc	r31, r19
    2a50:	80 81       	ld	r24, Z
    2a52:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
		i++;
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	8f 5f       	subi	r24, 0xFF	; 255
    2a5a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	28 2f       	mov	r18, r24
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	9b 81       	ldd	r25, Y+3	; 0x03
    2a66:	fc 01       	movw	r30, r24
    2a68:	e2 0f       	add	r30, r18
    2a6a:	f3 1f       	adc	r31, r19
    2a6c:	80 81       	ld	r24, Z
    2a6e:	88 23       	and	r24, r24
    2a70:	39 f7       	brne	.-50     	; 0x2a40 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	00 d0       	rcall	.+0      	; 0x2a88 <UART_receiveString+0xa>
    2a88:	0f 92       	push	r0
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	9b 83       	std	Y+3, r25	; 0x03
    2a90:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a92:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	28 2f       	mov	r18, r24
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9e:	8c 01       	movw	r16, r24
    2aa0:	02 0f       	add	r16, r18
    2aa2:	13 1f       	adc	r17, r19
    2aa4:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <UART_recieveByte>
    2aa8:	f8 01       	movw	r30, r16
    2aaa:	80 83       	st	Z, r24
    2aac:	0f c0       	rjmp	.+30     	; 0x2acc <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	8f 5f       	subi	r24, 0xFF	; 255
    2ab2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	28 2f       	mov	r18, r24
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	9b 81       	ldd	r25, Y+3	; 0x03
    2abe:	8c 01       	movw	r16, r24
    2ac0:	02 0f       	add	r16, r18
    2ac2:	13 1f       	adc	r17, r19
    2ac4:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <UART_recieveByte>
    2ac8:	f8 01       	movw	r30, r16
    2aca:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	28 2f       	mov	r18, r24
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	e2 0f       	add	r30, r18
    2ada:	f3 1f       	adc	r31, r19
    2adc:	80 81       	ld	r24, Z
    2ade:	83 32       	cpi	r24, 0x23	; 35
    2ae0:	31 f7       	brne	.-52     	; 0x2aae <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	9b 81       	ldd	r25, Y+3	; 0x03
    2aec:	fc 01       	movw	r30, r24
    2aee:	e2 0f       	add	r30, r18
    2af0:	f3 1f       	adc	r31, r19
    2af2:	10 82       	st	Z, r1
}
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	08 95       	ret

00002b04 <__prologue_saves__>:
    2b04:	2f 92       	push	r2
    2b06:	3f 92       	push	r3
    2b08:	4f 92       	push	r4
    2b0a:	5f 92       	push	r5
    2b0c:	6f 92       	push	r6
    2b0e:	7f 92       	push	r7
    2b10:	8f 92       	push	r8
    2b12:	9f 92       	push	r9
    2b14:	af 92       	push	r10
    2b16:	bf 92       	push	r11
    2b18:	cf 92       	push	r12
    2b1a:	df 92       	push	r13
    2b1c:	ef 92       	push	r14
    2b1e:	ff 92       	push	r15
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	ca 1b       	sub	r28, r26
    2b2e:	db 0b       	sbc	r29, r27
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
    2b3a:	09 94       	ijmp

00002b3c <__epilogue_restores__>:
    2b3c:	2a 88       	ldd	r2, Y+18	; 0x12
    2b3e:	39 88       	ldd	r3, Y+17	; 0x11
    2b40:	48 88       	ldd	r4, Y+16	; 0x10
    2b42:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b44:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b46:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b48:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b4e:	b9 84       	ldd	r11, Y+9	; 0x09
    2b50:	c8 84       	ldd	r12, Y+8	; 0x08
    2b52:	df 80       	ldd	r13, Y+7	; 0x07
    2b54:	ee 80       	ldd	r14, Y+6	; 0x06
    2b56:	fd 80       	ldd	r15, Y+5	; 0x05
    2b58:	0c 81       	ldd	r16, Y+4	; 0x04
    2b5a:	1b 81       	ldd	r17, Y+3	; 0x03
    2b5c:	aa 81       	ldd	r26, Y+2	; 0x02
    2b5e:	b9 81       	ldd	r27, Y+1	; 0x01
    2b60:	ce 0f       	add	r28, r30
    2b62:	d1 1d       	adc	r29, r1
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	ed 01       	movw	r28, r26
    2b70:	08 95       	ret

00002b72 <itoa>:
    2b72:	fb 01       	movw	r30, r22
    2b74:	9f 01       	movw	r18, r30
    2b76:	e8 94       	clt
    2b78:	42 30       	cpi	r20, 0x02	; 2
    2b7a:	c4 f0       	brlt	.+48     	; 0x2bac <itoa+0x3a>
    2b7c:	45 32       	cpi	r20, 0x25	; 37
    2b7e:	b4 f4       	brge	.+44     	; 0x2bac <itoa+0x3a>
    2b80:	4a 30       	cpi	r20, 0x0A	; 10
    2b82:	29 f4       	brne	.+10     	; 0x2b8e <itoa+0x1c>
    2b84:	97 fb       	bst	r25, 7
    2b86:	1e f4       	brtc	.+6      	; 0x2b8e <itoa+0x1c>
    2b88:	90 95       	com	r25
    2b8a:	81 95       	neg	r24
    2b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8e:	64 2f       	mov	r22, r20
    2b90:	77 27       	eor	r23, r23
    2b92:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <__udivmodhi4>
    2b96:	80 5d       	subi	r24, 0xD0	; 208
    2b98:	8a 33       	cpi	r24, 0x3A	; 58
    2b9a:	0c f0       	brlt	.+2      	; 0x2b9e <itoa+0x2c>
    2b9c:	89 5d       	subi	r24, 0xD9	; 217
    2b9e:	81 93       	st	Z+, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	a1 f7       	brne	.-24     	; 0x2b8e <itoa+0x1c>
    2ba6:	16 f4       	brtc	.+4      	; 0x2bac <itoa+0x3a>
    2ba8:	5d e2       	ldi	r21, 0x2D	; 45
    2baa:	51 93       	st	Z+, r21
    2bac:	10 82       	st	Z, r1
    2bae:	c9 01       	movw	r24, r18
    2bb0:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <strrev>

00002bb4 <strrev>:
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	67 2f       	mov	r22, r23
    2bba:	71 91       	ld	r23, Z+
    2bbc:	77 23       	and	r23, r23
    2bbe:	e1 f7       	brne	.-8      	; 0x2bb8 <strrev+0x4>
    2bc0:	32 97       	sbiw	r30, 0x02	; 2
    2bc2:	04 c0       	rjmp	.+8      	; 0x2bcc <strrev+0x18>
    2bc4:	7c 91       	ld	r23, X
    2bc6:	6d 93       	st	X+, r22
    2bc8:	70 83       	st	Z, r23
    2bca:	62 91       	ld	r22, -Z
    2bcc:	ae 17       	cp	r26, r30
    2bce:	bf 07       	cpc	r27, r31
    2bd0:	c8 f3       	brcs	.-14     	; 0x2bc4 <strrev+0x10>
    2bd2:	08 95       	ret

00002bd4 <__udivmodhi4>:
    2bd4:	aa 1b       	sub	r26, r26
    2bd6:	bb 1b       	sub	r27, r27
    2bd8:	51 e1       	ldi	r21, 0x11	; 17
    2bda:	07 c0       	rjmp	.+14     	; 0x2bea <__udivmodhi4_ep>

00002bdc <__udivmodhi4_loop>:
    2bdc:	aa 1f       	adc	r26, r26
    2bde:	bb 1f       	adc	r27, r27
    2be0:	a6 17       	cp	r26, r22
    2be2:	b7 07       	cpc	r27, r23
    2be4:	10 f0       	brcs	.+4      	; 0x2bea <__udivmodhi4_ep>
    2be6:	a6 1b       	sub	r26, r22
    2be8:	b7 0b       	sbc	r27, r23

00002bea <__udivmodhi4_ep>:
    2bea:	88 1f       	adc	r24, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	5a 95       	dec	r21
    2bf0:	a9 f7       	brne	.-22     	; 0x2bdc <__udivmodhi4_loop>
    2bf2:	80 95       	com	r24
    2bf4:	90 95       	com	r25
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	08 95       	ret

00002bfc <_exit>:
    2bfc:	f8 94       	cli

00002bfe <__stop_program>:
    2bfe:	ff cf       	rjmp	.-2      	; 0x2bfe <__stop_program>
