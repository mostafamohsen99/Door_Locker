
finalproject_mc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00002f18  00002fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000fe  008000fe  0000304a  2**0
                  ALLOC
  3 .stab         00002934  00000000  00000000  0000304c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e3f  00000000  00000000  00005980  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000067bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000068ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000086b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000095a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a350  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a73d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 0a 	call	0x153c	; 0x153c <main>
      8a:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ef       	ldi	r26, 0xF0	; 240
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 ef       	ldi	r24, 0xF0	; 240
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ISR_COUNT>:
uint8 seconds=0;
uint8 seconds_needed=0;
uint8 m=0;

void ISR_COUNT(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	tick++;
     b4e:	80 91 fe 00 	lds	r24, 0x00FE
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 fe 00 	sts	0x00FE, r24
	if(tick==NO_OVERFLOWS_SECOND)
     b58:	80 91 fe 00 	lds	r24, 0x00FE
     b5c:	80 31       	cpi	r24, 0x10	; 16
     b5e:	a1 f4       	brne	.+40     	; 0xb88 <ISR_COUNT+0x42>
	{
		seconds++;
     b60:	80 91 ff 00 	lds	r24, 0x00FF
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	80 93 ff 00 	sts	0x00FF, r24
		tick=0;
     b6a:	10 92 fe 00 	sts	0x00FE, r1
		if(seconds==seconds_needed)
     b6e:	90 91 ff 00 	lds	r25, 0x00FF
     b72:	80 91 00 01 	lds	r24, 0x0100
     b76:	98 17       	cp	r25, r24
     b78:	39 f4       	brne	.+14     	; 0xb88 <ISR_COUNT+0x42>
		{
			seconds=0;
     b7a:	10 92 ff 00 	sts	0x00FF, r1
			timer0_DeInit();
     b7e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <timer0_DeInit>
				m=1;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 93 01 01 	sts	0x0101, r24
		}
	}
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <empty_password>:
void empty_password(char *str)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	00 d0       	rcall	.+0      	; 0xb94 <empty_password+0x6>
     b94:	0f 92       	push	r0
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	9b 83       	std	Y+3, r25	; 0x03
     b9c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 j=0;
     b9e:	19 82       	std	Y+1, r1	; 0x01
     ba0:	0c c0       	rjmp	.+24     	; 0xbba <empty_password+0x2c>
	while(str[j]!='\0')
		{
		str[j]='\0';
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	9b 81       	ldd	r25, Y+3	; 0x03
     bac:	fc 01       	movw	r30, r24
     bae:	e2 0f       	add	r30, r18
     bb0:	f3 1f       	adc	r31, r19
     bb2:	10 82       	st	Z, r1
		j++;
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	8f 5f       	subi	r24, 0xFF	; 255
     bb8:	89 83       	std	Y+1, r24	; 0x01
	}
}
void empty_password(char *str)
{
	uint8 j=0;
	while(str[j]!='\0')
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	9b 81       	ldd	r25, Y+3	; 0x03
     bc4:	fc 01       	movw	r30, r24
     bc6:	e2 0f       	add	r30, r18
     bc8:	f3 1f       	adc	r31, r19
     bca:	80 81       	ld	r24, Z
     bcc:	88 23       	and	r24, r24
     bce:	49 f7       	brne	.-46     	; 0xba2 <empty_password+0x14>
		{
		str[j]='\0';
		j++;
		}
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <password_Init>:
void password_Init()
{
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
	repassword[0]='6';
     be4:	86 e3       	ldi	r24, 0x36	; 54
     be6:	80 93 0e 01 	sts	0x010E, r24
	repassword[1]='8';
     bea:	88 e3       	ldi	r24, 0x38	; 56
     bec:	80 93 0f 01 	sts	0x010F, r24
	password[0]='4';
     bf0:	84 e3       	ldi	r24, 0x34	; 52
     bf2:	80 93 04 01 	sts	0x0104, r24
	password[1]='8';
     bf6:	88 e3       	ldi	r24, 0x38	; 56
     bf8:	80 93 05 01 	sts	0x0105, r24
}
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <Entering_password>:
void Entering_password(uint8 a)
{
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	62 97       	sbiw	r28, 0x12	; 18
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	8a 8b       	std	Y+18, r24	; 0x12
	password_Init();
     c18:	0e 94 ee 05 	call	0xbdc	; 0xbdc <password_Init>
	char buff;
    uint8 i=2;
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 key;
	LCD_clearScreen();
     c20:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LCD_clearScreen>
	if(a==0)
     c24:	8a 89       	ldd	r24, Y+18	; 0x12
     c26:	88 23       	and	r24, r24
     c28:	41 f4       	brne	.+16     	; 0xc3a <Entering_password+0x38>
	   LCD_displayStringRowColumn(0,0,"Enter password:");
     c2a:	20 e6       	ldi	r18, 0x60	; 96
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	a9 01       	movw	r20, r18
     c34:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_displayStringRowColumn>
     c38:	0a c0       	rjmp	.+20     	; 0xc4e <Entering_password+0x4c>
	else if(a==1)
     c3a:	8a 89       	ldd	r24, Y+18	; 0x12
     c3c:	81 30       	cpi	r24, 0x01	; 1
     c3e:	39 f4       	brne	.+14     	; 0xc4e <Entering_password+0x4c>
		LCD_displayStringRowColumn(0,0,"Re-enter pass:");
     c40:	20 e7       	ldi	r18, 0x70	; 112
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	a9 01       	movw	r20, r18
     c4a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_displayStringRowColumn>
			LCD_goToRowColumn(1,0);
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	0e 94 ca 14 	call	0x2994	; 0x2994 <LCD_goToRowColumn>
     c56:	ad c0       	rjmp	.+346    	; 0xdb2 <Entering_password+0x1b0>
			while(i<10)
			{
				key=KeyPad_getPressedKey();
     c58:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <KeyPad_getPressedKey>
     c5c:	8f 87       	std	Y+15, r24	; 0x0f
				if(key== '=')
     c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c60:	8d 33       	cpi	r24, 0x3D	; 61
     c62:	a9 f4       	brne	.+42     	; 0xc8e <Entering_password+0x8c>
				{
					if(a==0)
     c64:	8a 89       	ldd	r24, Y+18	; 0x12
     c66:	88 23       	and	r24, r24
     c68:	49 f4       	brne	.+18     	; 0xc7c <Entering_password+0x7a>
					password[i]='#';
     c6a:	88 89       	ldd	r24, Y+16	; 0x10
     c6c:	88 2f       	mov	r24, r24
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	fc 01       	movw	r30, r24
     c72:	ec 5f       	subi	r30, 0xFC	; 252
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	83 e2       	ldi	r24, 0x23	; 35
     c78:	80 83       	st	Z, r24
     c7a:	9f c0       	rjmp	.+318    	; 0xdba <Entering_password+0x1b8>
					else
					repassword[i]='#';
     c7c:	88 89       	ldd	r24, Y+16	; 0x10
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	fc 01       	movw	r30, r24
     c84:	e2 5f       	subi	r30, 0xF2	; 242
     c86:	fe 4f       	sbci	r31, 0xFE	; 254
     c88:	83 e2       	ldi	r24, 0x23	; 35
     c8a:	80 83       	st	Z, r24
     c8c:	96 c0       	rjmp	.+300    	; 0xdba <Entering_password+0x1b8>
					break;
				}
				if((key <= 9) && (key >= 0))
     c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c90:	8a 30       	cpi	r24, 0x0A	; 10
     c92:	d0 f4       	brcc	.+52     	; 0xcc8 <Entering_password+0xc6>
				{
					LCD_displayCharacter('*');
     c94:	8a e2       	ldi	r24, 0x2A	; 42
     c96:	0e 94 8a 10 	call	0x2114	; 0x2114 <LCD_displayCharacter>
					   buff=key+'0';
     c9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c9c:	80 5d       	subi	r24, 0xD0	; 208
     c9e:	89 8b       	std	Y+17, r24	; 0x11
					   if(a==0)
     ca0:	8a 89       	ldd	r24, Y+18	; 0x12
     ca2:	88 23       	and	r24, r24
     ca4:	49 f4       	brne	.+18     	; 0xcb8 <Entering_password+0xb6>
					   password[i]=buff;
     ca6:	88 89       	ldd	r24, Y+16	; 0x10
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	fc 01       	movw	r30, r24
     cae:	ec 5f       	subi	r30, 0xFC	; 252
     cb0:	fe 4f       	sbci	r31, 0xFE	; 254
     cb2:	89 89       	ldd	r24, Y+17	; 0x11
     cb4:	80 83       	st	Z, r24
     cb6:	08 c0       	rjmp	.+16     	; 0xcc8 <Entering_password+0xc6>
					   else
					   repassword[i]=buff;
     cb8:	88 89       	ldd	r24, Y+16	; 0x10
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	fc 01       	movw	r30, r24
     cc0:	e2 5f       	subi	r30, 0xF2	; 242
     cc2:	fe 4f       	sbci	r31, 0xFE	; 254
     cc4:	89 89       	ldd	r24, Y+17	; 0x11
     cc6:	80 83       	st	Z, r24
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	aa ef       	ldi	r26, 0xFA	; 250
     cce:	b3 e4       	ldi	r27, 0x43	; 67
     cd0:	8b 87       	std	Y+11, r24	; 0x0b
     cd2:	9c 87       	std	Y+12, r25	; 0x0c
     cd4:	ad 87       	std	Y+13, r26	; 0x0d
     cd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cda:	7c 85       	ldd	r23, Y+12	; 0x0c
     cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cde:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	4a e7       	ldi	r20, 0x7A	; 122
     ce6:	53 e4       	ldi	r21, 0x43	; 67
     ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	8f 83       	std	Y+7, r24	; 0x07
     cf2:	98 87       	std	Y+8, r25	; 0x08
     cf4:	a9 87       	std	Y+9, r26	; 0x09
     cf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cf8:	6f 81       	ldd	r22, Y+7	; 0x07
     cfa:	78 85       	ldd	r23, Y+8	; 0x08
     cfc:	89 85       	ldd	r24, Y+9	; 0x09
     cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 e8       	ldi	r20, 0x80	; 128
     d06:	5f e3       	ldi	r21, 0x3F	; 63
     d08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d0c:	88 23       	and	r24, r24
     d0e:	2c f4       	brge	.+10     	; 0xd1a <Entering_password+0x118>
		__ticks = 1;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9e 83       	std	Y+6, r25	; 0x06
     d16:	8d 83       	std	Y+5, r24	; 0x05
     d18:	3f c0       	rjmp	.+126    	; 0xd98 <Entering_password+0x196>
	else if (__tmp > 65535)
     d1a:	6f 81       	ldd	r22, Y+7	; 0x07
     d1c:	78 85       	ldd	r23, Y+8	; 0x08
     d1e:	89 85       	ldd	r24, Y+9	; 0x09
     d20:	9a 85       	ldd	r25, Y+10	; 0x0a
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	3f ef       	ldi	r19, 0xFF	; 255
     d26:	4f e7       	ldi	r20, 0x7F	; 127
     d28:	57 e4       	ldi	r21, 0x47	; 71
     d2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d2e:	18 16       	cp	r1, r24
     d30:	4c f5       	brge	.+82     	; 0xd84 <Entering_password+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d32:	6b 85       	ldd	r22, Y+11	; 0x0b
     d34:	7c 85       	ldd	r23, Y+12	; 0x0c
     d36:	8d 85       	ldd	r24, Y+13	; 0x0d
     d38:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e2       	ldi	r20, 0x20	; 32
     d40:	51 e4       	ldi	r21, 0x41	; 65
     d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	bc 01       	movw	r22, r24
     d4c:	cd 01       	movw	r24, r26
     d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	9e 83       	std	Y+6, r25	; 0x06
     d58:	8d 83       	std	Y+5, r24	; 0x05
     d5a:	0f c0       	rjmp	.+30     	; 0xd7a <Entering_password+0x178>
     d5c:	89 e1       	ldi	r24, 0x19	; 25
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	9c 83       	std	Y+4, r25	; 0x04
     d62:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <Entering_password+0x166>
     d6c:	9c 83       	std	Y+4, r25	; 0x04
     d6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	9e 83       	std	Y+6, r25	; 0x06
     d78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	9e 81       	ldd	r25, Y+6	; 0x06
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	69 f7       	brne	.-38     	; 0xd5c <Entering_password+0x15a>
     d82:	14 c0       	rjmp	.+40     	; 0xdac <Entering_password+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d84:	6f 81       	ldd	r22, Y+7	; 0x07
     d86:	78 85       	ldd	r23, Y+8	; 0x08
     d88:	89 85       	ldd	r24, Y+9	; 0x09
     d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	9e 83       	std	Y+6, r25	; 0x06
     d96:	8d 83       	std	Y+5, r24	; 0x05
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	9e 81       	ldd	r25, Y+6	; 0x06
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <Entering_password+0x1a2>
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	89 83       	std	Y+1, r24	; 0x01
				}
				_delay_ms(500);
				i++;
     dac:	88 89       	ldd	r24, Y+16	; 0x10
     dae:	8f 5f       	subi	r24, 0xFF	; 255
     db0:	88 8b       	std	Y+16, r24	; 0x10
	if(a==0)
	   LCD_displayStringRowColumn(0,0,"Enter password:");
	else if(a==1)
		LCD_displayStringRowColumn(0,0,"Re-enter pass:");
			LCD_goToRowColumn(1,0);
			while(i<10)
     db2:	88 89       	ldd	r24, Y+16	; 0x10
     db4:	8a 30       	cpi	r24, 0x0A	; 10
     db6:	08 f4       	brcc	.+2      	; 0xdba <Entering_password+0x1b8>
     db8:	4f cf       	rjmp	.-354    	; 0xc58 <Entering_password+0x56>
					   repassword[i]=buff;
				}
				_delay_ms(500);
				i++;
			}
}
     dba:	62 96       	adiw	r28, 0x12	; 18
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <Checkingpassword>:
void Checkingpassword(uint8 type)
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	c0 54       	subi	r28, 0x40	; 64
     dd6:	d0 40       	sbci	r29, 0x00	; 0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	8c af       	std	Y+60, r24	; 0x3c
	    uint8 detector=0;//used to detect if i send or recieve pass word
     de4:	1b ae       	std	Y+59, r1	; 0x3b
		uint8 outing=0;
     de6:	1a ae       	std	Y+58, r1	; 0x3a
		uint8 recievematching;
		while(1)
		{
		empty_password(password);
     de8:	84 e0       	ldi	r24, 0x04	; 4
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 c7 05 	call	0xb8e	; 0xb8e <empty_password>
		empty_password(repassword);
     df0:	8e e0       	ldi	r24, 0x0E	; 14
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <empty_password>
		Entering_password(detector);
     df8:	8b ad       	ldd	r24, Y+59	; 0x3b
     dfa:	0e 94 01 06 	call	0xc02	; 0xc02 <Entering_password>
		LCD_clearScreen();
     dfe:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LCD_clearScreen>
		// initialize UART // wait until MC2 is ready
		UART_sendString(password);
     e02:	84 e0       	ldi	r24, 0x04	; 4
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <UART_sendString>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	aa ef       	ldi	r26, 0xFA	; 250
     e10:	b3 e4       	ldi	r27, 0x43	; 67
     e12:	8d ab       	std	Y+53, r24	; 0x35
     e14:	9e ab       	std	Y+54, r25	; 0x36
     e16:	af ab       	std	Y+55, r26	; 0x37
     e18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e1a:	6d a9       	ldd	r22, Y+53	; 0x35
     e1c:	7e a9       	ldd	r23, Y+54	; 0x36
     e1e:	8f a9       	ldd	r24, Y+55	; 0x37
     e20:	98 ad       	ldd	r25, Y+56	; 0x38
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	4a e7       	ldi	r20, 0x7A	; 122
     e28:	53 e4       	ldi	r21, 0x43	; 67
     e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	89 ab       	std	Y+49, r24	; 0x31
     e34:	9a ab       	std	Y+50, r25	; 0x32
     e36:	ab ab       	std	Y+51, r26	; 0x33
     e38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e3a:	69 a9       	ldd	r22, Y+49	; 0x31
     e3c:	7a a9       	ldd	r23, Y+50	; 0x32
     e3e:	8b a9       	ldd	r24, Y+51	; 0x33
     e40:	9c a9       	ldd	r25, Y+52	; 0x34
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e8       	ldi	r20, 0x80	; 128
     e48:	5f e3       	ldi	r21, 0x3F	; 63
     e4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e4e:	88 23       	and	r24, r24
     e50:	2c f4       	brge	.+10     	; 0xe5c <Checkingpassword+0x90>
		__ticks = 1;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	98 ab       	std	Y+48, r25	; 0x30
     e58:	8f a7       	std	Y+47, r24	; 0x2f
     e5a:	3f c0       	rjmp	.+126    	; 0xeda <Checkingpassword+0x10e>
	else if (__tmp > 65535)
     e5c:	69 a9       	ldd	r22, Y+49	; 0x31
     e5e:	7a a9       	ldd	r23, Y+50	; 0x32
     e60:	8b a9       	ldd	r24, Y+51	; 0x33
     e62:	9c a9       	ldd	r25, Y+52	; 0x34
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	3f ef       	ldi	r19, 0xFF	; 255
     e68:	4f e7       	ldi	r20, 0x7F	; 127
     e6a:	57 e4       	ldi	r21, 0x47	; 71
     e6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e70:	18 16       	cp	r1, r24
     e72:	4c f5       	brge	.+82     	; 0xec6 <Checkingpassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e74:	6d a9       	ldd	r22, Y+53	; 0x35
     e76:	7e a9       	ldd	r23, Y+54	; 0x36
     e78:	8f a9       	ldd	r24, Y+55	; 0x37
     e7a:	98 ad       	ldd	r25, Y+56	; 0x38
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e2       	ldi	r20, 0x20	; 32
     e82:	51 e4       	ldi	r21, 0x41	; 65
     e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	bc 01       	movw	r22, r24
     e8e:	cd 01       	movw	r24, r26
     e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	98 ab       	std	Y+48, r25	; 0x30
     e9a:	8f a7       	std	Y+47, r24	; 0x2f
     e9c:	0f c0       	rjmp	.+30     	; 0xebc <Checkingpassword+0xf0>
     e9e:	89 e1       	ldi	r24, 0x19	; 25
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	9e a7       	std	Y+46, r25	; 0x2e
     ea4:	8d a7       	std	Y+45, r24	; 0x2d
     ea6:	8d a5       	ldd	r24, Y+45	; 0x2d
     ea8:	9e a5       	ldd	r25, Y+46	; 0x2e
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <Checkingpassword+0xde>
     eae:	9e a7       	std	Y+46, r25	; 0x2e
     eb0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb2:	8f a5       	ldd	r24, Y+47	; 0x2f
     eb4:	98 a9       	ldd	r25, Y+48	; 0x30
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	98 ab       	std	Y+48, r25	; 0x30
     eba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ebc:	8f a5       	ldd	r24, Y+47	; 0x2f
     ebe:	98 a9       	ldd	r25, Y+48	; 0x30
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	69 f7       	brne	.-38     	; 0xe9e <Checkingpassword+0xd2>
     ec4:	14 c0       	rjmp	.+40     	; 0xeee <Checkingpassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec6:	69 a9       	ldd	r22, Y+49	; 0x31
     ec8:	7a a9       	ldd	r23, Y+50	; 0x32
     eca:	8b a9       	ldd	r24, Y+51	; 0x33
     ecc:	9c a9       	ldd	r25, Y+52	; 0x34
     ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	98 ab       	std	Y+48, r25	; 0x30
     ed8:	8f a7       	std	Y+47, r24	; 0x2f
     eda:	8f a5       	ldd	r24, Y+47	; 0x2f
     edc:	98 a9       	ldd	r25, Y+48	; 0x30
     ede:	9c a7       	std	Y+44, r25	; 0x2c
     ee0:	8b a7       	std	Y+43, r24	; 0x2b
     ee2:	8b a5       	ldd	r24, Y+43	; 0x2b
     ee4:	9c a5       	ldd	r25, Y+44	; 0x2c
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <Checkingpassword+0x11a>
     eea:	9c a7       	std	Y+44, r25	; 0x2c
     eec:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		//while(UART_recieveByte()!=OKPASS){}
		recievematching=UART_recieveByte();
     eee:	0e 94 93 16 	call	0x2d26	; 0x2d26 <UART_recieveByte>
     ef2:	89 af       	std	Y+57, r24	; 0x39
		if(recievematching==OKPASS)
     ef4:	89 ad       	ldd	r24, Y+57	; 0x39
     ef6:	82 31       	cpi	r24, 0x12	; 18
     ef8:	59 f4       	brne	.+22     	; 0xf10 <Checkingpassword+0x144>
		{
		detector=1;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	8b af       	std	Y+59, r24	; 0x3b
		LCD_clearScreen();
     efe:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LCD_clearScreen>
		LCD_goToRowColumn(1,0);
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	0e 94 ca 14 	call	0x2994	; 0x2994 <LCD_goToRowColumn>
		Entering_password(detector);
     f0a:	8b ad       	ldd	r24, Y+59	; 0x3b
     f0c:	0e 94 01 06 	call	0xc02	; 0xc02 <Entering_password>
		}
		LCD_clearScreen();
     f10:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LCD_clearScreen>
		UART_sendString(repassword);
     f14:	8e e0       	ldi	r24, 0x0E	; 14
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <UART_sendString>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	aa ef       	ldi	r26, 0xFA	; 250
     f22:	b3 e4       	ldi	r27, 0x43	; 67
     f24:	8f a3       	std	Y+39, r24	; 0x27
     f26:	98 a7       	std	Y+40, r25	; 0x28
     f28:	a9 a7       	std	Y+41, r26	; 0x29
     f2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2c:	6f a1       	ldd	r22, Y+39	; 0x27
     f2e:	78 a5       	ldd	r23, Y+40	; 0x28
     f30:	89 a5       	ldd	r24, Y+41	; 0x29
     f32:	9a a5       	ldd	r25, Y+42	; 0x2a
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	4a e7       	ldi	r20, 0x7A	; 122
     f3a:	53 e4       	ldi	r21, 0x43	; 67
     f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	8b a3       	std	Y+35, r24	; 0x23
     f46:	9c a3       	std	Y+36, r25	; 0x24
     f48:	ad a3       	std	Y+37, r26	; 0x25
     f4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f4c:	6b a1       	ldd	r22, Y+35	; 0x23
     f4e:	7c a1       	ldd	r23, Y+36	; 0x24
     f50:	8d a1       	ldd	r24, Y+37	; 0x25
     f52:	9e a1       	ldd	r25, Y+38	; 0x26
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f60:	88 23       	and	r24, r24
     f62:	2c f4       	brge	.+10     	; 0xf6e <Checkingpassword+0x1a2>
		__ticks = 1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9a a3       	std	Y+34, r25	; 0x22
     f6a:	89 a3       	std	Y+33, r24	; 0x21
     f6c:	3f c0       	rjmp	.+126    	; 0xfec <Checkingpassword+0x220>
	else if (__tmp > 65535)
     f6e:	6b a1       	ldd	r22, Y+35	; 0x23
     f70:	7c a1       	ldd	r23, Y+36	; 0x24
     f72:	8d a1       	ldd	r24, Y+37	; 0x25
     f74:	9e a1       	ldd	r25, Y+38	; 0x26
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	3f ef       	ldi	r19, 0xFF	; 255
     f7a:	4f e7       	ldi	r20, 0x7F	; 127
     f7c:	57 e4       	ldi	r21, 0x47	; 71
     f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f82:	18 16       	cp	r1, r24
     f84:	4c f5       	brge	.+82     	; 0xfd8 <Checkingpassword+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f86:	6f a1       	ldd	r22, Y+39	; 0x27
     f88:	78 a5       	ldd	r23, Y+40	; 0x28
     f8a:	89 a5       	ldd	r24, Y+41	; 0x29
     f8c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e2       	ldi	r20, 0x20	; 32
     f94:	51 e4       	ldi	r21, 0x41	; 65
     f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	bc 01       	movw	r22, r24
     fa0:	cd 01       	movw	r24, r26
     fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	9a a3       	std	Y+34, r25	; 0x22
     fac:	89 a3       	std	Y+33, r24	; 0x21
     fae:	0f c0       	rjmp	.+30     	; 0xfce <Checkingpassword+0x202>
     fb0:	89 e1       	ldi	r24, 0x19	; 25
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	98 a3       	std	Y+32, r25	; 0x20
     fb6:	8f 8f       	std	Y+31, r24	; 0x1f
     fb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fba:	98 a1       	ldd	r25, Y+32	; 0x20
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <Checkingpassword+0x1f0>
     fc0:	98 a3       	std	Y+32, r25	; 0x20
     fc2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc4:	89 a1       	ldd	r24, Y+33	; 0x21
     fc6:	9a a1       	ldd	r25, Y+34	; 0x22
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	9a a3       	std	Y+34, r25	; 0x22
     fcc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fce:	89 a1       	ldd	r24, Y+33	; 0x21
     fd0:	9a a1       	ldd	r25, Y+34	; 0x22
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	69 f7       	brne	.-38     	; 0xfb0 <Checkingpassword+0x1e4>
     fd6:	14 c0       	rjmp	.+40     	; 0x1000 <Checkingpassword+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd8:	6b a1       	ldd	r22, Y+35	; 0x23
     fda:	7c a1       	ldd	r23, Y+36	; 0x24
     fdc:	8d a1       	ldd	r24, Y+37	; 0x25
     fde:	9e a1       	ldd	r25, Y+38	; 0x26
     fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	9a a3       	std	Y+34, r25	; 0x22
     fea:	89 a3       	std	Y+33, r24	; 0x21
     fec:	89 a1       	ldd	r24, Y+33	; 0x21
     fee:	9a a1       	ldd	r25, Y+34	; 0x22
     ff0:	9e 8f       	std	Y+30, r25	; 0x1e
     ff2:	8d 8f       	std	Y+29, r24	; 0x1d
     ff4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ff6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <Checkingpassword+0x22c>
     ffc:	9e 8f       	std	Y+30, r25	; 0x1e
     ffe:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		//while(UART_recieveByte()!=OKREPASS){}
		recievematching=UART_recieveByte();
    1000:	0e 94 93 16 	call	0x2d26	; 0x2d26 <UART_recieveByte>
    1004:	89 af       	std	Y+57, r24	; 0x39
		if(recievematching==OKREPASS)
    1006:	89 ad       	ldd	r24, Y+57	; 0x39
    1008:	83 31       	cpi	r24, 0x13	; 19
    100a:	09 f0       	breq	.+2      	; 0x100e <Checkingpassword+0x242>
    100c:	3a c1       	rjmp	.+628    	; 0x1282 <Checkingpassword+0x4b6>
		{
		LCD_clearScreen();
    100e:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LCD_clearScreen>
	   recievematching=UART_recieveByte();
    1012:	0e 94 93 16 	call	0x2d26	; 0x2d26 <UART_recieveByte>
    1016:	89 af       	std	Y+57, r24	; 0x39
	   if(recievematching==MATCHED)
    1018:	89 ad       	ldd	r24, Y+57	; 0x39
    101a:	84 31       	cpi	r24, 0x14	; 20
    101c:	09 f0       	breq	.+2      	; 0x1020 <Checkingpassword+0x254>
    101e:	9b c0       	rjmp	.+310    	; 0x1156 <Checkingpassword+0x38a>
	   {
		   switch (type)
    1020:	8c ad       	ldd	r24, Y+60	; 0x3c
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	21 96       	adiw	r28, 0x01	; 1
    1028:	3f af       	std	Y+63, r19	; 0x3f
    102a:	2e af       	std	Y+62, r18	; 0x3e
    102c:	21 97       	sbiw	r28, 0x01	; 1
    102e:	21 96       	adiw	r28, 0x01	; 1
    1030:	8e ad       	ldd	r24, Y+62	; 0x3e
    1032:	9f ad       	ldd	r25, Y+63	; 0x3f
    1034:	21 97       	sbiw	r28, 0x01	; 1
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	41 f0       	breq	.+16     	; 0x104a <Checkingpassword+0x27e>
    103a:	21 96       	adiw	r28, 0x01	; 1
    103c:	2e ad       	ldd	r18, Y+62	; 0x3e
    103e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1040:	21 97       	sbiw	r28, 0x01	; 1
    1042:	21 30       	cpi	r18, 0x01	; 1
    1044:	31 05       	cpc	r19, r1
    1046:	59 f0       	breq	.+22     	; 0x105e <Checkingpassword+0x292>
    1048:	11 c0       	rjmp	.+34     	; 0x106c <Checkingpassword+0x2a0>
		   {
		   case 0:
		   LCD_displayStringRowColumn(0,0,"MATCHED");
    104a:	2f e7       	ldi	r18, 0x7F	; 127
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	a9 01       	movw	r20, r18
    1054:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_displayStringRowColumn>
		   		outing=1;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	8a af       	std	Y+58, r24	; 0x3a
    105c:	07 c0       	rjmp	.+14     	; 0x106c <Checkingpassword+0x2a0>
		   		break;
		   case 1:
			   LCD_displayStringRowColumn(0,0,"Pass Changed");
    105e:	27 e8       	ldi	r18, 0x87	; 135
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	a9 01       	movw	r20, r18
    1068:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_displayStringRowColumn>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e8       	ldi	r25, 0x80	; 128
    1070:	ab eb       	ldi	r26, 0xBB	; 187
    1072:	b4 e4       	ldi	r27, 0x44	; 68
    1074:	89 8f       	std	Y+25, r24	; 0x19
    1076:	9a 8f       	std	Y+26, r25	; 0x1a
    1078:	ab 8f       	std	Y+27, r26	; 0x1b
    107a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    107c:	69 8d       	ldd	r22, Y+25	; 0x19
    107e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	4a e7       	ldi	r20, 0x7A	; 122
    108a:	53 e4       	ldi	r21, 0x43	; 67
    108c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	8d 8b       	std	Y+21, r24	; 0x15
    1096:	9e 8b       	std	Y+22, r25	; 0x16
    1098:	af 8b       	std	Y+23, r26	; 0x17
    109a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    109c:	6d 89       	ldd	r22, Y+21	; 0x15
    109e:	7e 89       	ldd	r23, Y+22	; 0x16
    10a0:	8f 89       	ldd	r24, Y+23	; 0x17
    10a2:	98 8d       	ldd	r25, Y+24	; 0x18
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e8       	ldi	r20, 0x80	; 128
    10aa:	5f e3       	ldi	r21, 0x3F	; 63
    10ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10b0:	88 23       	and	r24, r24
    10b2:	2c f4       	brge	.+10     	; 0x10be <Checkingpassword+0x2f2>
		__ticks = 1;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9c 8b       	std	Y+20, r25	; 0x14
    10ba:	8b 8b       	std	Y+19, r24	; 0x13
    10bc:	3f c0       	rjmp	.+126    	; 0x113c <Checkingpassword+0x370>
	else if (__tmp > 65535)
    10be:	6d 89       	ldd	r22, Y+21	; 0x15
    10c0:	7e 89       	ldd	r23, Y+22	; 0x16
    10c2:	8f 89       	ldd	r24, Y+23	; 0x17
    10c4:	98 8d       	ldd	r25, Y+24	; 0x18
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	3f ef       	ldi	r19, 0xFF	; 255
    10ca:	4f e7       	ldi	r20, 0x7F	; 127
    10cc:	57 e4       	ldi	r21, 0x47	; 71
    10ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10d2:	18 16       	cp	r1, r24
    10d4:	4c f5       	brge	.+82     	; 0x1128 <Checkingpassword+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d6:	69 8d       	ldd	r22, Y+25	; 0x19
    10d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e2       	ldi	r20, 0x20	; 32
    10e4:	51 e4       	ldi	r21, 0x41	; 65
    10e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	bc 01       	movw	r22, r24
    10f0:	cd 01       	movw	r24, r26
    10f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9c 8b       	std	Y+20, r25	; 0x14
    10fc:	8b 8b       	std	Y+19, r24	; 0x13
    10fe:	0f c0       	rjmp	.+30     	; 0x111e <Checkingpassword+0x352>
    1100:	89 e1       	ldi	r24, 0x19	; 25
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	9a 8b       	std	Y+18, r25	; 0x12
    1106:	89 8b       	std	Y+17, r24	; 0x11
    1108:	89 89       	ldd	r24, Y+17	; 0x11
    110a:	9a 89       	ldd	r25, Y+18	; 0x12
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <Checkingpassword+0x340>
    1110:	9a 8b       	std	Y+18, r25	; 0x12
    1112:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1114:	8b 89       	ldd	r24, Y+19	; 0x13
    1116:	9c 89       	ldd	r25, Y+20	; 0x14
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	9c 8b       	std	Y+20, r25	; 0x14
    111c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111e:	8b 89       	ldd	r24, Y+19	; 0x13
    1120:	9c 89       	ldd	r25, Y+20	; 0x14
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	69 f7       	brne	.-38     	; 0x1100 <Checkingpassword+0x334>
    1126:	14 c0       	rjmp	.+40     	; 0x1150 <Checkingpassword+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1128:	6d 89       	ldd	r22, Y+21	; 0x15
    112a:	7e 89       	ldd	r23, Y+22	; 0x16
    112c:	8f 89       	ldd	r24, Y+23	; 0x17
    112e:	98 8d       	ldd	r25, Y+24	; 0x18
    1130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	9c 8b       	std	Y+20, r25	; 0x14
    113a:	8b 8b       	std	Y+19, r24	; 0x13
    113c:	8b 89       	ldd	r24, Y+19	; 0x13
    113e:	9c 89       	ldd	r25, Y+20	; 0x14
    1140:	98 8b       	std	Y+16, r25	; 0x10
    1142:	8f 87       	std	Y+15, r24	; 0x0f
    1144:	8f 85       	ldd	r24, Y+15	; 0x0f
    1146:	98 89       	ldd	r25, Y+16	; 0x10
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	f1 f7       	brne	.-4      	; 0x1148 <Checkingpassword+0x37c>
    114c:	98 8b       	std	Y+16, r25	; 0x10
    114e:	8f 87       	std	Y+15, r24	; 0x0f
			   break;
		   }
		   _delay_ms(1500);
		   	LCD_clearScreen();
    1150:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LCD_clearScreen>
    1154:	96 c0       	rjmp	.+300    	; 0x1282 <Checkingpassword+0x4b6>
	   }
		else if(recievematching==UNMATCHED)
    1156:	89 ad       	ldd	r24, Y+57	; 0x39
    1158:	85 31       	cpi	r24, 0x15	; 21
    115a:	09 f0       	breq	.+2      	; 0x115e <Checkingpassword+0x392>
    115c:	92 c0       	rjmp	.+292    	; 0x1282 <Checkingpassword+0x4b6>
		   {
			   switch(type)
    115e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	3e af       	std	Y+62, r19	; 0x3e
    1166:	2d af       	std	Y+61, r18	; 0x3d
    1168:	8d ad       	ldd	r24, Y+61	; 0x3d
    116a:	9e ad       	ldd	r25, Y+62	; 0x3e
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	31 f0       	breq	.+12     	; 0x117c <Checkingpassword+0x3b0>
    1170:	2d ad       	ldd	r18, Y+61	; 0x3d
    1172:	3e ad       	ldd	r19, Y+62	; 0x3e
    1174:	21 30       	cpi	r18, 0x01	; 1
    1176:	31 05       	cpc	r19, r1
    1178:	49 f0       	breq	.+18     	; 0x118c <Checkingpassword+0x3c0>
    117a:	0f c0       	rjmp	.+30     	; 0x119a <Checkingpassword+0x3ce>
			   {
			   case 0:
			      LCD_displayStringRowColumn(0,0,"UNMATCHED");
    117c:	24 e9       	ldi	r18, 0x94	; 148
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	a9 01       	movw	r20, r18
    1186:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_displayStringRowColumn>
    118a:	07 c0       	rjmp	.+14     	; 0x119a <Checkingpassword+0x3ce>
			      break;
			   case 1:
			  	  LCD_displayStringRowColumn(0,0,"Not Equal");
    118c:	2e e9       	ldi	r18, 0x9E	; 158
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	a9 01       	movw	r20, r18
    1196:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_displayStringRowColumn>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e8       	ldi	r25, 0x80	; 128
    119e:	ab eb       	ldi	r26, 0xBB	; 187
    11a0:	b4 e4       	ldi	r27, 0x44	; 68
    11a2:	8b 87       	std	Y+11, r24	; 0x0b
    11a4:	9c 87       	std	Y+12, r25	; 0x0c
    11a6:	ad 87       	std	Y+13, r26	; 0x0d
    11a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	4a e7       	ldi	r20, 0x7A	; 122
    11b8:	53 e4       	ldi	r21, 0x43	; 67
    11ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	8f 83       	std	Y+7, r24	; 0x07
    11c4:	98 87       	std	Y+8, r25	; 0x08
    11c6:	a9 87       	std	Y+9, r26	; 0x09
    11c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ca:	6f 81       	ldd	r22, Y+7	; 0x07
    11cc:	78 85       	ldd	r23, Y+8	; 0x08
    11ce:	89 85       	ldd	r24, Y+9	; 0x09
    11d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e8       	ldi	r20, 0x80	; 128
    11d8:	5f e3       	ldi	r21, 0x3F	; 63
    11da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11de:	88 23       	and	r24, r24
    11e0:	2c f4       	brge	.+10     	; 0x11ec <Checkingpassword+0x420>
		__ticks = 1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	9e 83       	std	Y+6, r25	; 0x06
    11e8:	8d 83       	std	Y+5, r24	; 0x05
    11ea:	3f c0       	rjmp	.+126    	; 0x126a <Checkingpassword+0x49e>
	else if (__tmp > 65535)
    11ec:	6f 81       	ldd	r22, Y+7	; 0x07
    11ee:	78 85       	ldd	r23, Y+8	; 0x08
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	3f ef       	ldi	r19, 0xFF	; 255
    11f8:	4f e7       	ldi	r20, 0x7F	; 127
    11fa:	57 e4       	ldi	r21, 0x47	; 71
    11fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1200:	18 16       	cp	r1, r24
    1202:	4c f5       	brge	.+82     	; 0x1256 <Checkingpassword+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1204:	6b 85       	ldd	r22, Y+11	; 0x0b
    1206:	7c 85       	ldd	r23, Y+12	; 0x0c
    1208:	8d 85       	ldd	r24, Y+13	; 0x0d
    120a:	9e 85       	ldd	r25, Y+14	; 0x0e
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e2       	ldi	r20, 0x20	; 32
    1212:	51 e4       	ldi	r21, 0x41	; 65
    1214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	bc 01       	movw	r22, r24
    121e:	cd 01       	movw	r24, r26
    1220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	9e 83       	std	Y+6, r25	; 0x06
    122a:	8d 83       	std	Y+5, r24	; 0x05
    122c:	0f c0       	rjmp	.+30     	; 0x124c <Checkingpassword+0x480>
    122e:	89 e1       	ldi	r24, 0x19	; 25
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	9c 83       	std	Y+4, r25	; 0x04
    1234:	8b 83       	std	Y+3, r24	; 0x03
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	9c 81       	ldd	r25, Y+4	; 0x04
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <Checkingpassword+0x46e>
    123e:	9c 83       	std	Y+4, r25	; 0x04
    1240:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	9e 81       	ldd	r25, Y+6	; 0x06
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	69 f7       	brne	.-38     	; 0x122e <Checkingpassword+0x462>
    1254:	14 c0       	rjmp	.+40     	; 0x127e <Checkingpassword+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1256:	6f 81       	ldd	r22, Y+7	; 0x07
    1258:	78 85       	ldd	r23, Y+8	; 0x08
    125a:	89 85       	ldd	r24, Y+9	; 0x09
    125c:	9a 85       	ldd	r25, Y+10	; 0x0a
    125e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	9e 83       	std	Y+6, r25	; 0x06
    1268:	8d 83       	std	Y+5, r24	; 0x05
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <Checkingpassword+0x4aa>
    127a:	9a 83       	std	Y+2, r25	; 0x02
    127c:	89 83       	std	Y+1, r24	; 0x01
			  	  break;
			   }
			   _delay_ms(1500);
			    LCD_clearScreen();
    127e:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LCD_clearScreen>
		   }
		}
		if(outing||type)
    1282:	8a ad       	ldd	r24, Y+58	; 0x3a
    1284:	88 23       	and	r24, r24
    1286:	29 f4       	brne	.+10     	; 0x1292 <Checkingpassword+0x4c6>
    1288:	8c ad       	ldd	r24, Y+60	; 0x3c
    128a:	88 23       	and	r24, r24
    128c:	11 f4       	brne	.+4      	; 0x1292 <Checkingpassword+0x4c6>
			break;
		detector=0;
    128e:	1b ae       	std	Y+59, r1	; 0x3b
    1290:	ab cd       	rjmp	.-1194   	; 0xde8 <Checkingpassword+0x1c>
		}
}
    1292:	c0 5c       	subi	r28, 0xC0	; 192
    1294:	df 4f       	sbci	r29, 0xFF	; 255
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <checkingdoor>:
void checkingdoor(void)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	a0 97       	sbiw	r28, 0x20	; 32
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
	uint8 errors=0;
    12ba:	18 8a       	std	Y+16, r1	; 0x10
    12bc:	32 c1       	rjmp	.+612    	; 0x1522 <checkingdoor+0x27c>
		uint8 recieveopening;
	while(errors<=3)
				 {
		if(errors==3)
    12be:	88 89       	ldd	r24, Y+16	; 0x10
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <checkingdoor+0x20>
    12c4:	32 c1       	rjmp	.+612    	; 0x152a <checkingdoor+0x284>
			break;
				  Entering_password(0);
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	0e 94 01 06 	call	0xc02	; 0xc02 <Entering_password>
				  LCD_clearScreen();
    12cc:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LCD_clearScreen>
				  UART_sendString(password);
    12d0:	84 e0       	ldi	r24, 0x04	; 4
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <UART_sendString>
				  recieveopening=UART_recieveByte();
    12d8:	0e 94 93 16 	call	0x2d26	; 0x2d26 <UART_recieveByte>
    12dc:	8f 87       	std	Y+15, r24	; 0x0f
    			  recieveopening=UART_recieveByte();
    12de:	0e 94 93 16 	call	0x2d26	; 0x2d26 <UART_recieveByte>
    12e2:	8f 87       	std	Y+15, r24	; 0x0f
				  if(recieveopening==OPENED)
    12e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e6:	86 31       	cpi	r24, 0x16	; 22
    12e8:	09 f0       	breq	.+2      	; 0x12ec <checkingdoor+0x46>
    12ea:	54 c0       	rjmp	.+168    	; 0x1394 <checkingdoor+0xee>
				  {
					  LCD_clearScreen();
    12ec:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LCD_clearScreen>
					  SREG |= (1<<7);
    12f0:	af e5       	ldi	r26, 0x5F	; 95
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ef e5       	ldi	r30, 0x5F	; 95
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	80 68       	ori	r24, 0x80	; 128
    12fc:	8c 93       	st	X, r24
					  seconds_needed=10;
    12fe:	8a e0       	ldi	r24, 0x0A	; 10
    1300:	80 93 00 01 	sts	0x0100, r24
					  Set_callBack(ISR_COUNT);
    1304:	83 ea       	ldi	r24, 0xA3	; 163
    1306:	95 e0       	ldi	r25, 0x05	; 5
    1308:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Set_callBack>
					  Timer0_ConfigType config={CTC,F_CPU_256,250};
    130c:	ce 01       	movw	r24, r28
    130e:	41 96       	adiw	r24, 0x11	; 17
    1310:	98 8f       	std	Y+24, r25	; 0x18
    1312:	8f 8b       	std	Y+23, r24	; 0x17
    1314:	eb ef       	ldi	r30, 0xFB	; 251
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	fa 8f       	std	Y+26, r31	; 0x1a
    131a:	e9 8f       	std	Y+25, r30	; 0x19
    131c:	f3 e0       	ldi	r31, 0x03	; 3
    131e:	fb 8f       	std	Y+27, r31	; 0x1b
    1320:	e9 8d       	ldd	r30, Y+25	; 0x19
    1322:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1324:	00 80       	ld	r0, Z
    1326:	89 8d       	ldd	r24, Y+25	; 0x19
    1328:	9a 8d       	ldd	r25, Y+26	; 0x1a
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	9a 8f       	std	Y+26, r25	; 0x1a
    132e:	89 8f       	std	Y+25, r24	; 0x19
    1330:	ef 89       	ldd	r30, Y+23	; 0x17
    1332:	f8 8d       	ldd	r31, Y+24	; 0x18
    1334:	00 82       	st	Z, r0
    1336:	8f 89       	ldd	r24, Y+23	; 0x17
    1338:	98 8d       	ldd	r25, Y+24	; 0x18
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	98 8f       	std	Y+24, r25	; 0x18
    133e:	8f 8b       	std	Y+23, r24	; 0x17
    1340:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1342:	91 50       	subi	r25, 0x01	; 1
    1344:	9b 8f       	std	Y+27, r25	; 0x1b
    1346:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1348:	ee 23       	and	r30, r30
    134a:	51 f7       	brne	.-44     	; 0x1320 <checkingdoor+0x7a>
					  LCD_displayStringRowColumn(0,0,"Opened");
    134c:	28 ea       	ldi	r18, 0xA8	; 168
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	a9 01       	movw	r20, r18
    1356:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_displayStringRowColumn>
					  Timer0_init(&config);
    135a:	ce 01       	movw	r24, r28
    135c:	41 96       	adiw	r24, 0x11	; 17
    135e:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <Timer0_init>
					  while(m==0);
    1362:	80 91 01 01 	lds	r24, 0x0101
    1366:	88 23       	and	r24, r24
    1368:	e1 f3       	breq	.-8      	; 0x1362 <checkingdoor+0xbc>
					  LCD_clearScreen();
    136a:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LCD_clearScreen>
					  m=0;
    136e:	10 92 01 01 	sts	0x0101, r1
					  LCD_displayStringRowColumn(0,0,"Closed");
    1372:	2f ea       	ldi	r18, 0xAF	; 175
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	a9 01       	movw	r20, r18
    137c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_displayStringRowColumn>
					  Timer0_init(&config);
    1380:	ce 01       	movw	r24, r28
    1382:	41 96       	adiw	r24, 0x11	; 17
    1384:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <Timer0_init>
					  while(m==0);
    1388:	80 91 01 01 	lds	r24, 0x0101
    138c:	88 23       	and	r24, r24
    138e:	e1 f3       	breq	.-8      	; 0x1388 <checkingdoor+0xe2>
					 errors=0;
    1390:	18 8a       	std	Y+16, r1	; 0x10
    1392:	cb c0       	rjmp	.+406    	; 0x152a <checkingdoor+0x284>
					 break;
				  }
				  else if(recieveopening==CLOSED)
    1394:	8f 85       	ldd	r24, Y+15	; 0x0f
    1396:	87 31       	cpi	r24, 0x17	; 23
    1398:	09 f0       	breq	.+2      	; 0x139c <checkingdoor+0xf6>
    139a:	c3 c0       	rjmp	.+390    	; 0x1522 <checkingdoor+0x27c>
				  {
				  errors++;
    139c:	88 89       	ldd	r24, Y+16	; 0x10
    139e:	8f 5f       	subi	r24, 0xFF	; 255
    13a0:	88 8b       	std	Y+16, r24	; 0x10
					  if(errors==3)
    13a2:	88 89       	ldd	r24, Y+16	; 0x10
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	09 f0       	breq	.+2      	; 0x13aa <checkingdoor+0x104>
    13a8:	43 c0       	rjmp	.+134    	; 0x1430 <checkingdoor+0x18a>
					  {
						  SREG|=(1<<7);
    13aa:	af e5       	ldi	r26, 0x5F	; 95
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ef e5       	ldi	r30, 0x5F	; 95
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	80 68       	ori	r24, 0x80	; 128
    13b6:	8c 93       	st	X, r24
						  seconds_needed=20;
    13b8:	84 e1       	ldi	r24, 0x14	; 20
    13ba:	80 93 00 01 	sts	0x0100, r24
						  Set_callBack(ISR_COUNT);
    13be:	83 ea       	ldi	r24, 0xA3	; 163
    13c0:	95 e0       	ldi	r25, 0x05	; 5
    13c2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Set_callBack>
						  Timer0_ConfigType config={CTC,NO_CLOCK,250};
    13c6:	ce 01       	movw	r24, r28
    13c8:	44 96       	adiw	r24, 0x14	; 20
    13ca:	9d 8f       	std	Y+29, r25	; 0x1d
    13cc:	8c 8f       	std	Y+28, r24	; 0x1c
    13ce:	e8 ef       	ldi	r30, 0xF8	; 248
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	ff 8f       	std	Y+31, r31	; 0x1f
    13d4:	ee 8f       	std	Y+30, r30	; 0x1e
    13d6:	f3 e0       	ldi	r31, 0x03	; 3
    13d8:	f8 a3       	std	Y+32, r31	; 0x20
    13da:	ee 8d       	ldd	r30, Y+30	; 0x1e
    13dc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    13de:	00 80       	ld	r0, Z
    13e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	9f 8f       	std	Y+31, r25	; 0x1f
    13e8:	8e 8f       	std	Y+30, r24	; 0x1e
    13ea:	ec 8d       	ldd	r30, Y+28	; 0x1c
    13ec:	fd 8d       	ldd	r31, Y+29	; 0x1d
    13ee:	00 82       	st	Z, r0
    13f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13f2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	9d 8f       	std	Y+29, r25	; 0x1d
    13f8:	8c 8f       	std	Y+28, r24	; 0x1c
    13fa:	98 a1       	ldd	r25, Y+32	; 0x20
    13fc:	91 50       	subi	r25, 0x01	; 1
    13fe:	98 a3       	std	Y+32, r25	; 0x20
    1400:	e8 a1       	ldd	r30, Y+32	; 0x20
    1402:	ee 23       	and	r30, r30
    1404:	51 f7       	brne	.-44     	; 0x13da <checkingdoor+0x134>
						  LCD_displayStringRowColumn(0,0,"There is Thief");
    1406:	26 eb       	ldi	r18, 0xB6	; 182
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	a9 01       	movw	r20, r18
    1410:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_displayStringRowColumn>
						  Timer0_init(&config);
    1414:	ce 01       	movw	r24, r28
    1416:	44 96       	adiw	r24, 0x14	; 20
    1418:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <Timer0_init>
						  UART_sendByte(THIEF);
    141c:	88 e1       	ldi	r24, 0x18	; 24
    141e:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <UART_sendByte>
						  while(m==0);
    1422:	80 91 01 01 	lds	r24, 0x0101
    1426:	88 23       	and	r24, r24
    1428:	e1 f3       	breq	.-8      	; 0x1422 <checkingdoor+0x17c>
						  LCD_clearScreen();
    142a:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LCD_clearScreen>
    142e:	79 c0       	rjmp	.+242    	; 0x1522 <checkingdoor+0x27c>
					  }
					  else
					  {

					  LCD_displayStringRowColumn(0,0,"Try again");
    1430:	25 ec       	ldi	r18, 0xC5	; 197
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	a9 01       	movw	r20, r18
    143a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_displayStringRowColumn>
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	aa e7       	ldi	r26, 0x7A	; 122
    1444:	b4 e4       	ldi	r27, 0x44	; 68
    1446:	8b 87       	std	Y+11, r24	; 0x0b
    1448:	9c 87       	std	Y+12, r25	; 0x0c
    144a:	ad 87       	std	Y+13, r26	; 0x0d
    144c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1450:	7c 85       	ldd	r23, Y+12	; 0x0c
    1452:	8d 85       	ldd	r24, Y+13	; 0x0d
    1454:	9e 85       	ldd	r25, Y+14	; 0x0e
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	4a e7       	ldi	r20, 0x7A	; 122
    145c:	53 e4       	ldi	r21, 0x43	; 67
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	8f 83       	std	Y+7, r24	; 0x07
    1468:	98 87       	std	Y+8, r25	; 0x08
    146a:	a9 87       	std	Y+9, r26	; 0x09
    146c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    146e:	6f 81       	ldd	r22, Y+7	; 0x07
    1470:	78 85       	ldd	r23, Y+8	; 0x08
    1472:	89 85       	ldd	r24, Y+9	; 0x09
    1474:	9a 85       	ldd	r25, Y+10	; 0x0a
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e8       	ldi	r20, 0x80	; 128
    147c:	5f e3       	ldi	r21, 0x3F	; 63
    147e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1482:	88 23       	and	r24, r24
    1484:	2c f4       	brge	.+10     	; 0x1490 <checkingdoor+0x1ea>
		__ticks = 1;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
    148e:	3f c0       	rjmp	.+126    	; 0x150e <checkingdoor+0x268>
	else if (__tmp > 65535)
    1490:	6f 81       	ldd	r22, Y+7	; 0x07
    1492:	78 85       	ldd	r23, Y+8	; 0x08
    1494:	89 85       	ldd	r24, Y+9	; 0x09
    1496:	9a 85       	ldd	r25, Y+10	; 0x0a
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	3f ef       	ldi	r19, 0xFF	; 255
    149c:	4f e7       	ldi	r20, 0x7F	; 127
    149e:	57 e4       	ldi	r21, 0x47	; 71
    14a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a4:	18 16       	cp	r1, r24
    14a6:	4c f5       	brge	.+82     	; 0x14fa <checkingdoor+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e2       	ldi	r20, 0x20	; 32
    14b6:	51 e4       	ldi	r21, 0x41	; 65
    14b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	bc 01       	movw	r22, r24
    14c2:	cd 01       	movw	r24, r26
    14c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	9e 83       	std	Y+6, r25	; 0x06
    14ce:	8d 83       	std	Y+5, r24	; 0x05
    14d0:	0f c0       	rjmp	.+30     	; 0x14f0 <checkingdoor+0x24a>
    14d2:	89 e1       	ldi	r24, 0x19	; 25
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	9c 83       	std	Y+4, r25	; 0x04
    14d8:	8b 83       	std	Y+3, r24	; 0x03
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	f1 f7       	brne	.-4      	; 0x14de <checkingdoor+0x238>
    14e2:	9c 83       	std	Y+4, r25	; 0x04
    14e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
    14e8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	9e 83       	std	Y+6, r25	; 0x06
    14ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	69 f7       	brne	.-38     	; 0x14d2 <checkingdoor+0x22c>
    14f8:	14 c0       	rjmp	.+40     	; 0x1522 <checkingdoor+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fa:	6f 81       	ldd	r22, Y+7	; 0x07
    14fc:	78 85       	ldd	r23, Y+8	; 0x08
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	9e 83       	std	Y+6, r25	; 0x06
    150c:	8d 83       	std	Y+5, r24	; 0x05
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	9e 81       	ldd	r25, Y+6	; 0x06
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	9a 81       	ldd	r25, Y+2	; 0x02
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	f1 f7       	brne	.-4      	; 0x151a <checkingdoor+0x274>
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01
}
void checkingdoor(void)
{
	uint8 errors=0;
		uint8 recieveopening;
	while(errors<=3)
    1522:	88 89       	ldd	r24, Y+16	; 0x10
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	08 f4       	brcc	.+2      	; 0x152a <checkingdoor+0x284>
    1528:	ca ce       	rjmp	.-620    	; 0x12be <checkingdoor+0x18>
					  LCD_displayStringRowColumn(0,0,"Try again");
					  _delay_ms(1000);
					  }
				  }
				  }
}
    152a:	a0 96       	adiw	r28, 0x20	; 32
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <main>:
int main(void)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	60 97       	sbiw	r28, 0x10	; 16
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
	uint8 typer=0;
    1550:	18 8a       	std	Y+16, r1	; 0x10
	uint8 key;
	LCD_init();
    1552:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <LCD_init>
    UART_init();
    1556:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <UART_init>
	Checkingpassword(typer);
    155a:	88 89       	ldd	r24, Y+16	; 0x10
    155c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <Checkingpassword>
	LCD_clearScreen();
    1560:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LCD_clearScreen>
	while(1)
	{
		  LCD_displayStringRowColumn(0,0,"+ Opendoor");
    1564:	2f ec       	ldi	r18, 0xCF	; 207
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	a9 01       	movw	r20, r18
    156e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_displayStringRowColumn>
		  LCD_displayStringRowColumn(1,0,"- Change pass");
    1572:	2a ed       	ldi	r18, 0xDA	; 218
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	a9 01       	movw	r20, r18
    157c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_displayStringRowColumn>
		  key=KeyPad_getPressedKey();
    1580:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <KeyPad_getPressedKey>
    1584:	8f 87       	std	Y+15, r24	; 0x0f
		  if(key=='+')
    1586:	8f 85       	ldd	r24, Y+15	; 0x0f
    1588:	8b 32       	cpi	r24, 0x2B	; 43
    158a:	31 f4       	brne	.+12     	; 0x1598 <main+0x5c>
		  {
			  UART_sendByte(PLUS);
    158c:	82 e2       	ldi	r24, 0x22	; 34
    158e:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <UART_sendByte>
			  checkingdoor();
    1592:	0e 94 53 09 	call	0x12a6	; 0x12a6 <checkingdoor>
    1596:	e6 cf       	rjmp	.-52     	; 0x1564 <main+0x28>
		  }
		  else if(key=='-')
    1598:	8f 85       	ldd	r24, Y+15	; 0x0f
    159a:	8d 32       	cpi	r24, 0x2D	; 45
    159c:	49 f4       	brne	.+18     	; 0x15b0 <main+0x74>
		  {
              typer=1;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	88 8b       	std	Y+16, r24	; 0x10
			  UART_sendByte(MINUS);
    15a2:	83 e2       	ldi	r24, 0x23	; 35
    15a4:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <UART_sendByte>
			  Checkingpassword(typer);
    15a8:	88 89       	ldd	r24, Y+16	; 0x10
    15aa:	0e 94 e6 06 	call	0xdcc	; 0xdcc <Checkingpassword>
    15ae:	da cf       	rjmp	.-76     	; 0x1564 <main+0x28>
		  }
		  else
		  {
			  LCD_clearScreen();
    15b0:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LCD_clearScreen>
			  LCD_displayStringRowColumn(0,0,"Invalid");
    15b4:	28 ee       	ldi	r18, 0xE8	; 232
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	a9 01       	movw	r20, r18
    15be:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_displayStringRowColumn>
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	aa ef       	ldi	r26, 0xFA	; 250
    15c8:	b3 e4       	ldi	r27, 0x43	; 67
    15ca:	8b 87       	std	Y+11, r24	; 0x0b
    15cc:	9c 87       	std	Y+12, r25	; 0x0c
    15ce:	ad 87       	std	Y+13, r26	; 0x0d
    15d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	4a e7       	ldi	r20, 0x7A	; 122
    15e0:	53 e4       	ldi	r21, 0x43	; 67
    15e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	8f 83       	std	Y+7, r24	; 0x07
    15ec:	98 87       	std	Y+8, r25	; 0x08
    15ee:	a9 87       	std	Y+9, r26	; 0x09
    15f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15f2:	6f 81       	ldd	r22, Y+7	; 0x07
    15f4:	78 85       	ldd	r23, Y+8	; 0x08
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e8       	ldi	r20, 0x80	; 128
    1600:	5f e3       	ldi	r21, 0x3F	; 63
    1602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1606:	88 23       	and	r24, r24
    1608:	2c f4       	brge	.+10     	; 0x1614 <main+0xd8>
		__ticks = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9e 83       	std	Y+6, r25	; 0x06
    1610:	8d 83       	std	Y+5, r24	; 0x05
    1612:	3f c0       	rjmp	.+126    	; 0x1692 <main+0x156>
	else if (__tmp > 65535)
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	3f ef       	ldi	r19, 0xFF	; 255
    1620:	4f e7       	ldi	r20, 0x7F	; 127
    1622:	57 e4       	ldi	r21, 0x47	; 71
    1624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1628:	18 16       	cp	r1, r24
    162a:	4c f5       	brge	.+82     	; 0x167e <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162c:	6b 85       	ldd	r22, Y+11	; 0x0b
    162e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1630:	8d 85       	ldd	r24, Y+13	; 0x0d
    1632:	9e 85       	ldd	r25, Y+14	; 0x0e
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e2       	ldi	r20, 0x20	; 32
    163a:	51 e4       	ldi	r21, 0x41	; 65
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	bc 01       	movw	r22, r24
    1646:	cd 01       	movw	r24, r26
    1648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	9e 83       	std	Y+6, r25	; 0x06
    1652:	8d 83       	std	Y+5, r24	; 0x05
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <main+0x138>
    1656:	89 e1       	ldi	r24, 0x19	; 25
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	8b 83       	std	Y+3, r24	; 0x03
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	9c 81       	ldd	r25, Y+4	; 0x04
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <main+0x126>
    1666:	9c 83       	std	Y+4, r25	; 0x04
    1668:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	9e 81       	ldd	r25, Y+6	; 0x06
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	69 f7       	brne	.-38     	; 0x1656 <main+0x11a>
    167c:	73 cf       	rjmp	.-282    	; 0x1564 <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167e:	6f 81       	ldd	r22, Y+7	; 0x07
    1680:	78 85       	ldd	r23, Y+8	; 0x08
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <main+0x162>
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	5e cf       	rjmp	.-324    	; 0x1564 <main+0x28>

000016a8 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <KeyPad_getPressedKey+0x6>
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    16b2:	1a 82       	std	Y+2, r1	; 0x02
    16b4:	4c c0       	rjmp	.+152    	; 0x174e <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    16b6:	e7 e3       	ldi	r30, 0x37	; 55
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	80 e1       	ldi	r24, 0x10	; 16
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <KeyPad_getPressedKey+0x22>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	2a 95       	dec	r18
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <KeyPad_getPressedKey+0x1e>
    16ce:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    16d0:	e8 e3       	ldi	r30, 0x38	; 56
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	80 e1       	ldi	r24, 0x10	; 16
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <KeyPad_getPressedKey+0x3e>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <KeyPad_getPressedKey+0x3a>
    16ea:	80 95       	com	r24
    16ec:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    16ee:	19 82       	std	Y+1, r1	; 0x01
    16f0:	28 c0       	rjmp	.+80     	; 0x1742 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    16f2:	e6 e3       	ldi	r30, 0x36	; 54
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a9 01       	movw	r20, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <KeyPad_getPressedKey+0x62>
    1706:	55 95       	asr	r21
    1708:	47 95       	ror	r20
    170a:	8a 95       	dec	r24
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <KeyPad_getPressedKey+0x5e>
    170e:	ca 01       	movw	r24, r20
    1710:	81 70       	andi	r24, 0x01	; 1
    1712:	90 70       	andi	r25, 0x00	; 0
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	91 f4       	brne	.+36     	; 0x173c <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	98 2f       	mov	r25, r24
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	89 0f       	add	r24, r25
    172c:	8f 5f       	subi	r24, 0xFF	; 255
    172e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	8f 5f       	subi	r24, 0xFF	; 255
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	a8 f2       	brcs	.-86     	; 0x16f2 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	8f 5f       	subi	r24, 0xFF	; 255
    174c:	8a 83       	std	Y+2, r24	; 0x02
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	84 30       	cpi	r24, 0x04	; 4
    1752:	08 f4       	brcc	.+2      	; 0x1756 <KeyPad_getPressedKey+0xae>
    1754:	b0 cf       	rjmp	.-160    	; 0x16b6 <KeyPad_getPressedKey+0xe>
    1756:	ad cf       	rjmp	.-166    	; 0x16b2 <KeyPad_getPressedKey+0xa>

00001758 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	00 d0       	rcall	.+0      	; 0x175e <KeyPad_4x4_adjustKeyNumber+0x6>
    175e:	00 d0       	rcall	.+0      	; 0x1760 <KeyPad_4x4_adjustKeyNumber+0x8>
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	3c 83       	std	Y+4, r19	; 0x04
    176e:	2b 83       	std	Y+3, r18	; 0x03
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	88 30       	cpi	r24, 0x08	; 8
    1776:	91 05       	cpc	r25, r1
    1778:	09 f4       	brne	.+2      	; 0x177c <KeyPad_4x4_adjustKeyNumber+0x24>
    177a:	70 c0       	rjmp	.+224    	; 0x185c <KeyPad_4x4_adjustKeyNumber+0x104>
    177c:	2b 81       	ldd	r18, Y+3	; 0x03
    177e:	3c 81       	ldd	r19, Y+4	; 0x04
    1780:	29 30       	cpi	r18, 0x09	; 9
    1782:	31 05       	cpc	r19, r1
    1784:	5c f5       	brge	.+86     	; 0x17dc <KeyPad_4x4_adjustKeyNumber+0x84>
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	84 30       	cpi	r24, 0x04	; 4
    178c:	91 05       	cpc	r25, r1
    178e:	09 f4       	brne	.+2      	; 0x1792 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1790:	59 c0       	rjmp	.+178    	; 0x1844 <KeyPad_4x4_adjustKeyNumber+0xec>
    1792:	2b 81       	ldd	r18, Y+3	; 0x03
    1794:	3c 81       	ldd	r19, Y+4	; 0x04
    1796:	25 30       	cpi	r18, 0x05	; 5
    1798:	31 05       	cpc	r19, r1
    179a:	9c f4       	brge	.+38     	; 0x17c2 <KeyPad_4x4_adjustKeyNumber+0x6a>
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	82 30       	cpi	r24, 0x02	; 2
    17a2:	91 05       	cpc	r25, r1
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <KeyPad_4x4_adjustKeyNumber+0x50>
    17a6:	48 c0       	rjmp	.+144    	; 0x1838 <KeyPad_4x4_adjustKeyNumber+0xe0>
    17a8:	2b 81       	ldd	r18, Y+3	; 0x03
    17aa:	3c 81       	ldd	r19, Y+4	; 0x04
    17ac:	23 30       	cpi	r18, 0x03	; 3
    17ae:	31 05       	cpc	r19, r1
    17b0:	0c f0       	brlt	.+2      	; 0x17b4 <KeyPad_4x4_adjustKeyNumber+0x5c>
    17b2:	45 c0       	rjmp	.+138    	; 0x183e <KeyPad_4x4_adjustKeyNumber+0xe6>
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	91 05       	cpc	r25, r1
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <KeyPad_4x4_adjustKeyNumber+0x68>
    17be:	39 c0       	rjmp	.+114    	; 0x1832 <KeyPad_4x4_adjustKeyNumber+0xda>
    17c0:	67 c0       	rjmp	.+206    	; 0x1890 <KeyPad_4x4_adjustKeyNumber+0x138>
    17c2:	2b 81       	ldd	r18, Y+3	; 0x03
    17c4:	3c 81       	ldd	r19, Y+4	; 0x04
    17c6:	26 30       	cpi	r18, 0x06	; 6
    17c8:	31 05       	cpc	r19, r1
    17ca:	09 f4       	brne	.+2      	; 0x17ce <KeyPad_4x4_adjustKeyNumber+0x76>
    17cc:	41 c0       	rjmp	.+130    	; 0x1850 <KeyPad_4x4_adjustKeyNumber+0xf8>
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	87 30       	cpi	r24, 0x07	; 7
    17d4:	91 05       	cpc	r25, r1
    17d6:	0c f0       	brlt	.+2      	; 0x17da <KeyPad_4x4_adjustKeyNumber+0x82>
    17d8:	3e c0       	rjmp	.+124    	; 0x1856 <KeyPad_4x4_adjustKeyNumber+0xfe>
    17da:	37 c0       	rjmp	.+110    	; 0x184a <KeyPad_4x4_adjustKeyNumber+0xf2>
    17dc:	2b 81       	ldd	r18, Y+3	; 0x03
    17de:	3c 81       	ldd	r19, Y+4	; 0x04
    17e0:	2c 30       	cpi	r18, 0x0C	; 12
    17e2:	31 05       	cpc	r19, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <KeyPad_4x4_adjustKeyNumber+0x90>
    17e6:	46 c0       	rjmp	.+140    	; 0x1874 <KeyPad_4x4_adjustKeyNumber+0x11c>
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	9c 81       	ldd	r25, Y+4	; 0x04
    17ec:	8d 30       	cpi	r24, 0x0D	; 13
    17ee:	91 05       	cpc	r25, r1
    17f0:	5c f4       	brge	.+22     	; 0x1808 <KeyPad_4x4_adjustKeyNumber+0xb0>
    17f2:	2b 81       	ldd	r18, Y+3	; 0x03
    17f4:	3c 81       	ldd	r19, Y+4	; 0x04
    17f6:	2a 30       	cpi	r18, 0x0A	; 10
    17f8:	31 05       	cpc	r19, r1
    17fa:	b1 f1       	breq	.+108    	; 0x1868 <KeyPad_4x4_adjustKeyNumber+0x110>
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	8b 30       	cpi	r24, 0x0B	; 11
    1802:	91 05       	cpc	r25, r1
    1804:	a4 f5       	brge	.+104    	; 0x186e <KeyPad_4x4_adjustKeyNumber+0x116>
    1806:	2d c0       	rjmp	.+90     	; 0x1862 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1808:	2b 81       	ldd	r18, Y+3	; 0x03
    180a:	3c 81       	ldd	r19, Y+4	; 0x04
    180c:	2e 30       	cpi	r18, 0x0E	; 14
    180e:	31 05       	cpc	r19, r1
    1810:	b9 f1       	breq	.+110    	; 0x1880 <KeyPad_4x4_adjustKeyNumber+0x128>
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	8e 30       	cpi	r24, 0x0E	; 14
    1818:	91 05       	cpc	r25, r1
    181a:	7c f1       	brlt	.+94     	; 0x187a <KeyPad_4x4_adjustKeyNumber+0x122>
    181c:	2b 81       	ldd	r18, Y+3	; 0x03
    181e:	3c 81       	ldd	r19, Y+4	; 0x04
    1820:	2f 30       	cpi	r18, 0x0F	; 15
    1822:	31 05       	cpc	r19, r1
    1824:	79 f1       	breq	.+94     	; 0x1884 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	80 31       	cpi	r24, 0x10	; 16
    182c:	91 05       	cpc	r25, r1
    182e:	69 f1       	breq	.+90     	; 0x188a <KeyPad_4x4_adjustKeyNumber+0x132>
    1830:	2f c0       	rjmp	.+94     	; 0x1890 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1832:	97 e0       	ldi	r25, 0x07	; 7
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	2e c0       	rjmp	.+92     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1838:	28 e0       	ldi	r18, 0x08	; 8
    183a:	2a 83       	std	Y+2, r18	; 0x02
    183c:	2b c0       	rjmp	.+86     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    183e:	39 e0       	ldi	r19, 0x09	; 9
    1840:	3a 83       	std	Y+2, r19	; 0x02
    1842:	28 c0       	rjmp	.+80     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1844:	85 e2       	ldi	r24, 0x25	; 37
    1846:	8a 83       	std	Y+2, r24	; 0x02
    1848:	25 c0       	rjmp	.+74     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    184a:	94 e0       	ldi	r25, 0x04	; 4
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	22 c0       	rjmp	.+68     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1850:	25 e0       	ldi	r18, 0x05	; 5
    1852:	2a 83       	std	Y+2, r18	; 0x02
    1854:	1f c0       	rjmp	.+62     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1856:	36 e0       	ldi	r19, 0x06	; 6
    1858:	3a 83       	std	Y+2, r19	; 0x02
    185a:	1c c0       	rjmp	.+56     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    185c:	8a e2       	ldi	r24, 0x2A	; 42
    185e:	8a 83       	std	Y+2, r24	; 0x02
    1860:	19 c0       	rjmp	.+50     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	16 c0       	rjmp	.+44     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1868:	22 e0       	ldi	r18, 0x02	; 2
    186a:	2a 83       	std	Y+2, r18	; 0x02
    186c:	13 c0       	rjmp	.+38     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    186e:	33 e0       	ldi	r19, 0x03	; 3
    1870:	3a 83       	std	Y+2, r19	; 0x02
    1872:	10 c0       	rjmp	.+32     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1874:	8d e2       	ldi	r24, 0x2D	; 45
    1876:	8a 83       	std	Y+2, r24	; 0x02
    1878:	0d c0       	rjmp	.+26     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    187a:	9d e0       	ldi	r25, 0x0D	; 13
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	0a c0       	rjmp	.+20     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1880:	1a 82       	std	Y+2, r1	; 0x02
    1882:	08 c0       	rjmp	.+16     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1884:	2d e3       	ldi	r18, 0x3D	; 61
    1886:	2a 83       	std	Y+2, r18	; 0x02
    1888:	05 c0       	rjmp	.+10     	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    188a:	3b e2       	ldi	r19, 0x2B	; 43
    188c:	3a 83       	std	Y+2, r19	; 0x02
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	8a 83       	std	Y+2, r24	; 0x02
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    18ac:	a4 e3       	ldi	r26, 0x34	; 52
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e4 e3       	ldi	r30, 0x34	; 52
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	87 60       	ori	r24, 0x07	; 7
    18b8:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
    18ba:	aa e3       	ldi	r26, 0x3A	; 58
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	ea e3       	ldi	r30, 0x3A	; 58
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	8f 60       	ori	r24, 0x0F	; 15
    18c6:	8c 93       	st	X, r24
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    18c8:	82 e0       	ldi	r24, 0x02	; 2
    18ca:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    18ce:	88 e2       	ldi	r24, 0x28	; 40
    18d0:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    18d4:	8c e0       	ldi	r24, 0x0C	; 12
    18d6:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
}
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	c3 56       	subi	r28, 0x63	; 99
    18f4:	d0 40       	sbci	r29, 0x00	; 0
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	fe 01       	movw	r30, r28
    1902:	ed 59       	subi	r30, 0x9D	; 157
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1908:	a5 e3       	ldi	r26, 0x35	; 53
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e5 e3       	ldi	r30, 0x35	; 53
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	8e 7f       	andi	r24, 0xFE	; 254
    1914:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1916:	a5 e3       	ldi	r26, 0x35	; 53
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e5 e3       	ldi	r30, 0x35	; 53
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	8d 7f       	andi	r24, 0xFD	; 253
    1922:	8c 93       	st	X, r24
    1924:	fe 01       	movw	r30, r28
    1926:	e1 5a       	subi	r30, 0xA1	; 161
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	a0 e8       	ldi	r26, 0x80	; 128
    1930:	bf e3       	ldi	r27, 0x3F	; 63
    1932:	80 83       	st	Z, r24
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	a2 83       	std	Z+2, r26	; 0x02
    1938:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193a:	8e 01       	movw	r16, r28
    193c:	05 5a       	subi	r16, 0xA5	; 165
    193e:	1f 4f       	sbci	r17, 0xFF	; 255
    1940:	fe 01       	movw	r30, r28
    1942:	e1 5a       	subi	r30, 0xA1	; 161
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	60 81       	ld	r22, Z
    1948:	71 81       	ldd	r23, Z+1	; 0x01
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	4a e7       	ldi	r20, 0x7A	; 122
    1954:	53 e4       	ldi	r21, 0x43	; 67
    1956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	f8 01       	movw	r30, r16
    1960:	80 83       	st	Z, r24
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	a2 83       	std	Z+2, r26	; 0x02
    1966:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1968:	fe 01       	movw	r30, r28
    196a:	e5 5a       	subi	r30, 0xA5	; 165
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e8       	ldi	r20, 0x80	; 128
    197c:	5f e3       	ldi	r21, 0x3F	; 63
    197e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1982:	88 23       	and	r24, r24
    1984:	44 f4       	brge	.+16     	; 0x1996 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1986:	fe 01       	movw	r30, r28
    1988:	e7 5a       	subi	r30, 0xA7	; 167
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	80 83       	st	Z, r24
    1994:	64 c0       	rjmp	.+200    	; 0x1a5e <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1996:	fe 01       	movw	r30, r28
    1998:	e5 5a       	subi	r30, 0xA5	; 165
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	60 81       	ld	r22, Z
    199e:	71 81       	ldd	r23, Z+1	; 0x01
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	57 e4       	ldi	r21, 0x47	; 71
    19ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	0c f0       	brlt	.+2      	; 0x19b6 <LCD_sendCommand+0xd0>
    19b4:	43 c0       	rjmp	.+134    	; 0x1a3c <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b6:	fe 01       	movw	r30, r28
    19b8:	e1 5a       	subi	r30, 0xA1	; 161
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	60 81       	ld	r22, Z
    19be:	71 81       	ldd	r23, Z+1	; 0x01
    19c0:	82 81       	ldd	r24, Z+2	; 0x02
    19c2:	93 81       	ldd	r25, Z+3	; 0x03
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e2       	ldi	r20, 0x20	; 32
    19ca:	51 e4       	ldi	r21, 0x41	; 65
    19cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	8e 01       	movw	r16, r28
    19d6:	07 5a       	subi	r16, 0xA7	; 167
    19d8:	1f 4f       	sbci	r17, 0xFF	; 255
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	f8 01       	movw	r30, r16
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	80 83       	st	Z, r24
    19ec:	1f c0       	rjmp	.+62     	; 0x1a2c <LCD_sendCommand+0x146>
    19ee:	fe 01       	movw	r30, r28
    19f0:	e9 5a       	subi	r30, 0xA9	; 169
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	89 e1       	ldi	r24, 0x19	; 25
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
    19fc:	fe 01       	movw	r30, r28
    19fe:	e9 5a       	subi	r30, 0xA9	; 169
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	80 81       	ld	r24, Z
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <LCD_sendCommand+0x120>
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e9 5a       	subi	r30, 0xA9	; 169
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a14:	de 01       	movw	r26, r28
    1a16:	a7 5a       	subi	r26, 0xA7	; 167
    1a18:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e7 5a       	subi	r30, 0xA7	; 167
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	80 81       	ld	r24, Z
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	11 96       	adiw	r26, 0x01	; 1
    1a28:	9c 93       	st	X, r25
    1a2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	e7 5a       	subi	r30, 0xA7	; 167
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	80 81       	ld	r24, Z
    1a34:	91 81       	ldd	r25, Z+1	; 0x01
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	d1 f6       	brne	.-76     	; 0x19ee <LCD_sendCommand+0x108>
    1a3a:	27 c0       	rjmp	.+78     	; 0x1a8a <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3c:	8e 01       	movw	r16, r28
    1a3e:	07 5a       	subi	r16, 0xA7	; 167
    1a40:	1f 4f       	sbci	r17, 0xFF	; 255
    1a42:	fe 01       	movw	r30, r28
    1a44:	e5 5a       	subi	r30, 0xA5	; 165
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	60 81       	ld	r22, Z
    1a4a:	71 81       	ldd	r23, Z+1	; 0x01
    1a4c:	82 81       	ldd	r24, Z+2	; 0x02
    1a4e:	93 81       	ldd	r25, Z+3	; 0x03
    1a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	f8 01       	movw	r30, r16
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	80 83       	st	Z, r24
    1a5e:	de 01       	movw	r26, r28
    1a60:	ab 5a       	subi	r26, 0xAB	; 171
    1a62:	bf 4f       	sbci	r27, 0xFF	; 255
    1a64:	fe 01       	movw	r30, r28
    1a66:	e7 5a       	subi	r30, 0xA7	; 167
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	8d 93       	st	X+, r24
    1a70:	9c 93       	st	X, r25
    1a72:	fe 01       	movw	r30, r28
    1a74:	eb 5a       	subi	r30, 0xAB	; 171
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	80 81       	ld	r24, Z
    1a7a:	91 81       	ldd	r25, Z+1	; 0x01
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_sendCommand+0x196>
    1a80:	fe 01       	movw	r30, r28
    1a82:	eb 5a       	subi	r30, 0xAB	; 171
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1a8a:	a5 e3       	ldi	r26, 0x35	; 53
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e3       	ldi	r30, 0x35	; 53
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	84 60       	ori	r24, 0x04	; 4
    1a96:	8c 93       	st	X, r24
    1a98:	fe 01       	movw	r30, r28
    1a9a:	ef 5a       	subi	r30, 0xAF	; 175
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e8       	ldi	r26, 0x80	; 128
    1aa4:	bf e3       	ldi	r27, 0x3F	; 63
    1aa6:	80 83       	st	Z, r24
    1aa8:	91 83       	std	Z+1, r25	; 0x01
    1aaa:	a2 83       	std	Z+2, r26	; 0x02
    1aac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aae:	8e 01       	movw	r16, r28
    1ab0:	03 5b       	subi	r16, 0xB3	; 179
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	ef 5a       	subi	r30, 0xAF	; 175
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	4a e7       	ldi	r20, 0x7A	; 122
    1ac8:	53 e4       	ldi	r21, 0x43	; 67
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	80 83       	st	Z, r24
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	a2 83       	std	Z+2, r26	; 0x02
    1ada:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1adc:	fe 01       	movw	r30, r28
    1ade:	e3 5b       	subi	r30, 0xB3	; 179
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	60 81       	ld	r22, Z
    1ae4:	71 81       	ldd	r23, Z+1	; 0x01
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	93 81       	ldd	r25, Z+3	; 0x03
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	44 f4       	brge	.+16     	; 0x1b0a <LCD_sendCommand+0x224>
		__ticks = 1;
    1afa:	fe 01       	movw	r30, r28
    1afc:	e5 5b       	subi	r30, 0xB5	; 181
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
    1b08:	64 c0       	rjmp	.+200    	; 0x1bd2 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e3 5b       	subi	r30, 0xB3	; 179
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	60 81       	ld	r22, Z
    1b12:	71 81       	ldd	r23, Z+1	; 0x01
    1b14:	82 81       	ldd	r24, Z+2	; 0x02
    1b16:	93 81       	ldd	r25, Z+3	; 0x03
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	3f ef       	ldi	r19, 0xFF	; 255
    1b1c:	4f e7       	ldi	r20, 0x7F	; 127
    1b1e:	57 e4       	ldi	r21, 0x47	; 71
    1b20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b24:	18 16       	cp	r1, r24
    1b26:	0c f0       	brlt	.+2      	; 0x1b2a <LCD_sendCommand+0x244>
    1b28:	43 c0       	rjmp	.+134    	; 0x1bb0 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ef 5a       	subi	r30, 0xAF	; 175
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	60 81       	ld	r22, Z
    1b32:	71 81       	ldd	r23, Z+1	; 0x01
    1b34:	82 81       	ldd	r24, Z+2	; 0x02
    1b36:	93 81       	ldd	r25, Z+3	; 0x03
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e2       	ldi	r20, 0x20	; 32
    1b3e:	51 e4       	ldi	r21, 0x41	; 65
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8e 01       	movw	r16, r28
    1b4a:	05 5b       	subi	r16, 0xB5	; 181
    1b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	80 83       	st	Z, r24
    1b60:	1f c0       	rjmp	.+62     	; 0x1ba0 <LCD_sendCommand+0x2ba>
    1b62:	fe 01       	movw	r30, r28
    1b64:	e7 5b       	subi	r30, 0xB7	; 183
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	89 e1       	ldi	r24, 0x19	; 25
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	80 83       	st	Z, r24
    1b70:	fe 01       	movw	r30, r28
    1b72:	e7 5b       	subi	r30, 0xB7	; 183
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	80 81       	ld	r24, Z
    1b78:	91 81       	ldd	r25, Z+1	; 0x01
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <LCD_sendCommand+0x294>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e7 5b       	subi	r30, 0xB7	; 183
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b88:	de 01       	movw	r26, r28
    1b8a:	a5 5b       	subi	r26, 0xB5	; 181
    1b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e5 5b       	subi	r30, 0xB5	; 181
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	11 96       	adiw	r26, 0x01	; 1
    1b9c:	9c 93       	st	X, r25
    1b9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e5 5b       	subi	r30, 0xB5	; 181
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	d1 f6       	brne	.-76     	; 0x1b62 <LCD_sendCommand+0x27c>
    1bae:	27 c0       	rjmp	.+78     	; 0x1bfe <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb0:	8e 01       	movw	r16, r28
    1bb2:	05 5b       	subi	r16, 0xB5	; 181
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e3 5b       	subi	r30, 0xB3	; 179
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	60 81       	ld	r22, Z
    1bbe:	71 81       	ldd	r23, Z+1	; 0x01
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	93 81       	ldd	r25, Z+3	; 0x03
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	f8 01       	movw	r30, r16
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    1bd2:	de 01       	movw	r26, r28
    1bd4:	a9 5b       	subi	r26, 0xB9	; 185
    1bd6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e5 5b       	subi	r30, 0xB5	; 181
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 81       	ld	r24, Z
    1be0:	91 81       	ldd	r25, Z+1	; 0x01
    1be2:	8d 93       	st	X+, r24
    1be4:	9c 93       	st	X, r25
    1be6:	fe 01       	movw	r30, r28
    1be8:	e9 5b       	subi	r30, 0xB9	; 185
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	80 81       	ld	r24, Z
    1bee:	91 81       	ldd	r25, Z+1	; 0x01
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_sendCommand+0x30a>
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e9 5b       	subi	r30, 0xB9	; 185
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
    1bfe:	ab e3       	ldi	r26, 0x3B	; 59
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	eb e3       	ldi	r30, 0x3B	; 59
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	98 2f       	mov	r25, r24
    1c0a:	90 7f       	andi	r25, 0xF0	; 240
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	ed 59       	subi	r30, 0x9D	; 157
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	80 81       	ld	r24, Z
    1c14:	82 95       	swap	r24
    1c16:	8f 70       	andi	r24, 0x0F	; 15
    1c18:	89 2b       	or	r24, r25
    1c1a:	8c 93       	st	X, r24
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	ed 5b       	subi	r30, 0xBD	; 189
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	a0 e8       	ldi	r26, 0x80	; 128
    1c28:	bf e3       	ldi	r27, 0x3F	; 63
    1c2a:	80 83       	st	Z, r24
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	a2 83       	std	Z+2, r26	; 0x02
    1c30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c32:	8e 01       	movw	r16, r28
    1c34:	01 5c       	subi	r16, 0xC1	; 193
    1c36:	1f 4f       	sbci	r17, 0xFF	; 255
    1c38:	fe 01       	movw	r30, r28
    1c3a:	ed 5b       	subi	r30, 0xBD	; 189
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	4a e7       	ldi	r20, 0x7A	; 122
    1c4c:	53 e4       	ldi	r21, 0x43	; 67
    1c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	f8 01       	movw	r30, r16
    1c58:	80 83       	st	Z, r24
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	a2 83       	std	Z+2, r26	; 0x02
    1c5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c60:	fe 01       	movw	r30, r28
    1c62:	ff 96       	adiw	r30, 0x3f	; 63
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e8       	ldi	r20, 0x80	; 128
    1c72:	5f e3       	ldi	r21, 0x3F	; 63
    1c74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c78:	88 23       	and	r24, r24
    1c7a:	2c f4       	brge	.+10     	; 0x1c86 <LCD_sendCommand+0x3a0>
		__ticks = 1;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	9e af       	std	Y+62, r25	; 0x3e
    1c82:	8d af       	std	Y+61, r24	; 0x3d
    1c84:	46 c0       	rjmp	.+140    	; 0x1d12 <LCD_sendCommand+0x42c>
	else if (__tmp > 65535)
    1c86:	fe 01       	movw	r30, r28
    1c88:	ff 96       	adiw	r30, 0x3f	; 63
    1c8a:	60 81       	ld	r22, Z
    1c8c:	71 81       	ldd	r23, Z+1	; 0x01
    1c8e:	82 81       	ldd	r24, Z+2	; 0x02
    1c90:	93 81       	ldd	r25, Z+3	; 0x03
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	3f ef       	ldi	r19, 0xFF	; 255
    1c96:	4f e7       	ldi	r20, 0x7F	; 127
    1c98:	57 e4       	ldi	r21, 0x47	; 71
    1c9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c9e:	18 16       	cp	r1, r24
    1ca0:	64 f5       	brge	.+88     	; 0x1cfa <LCD_sendCommand+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ed 5b       	subi	r30, 0xBD	; 189
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	60 81       	ld	r22, Z
    1caa:	71 81       	ldd	r23, Z+1	; 0x01
    1cac:	82 81       	ldd	r24, Z+2	; 0x02
    1cae:	93 81       	ldd	r25, Z+3	; 0x03
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e2       	ldi	r20, 0x20	; 32
    1cb6:	51 e4       	ldi	r21, 0x41	; 65
    1cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	9e af       	std	Y+62, r25	; 0x3e
    1cce:	8d af       	std	Y+61, r24	; 0x3d
    1cd0:	0f c0       	rjmp	.+30     	; 0x1cf0 <LCD_sendCommand+0x40a>
    1cd2:	89 e1       	ldi	r24, 0x19	; 25
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9c af       	std	Y+60, r25	; 0x3c
    1cd8:	8b af       	std	Y+59, r24	; 0x3b
    1cda:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cdc:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <LCD_sendCommand+0x3f8>
    1ce2:	9c af       	std	Y+60, r25	; 0x3c
    1ce4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ce8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	9e af       	std	Y+62, r25	; 0x3e
    1cee:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cf2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	69 f7       	brne	.-38     	; 0x1cd2 <LCD_sendCommand+0x3ec>
    1cf8:	16 c0       	rjmp	.+44     	; 0x1d26 <LCD_sendCommand+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ff 96       	adiw	r30, 0x3f	; 63
    1cfe:	60 81       	ld	r22, Z
    1d00:	71 81       	ldd	r23, Z+1	; 0x01
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9e af       	std	Y+62, r25	; 0x3e
    1d10:	8d af       	std	Y+61, r24	; 0x3d
    1d12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d16:	9a af       	std	Y+58, r25	; 0x3a
    1d18:	89 af       	std	Y+57, r24	; 0x39
    1d1a:	89 ad       	ldd	r24, Y+57	; 0x39
    1d1c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <LCD_sendCommand+0x438>
    1d22:	9a af       	std	Y+58, r25	; 0x3a
    1d24:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1d26:	a5 e3       	ldi	r26, 0x35	; 53
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e5 e3       	ldi	r30, 0x35	; 53
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	8b 7f       	andi	r24, 0xFB	; 251
    1d32:	8c 93       	st	X, r24
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	a0 e8       	ldi	r26, 0x80	; 128
    1d3a:	bf e3       	ldi	r27, 0x3F	; 63
    1d3c:	8d ab       	std	Y+53, r24	; 0x35
    1d3e:	9e ab       	std	Y+54, r25	; 0x36
    1d40:	af ab       	std	Y+55, r26	; 0x37
    1d42:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d44:	6d a9       	ldd	r22, Y+53	; 0x35
    1d46:	7e a9       	ldd	r23, Y+54	; 0x36
    1d48:	8f a9       	ldd	r24, Y+55	; 0x37
    1d4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	4a e7       	ldi	r20, 0x7A	; 122
    1d52:	53 e4       	ldi	r21, 0x43	; 67
    1d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	89 ab       	std	Y+49, r24	; 0x31
    1d5e:	9a ab       	std	Y+50, r25	; 0x32
    1d60:	ab ab       	std	Y+51, r26	; 0x33
    1d62:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d64:	69 a9       	ldd	r22, Y+49	; 0x31
    1d66:	7a a9       	ldd	r23, Y+50	; 0x32
    1d68:	8b a9       	ldd	r24, Y+51	; 0x33
    1d6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e8       	ldi	r20, 0x80	; 128
    1d72:	5f e3       	ldi	r21, 0x3F	; 63
    1d74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d78:	88 23       	and	r24, r24
    1d7a:	2c f4       	brge	.+10     	; 0x1d86 <LCD_sendCommand+0x4a0>
		__ticks = 1;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	98 ab       	std	Y+48, r25	; 0x30
    1d82:	8f a7       	std	Y+47, r24	; 0x2f
    1d84:	3f c0       	rjmp	.+126    	; 0x1e04 <LCD_sendCommand+0x51e>
	else if (__tmp > 65535)
    1d86:	69 a9       	ldd	r22, Y+49	; 0x31
    1d88:	7a a9       	ldd	r23, Y+50	; 0x32
    1d8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	3f ef       	ldi	r19, 0xFF	; 255
    1d92:	4f e7       	ldi	r20, 0x7F	; 127
    1d94:	57 e4       	ldi	r21, 0x47	; 71
    1d96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d9a:	18 16       	cp	r1, r24
    1d9c:	4c f5       	brge	.+82     	; 0x1df0 <LCD_sendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1da0:	7e a9       	ldd	r23, Y+54	; 0x36
    1da2:	8f a9       	ldd	r24, Y+55	; 0x37
    1da4:	98 ad       	ldd	r25, Y+56	; 0x38
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e2       	ldi	r20, 0x20	; 32
    1dac:	51 e4       	ldi	r21, 0x41	; 65
    1dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	98 ab       	std	Y+48, r25	; 0x30
    1dc4:	8f a7       	std	Y+47, r24	; 0x2f
    1dc6:	0f c0       	rjmp	.+30     	; 0x1de6 <LCD_sendCommand+0x500>
    1dc8:	89 e1       	ldi	r24, 0x19	; 25
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9e a7       	std	Y+46, r25	; 0x2e
    1dce:	8d a7       	std	Y+45, r24	; 0x2d
    1dd0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dd2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <LCD_sendCommand+0x4ee>
    1dd8:	9e a7       	std	Y+46, r25	; 0x2e
    1dda:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ddc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dde:	98 a9       	ldd	r25, Y+48	; 0x30
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	98 ab       	std	Y+48, r25	; 0x30
    1de4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1de8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	69 f7       	brne	.-38     	; 0x1dc8 <LCD_sendCommand+0x4e2>
    1dee:	14 c0       	rjmp	.+40     	; 0x1e18 <LCD_sendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df0:	69 a9       	ldd	r22, Y+49	; 0x31
    1df2:	7a a9       	ldd	r23, Y+50	; 0x32
    1df4:	8b a9       	ldd	r24, Y+51	; 0x33
    1df6:	9c a9       	ldd	r25, Y+52	; 0x34
    1df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	98 ab       	std	Y+48, r25	; 0x30
    1e02:	8f a7       	std	Y+47, r24	; 0x2f
    1e04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e06:	98 a9       	ldd	r25, Y+48	; 0x30
    1e08:	9c a7       	std	Y+44, r25	; 0x2c
    1e0a:	8b a7       	std	Y+43, r24	; 0x2b
    1e0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_sendCommand+0x52a>
    1e14:	9c a7       	std	Y+44, r25	; 0x2c
    1e16:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1e18:	a5 e3       	ldi	r26, 0x35	; 53
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e5 e3       	ldi	r30, 0x35	; 53
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	84 60       	ori	r24, 0x04	; 4
    1e24:	8c 93       	st	X, r24
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	a0 e8       	ldi	r26, 0x80	; 128
    1e2c:	bf e3       	ldi	r27, 0x3F	; 63
    1e2e:	8f a3       	std	Y+39, r24	; 0x27
    1e30:	98 a7       	std	Y+40, r25	; 0x28
    1e32:	a9 a7       	std	Y+41, r26	; 0x29
    1e34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e36:	6f a1       	ldd	r22, Y+39	; 0x27
    1e38:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a e7       	ldi	r20, 0x7A	; 122
    1e44:	53 e4       	ldi	r21, 0x43	; 67
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	8b a3       	std	Y+35, r24	; 0x23
    1e50:	9c a3       	std	Y+36, r25	; 0x24
    1e52:	ad a3       	std	Y+37, r26	; 0x25
    1e54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e56:	6b a1       	ldd	r22, Y+35	; 0x23
    1e58:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e8       	ldi	r20, 0x80	; 128
    1e64:	5f e3       	ldi	r21, 0x3F	; 63
    1e66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6a:	88 23       	and	r24, r24
    1e6c:	2c f4       	brge	.+10     	; 0x1e78 <LCD_sendCommand+0x592>
		__ticks = 1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9a a3       	std	Y+34, r25	; 0x22
    1e74:	89 a3       	std	Y+33, r24	; 0x21
    1e76:	3f c0       	rjmp	.+126    	; 0x1ef6 <LCD_sendCommand+0x610>
	else if (__tmp > 65535)
    1e78:	6b a1       	ldd	r22, Y+35	; 0x23
    1e7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	3f ef       	ldi	r19, 0xFF	; 255
    1e84:	4f e7       	ldi	r20, 0x7F	; 127
    1e86:	57 e4       	ldi	r21, 0x47	; 71
    1e88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8c:	18 16       	cp	r1, r24
    1e8e:	4c f5       	brge	.+82     	; 0x1ee2 <LCD_sendCommand+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e90:	6f a1       	ldd	r22, Y+39	; 0x27
    1e92:	78 a5       	ldd	r23, Y+40	; 0x28
    1e94:	89 a5       	ldd	r24, Y+41	; 0x29
    1e96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e2       	ldi	r20, 0x20	; 32
    1e9e:	51 e4       	ldi	r21, 0x41	; 65
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9a a3       	std	Y+34, r25	; 0x22
    1eb6:	89 a3       	std	Y+33, r24	; 0x21
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <LCD_sendCommand+0x5f2>
    1eba:	89 e1       	ldi	r24, 0x19	; 25
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	98 a3       	std	Y+32, r25	; 0x20
    1ec0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ec2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ec4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_sendCommand+0x5e0>
    1eca:	98 a3       	std	Y+32, r25	; 0x20
    1ecc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ece:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	9a a3       	std	Y+34, r25	; 0x22
    1ed6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eda:	9a a1       	ldd	r25, Y+34	; 0x22
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	69 f7       	brne	.-38     	; 0x1eba <LCD_sendCommand+0x5d4>
    1ee0:	14 c0       	rjmp	.+40     	; 0x1f0a <LCD_sendCommand+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9a a3       	std	Y+34, r25	; 0x22
    1ef4:	89 a3       	std	Y+33, r24	; 0x21
    1ef6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ef8:	9a a1       	ldd	r25, Y+34	; 0x22
    1efa:	9e 8f       	std	Y+30, r25	; 0x1e
    1efc:	8d 8f       	std	Y+29, r24	; 0x1d
    1efe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_sendCommand+0x61c>
    1f06:	9e 8f       	std	Y+30, r25	; 0x1e
    1f08:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    1f0a:	ab e3       	ldi	r26, 0x3B	; 59
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	eb e3       	ldi	r30, 0x3B	; 59
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	98 2f       	mov	r25, r24
    1f16:	90 7f       	andi	r25, 0xF0	; 240
    1f18:	fe 01       	movw	r30, r28
    1f1a:	ed 59       	subi	r30, 0x9D	; 157
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	80 81       	ld	r24, Z
    1f20:	8f 70       	andi	r24, 0x0F	; 15
    1f22:	89 2b       	or	r24, r25
    1f24:	8c 93       	st	X, r24
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	a0 e8       	ldi	r26, 0x80	; 128
    1f2c:	bf e3       	ldi	r27, 0x3F	; 63
    1f2e:	89 8f       	std	Y+25, r24	; 0x19
    1f30:	9a 8f       	std	Y+26, r25	; 0x1a
    1f32:	ab 8f       	std	Y+27, r26	; 0x1b
    1f34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f36:	69 8d       	ldd	r22, Y+25	; 0x19
    1f38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	4a e7       	ldi	r20, 0x7A	; 122
    1f44:	53 e4       	ldi	r21, 0x43	; 67
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	8d 8b       	std	Y+21, r24	; 0x15
    1f50:	9e 8b       	std	Y+22, r25	; 0x16
    1f52:	af 8b       	std	Y+23, r26	; 0x17
    1f54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f56:	6d 89       	ldd	r22, Y+21	; 0x15
    1f58:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <LCD_sendCommand+0x692>
		__ticks = 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9c 8b       	std	Y+20, r25	; 0x14
    1f74:	8b 8b       	std	Y+19, r24	; 0x13
    1f76:	3f c0       	rjmp	.+126    	; 0x1ff6 <LCD_sendCommand+0x710>
	else if (__tmp > 65535)
    1f78:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	4c f5       	brge	.+82     	; 0x1fe2 <LCD_sendCommand+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f90:	69 8d       	ldd	r22, Y+25	; 0x19
    1f92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e2       	ldi	r20, 0x20	; 32
    1f9e:	51 e4       	ldi	r21, 0x41	; 65
    1fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9c 8b       	std	Y+20, r25	; 0x14
    1fb6:	8b 8b       	std	Y+19, r24	; 0x13
    1fb8:	0f c0       	rjmp	.+30     	; 0x1fd8 <LCD_sendCommand+0x6f2>
    1fba:	89 e1       	ldi	r24, 0x19	; 25
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9a 8b       	std	Y+18, r25	; 0x12
    1fc0:	89 8b       	std	Y+17, r24	; 0x11
    1fc2:	89 89       	ldd	r24, Y+17	; 0x11
    1fc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <LCD_sendCommand+0x6e0>
    1fca:	9a 8b       	std	Y+18, r25	; 0x12
    1fcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fce:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	9c 8b       	std	Y+20, r25	; 0x14
    1fd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fda:	9c 89       	ldd	r25, Y+20	; 0x14
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	69 f7       	brne	.-38     	; 0x1fba <LCD_sendCommand+0x6d4>
    1fe0:	14 c0       	rjmp	.+40     	; 0x200a <LCD_sendCommand+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9c 8b       	std	Y+20, r25	; 0x14
    1ff4:	8b 8b       	std	Y+19, r24	; 0x13
    1ff6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffa:	98 8b       	std	Y+16, r25	; 0x10
    1ffc:	8f 87       	std	Y+15, r24	; 0x0f
    1ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2000:	98 89       	ldd	r25, Y+16	; 0x10
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <LCD_sendCommand+0x71c>
    2006:	98 8b       	std	Y+16, r25	; 0x10
    2008:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    200a:	a5 e3       	ldi	r26, 0x35	; 53
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e5 e3       	ldi	r30, 0x35	; 53
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	8b 7f       	andi	r24, 0xFB	; 251
    2016:	8c 93       	st	X, r24
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e8       	ldi	r26, 0x80	; 128
    201e:	bf e3       	ldi	r27, 0x3F	; 63
    2020:	8b 87       	std	Y+11, r24	; 0x0b
    2022:	9c 87       	std	Y+12, r25	; 0x0c
    2024:	ad 87       	std	Y+13, r26	; 0x0d
    2026:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	6b 85       	ldd	r22, Y+11	; 0x0b
    202a:	7c 85       	ldd	r23, Y+12	; 0x0c
    202c:	8d 85       	ldd	r24, Y+13	; 0x0d
    202e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a e7       	ldi	r20, 0x7A	; 122
    2036:	53 e4       	ldi	r21, 0x43	; 67
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8f 83       	std	Y+7, r24	; 0x07
    2042:	98 87       	std	Y+8, r25	; 0x08
    2044:	a9 87       	std	Y+9, r26	; 0x09
    2046:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2048:	6f 81       	ldd	r22, Y+7	; 0x07
    204a:	78 85       	ldd	r23, Y+8	; 0x08
    204c:	89 85       	ldd	r24, Y+9	; 0x09
    204e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <LCD_sendCommand+0x784>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <LCD_sendCommand+0x802>
	else if (__tmp > 65535)
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <LCD_sendCommand+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	6b 85       	ldd	r22, Y+11	; 0x0b
    2084:	7c 85       	ldd	r23, Y+12	; 0x0c
    2086:	8d 85       	ldd	r24, Y+13	; 0x0d
    2088:	9e 85       	ldd	r25, Y+14	; 0x0e
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <LCD_sendCommand+0x7e4>
    20ac:	89 e1       	ldi	r24, 0x19	; 25
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	9c 83       	std	Y+4, r25	; 0x04
    20b2:	8b 83       	std	Y+3, r24	; 0x03
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_sendCommand+0x7d2>
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <LCD_sendCommand+0x7c6>
    20d2:	14 c0       	rjmp	.+40     	; 0x20fc <LCD_sendCommand+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <LCD_sendCommand+0x80e>
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    20fc:	cd 59       	subi	r28, 0x9D	; 157
    20fe:	df 4f       	sbci	r29, 0xFF	; 255
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	08 95       	ret

00002114 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2114:	0f 93       	push	r16
    2116:	1f 93       	push	r17
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	c3 56       	subi	r28, 0x63	; 99
    2122:	d0 40       	sbci	r29, 0x00	; 0
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	fe 01       	movw	r30, r28
    2130:	ed 59       	subi	r30, 0x9D	; 157
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2136:	a5 e3       	ldi	r26, 0x35	; 53
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e5 e3       	ldi	r30, 0x35	; 53
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	81 60       	ori	r24, 0x01	; 1
    2142:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2144:	a5 e3       	ldi	r26, 0x35	; 53
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e5 e3       	ldi	r30, 0x35	; 53
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	8d 7f       	andi	r24, 0xFD	; 253
    2150:	8c 93       	st	X, r24
    2152:	fe 01       	movw	r30, r28
    2154:	e1 5a       	subi	r30, 0xA1	; 161
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	a0 e8       	ldi	r26, 0x80	; 128
    215e:	bf e3       	ldi	r27, 0x3F	; 63
    2160:	80 83       	st	Z, r24
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	a2 83       	std	Z+2, r26	; 0x02
    2166:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2168:	8e 01       	movw	r16, r28
    216a:	05 5a       	subi	r16, 0xA5	; 165
    216c:	1f 4f       	sbci	r17, 0xFF	; 255
    216e:	fe 01       	movw	r30, r28
    2170:	e1 5a       	subi	r30, 0xA1	; 161
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	60 81       	ld	r22, Z
    2176:	71 81       	ldd	r23, Z+1	; 0x01
    2178:	82 81       	ldd	r24, Z+2	; 0x02
    217a:	93 81       	ldd	r25, Z+3	; 0x03
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4a e7       	ldi	r20, 0x7A	; 122
    2182:	53 e4       	ldi	r21, 0x43	; 67
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	f8 01       	movw	r30, r16
    218e:	80 83       	st	Z, r24
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	a2 83       	std	Z+2, r26	; 0x02
    2194:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2196:	fe 01       	movw	r30, r28
    2198:	e5 5a       	subi	r30, 0xA5	; 165
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	60 81       	ld	r22, Z
    219e:	71 81       	ldd	r23, Z+1	; 0x01
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	44 f4       	brge	.+16     	; 0x21c4 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    21b4:	fe 01       	movw	r30, r28
    21b6:	e7 5a       	subi	r30, 0xA7	; 167
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	91 83       	std	Z+1, r25	; 0x01
    21c0:	80 83       	st	Z, r24
    21c2:	64 c0       	rjmp	.+200    	; 0x228c <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    21c4:	fe 01       	movw	r30, r28
    21c6:	e5 5a       	subi	r30, 0xA5	; 165
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	60 81       	ld	r22, Z
    21cc:	71 81       	ldd	r23, Z+1	; 0x01
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	3f ef       	ldi	r19, 0xFF	; 255
    21d6:	4f e7       	ldi	r20, 0x7F	; 127
    21d8:	57 e4       	ldi	r21, 0x47	; 71
    21da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21de:	18 16       	cp	r1, r24
    21e0:	0c f0       	brlt	.+2      	; 0x21e4 <LCD_displayCharacter+0xd0>
    21e2:	43 c0       	rjmp	.+134    	; 0x226a <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e4:	fe 01       	movw	r30, r28
    21e6:	e1 5a       	subi	r30, 0xA1	; 161
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	60 81       	ld	r22, Z
    21ec:	71 81       	ldd	r23, Z+1	; 0x01
    21ee:	82 81       	ldd	r24, Z+2	; 0x02
    21f0:	93 81       	ldd	r25, Z+3	; 0x03
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e2       	ldi	r20, 0x20	; 32
    21f8:	51 e4       	ldi	r21, 0x41	; 65
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	8e 01       	movw	r16, r28
    2204:	07 5a       	subi	r16, 0xA7	; 167
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	f8 01       	movw	r30, r16
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	80 83       	st	Z, r24
    221a:	1f c0       	rjmp	.+62     	; 0x225a <LCD_displayCharacter+0x146>
    221c:	fe 01       	movw	r30, r28
    221e:	e9 5a       	subi	r30, 0xA9	; 169
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	89 e1       	ldi	r24, 0x19	; 25
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24
    222a:	fe 01       	movw	r30, r28
    222c:	e9 5a       	subi	r30, 0xA9	; 169
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 81       	ld	r24, Z
    2232:	91 81       	ldd	r25, Z+1	; 0x01
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <LCD_displayCharacter+0x120>
    2238:	fe 01       	movw	r30, r28
    223a:	e9 5a       	subi	r30, 0xA9	; 169
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2242:	de 01       	movw	r26, r28
    2244:	a7 5a       	subi	r26, 0xA7	; 167
    2246:	bf 4f       	sbci	r27, 0xFF	; 255
    2248:	fe 01       	movw	r30, r28
    224a:	e7 5a       	subi	r30, 0xA7	; 167
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 81       	ld	r24, Z
    2250:	91 81       	ldd	r25, Z+1	; 0x01
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	11 96       	adiw	r26, 0x01	; 1
    2256:	9c 93       	st	X, r25
    2258:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225a:	fe 01       	movw	r30, r28
    225c:	e7 5a       	subi	r30, 0xA7	; 167
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	91 81       	ldd	r25, Z+1	; 0x01
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	d1 f6       	brne	.-76     	; 0x221c <LCD_displayCharacter+0x108>
    2268:	27 c0       	rjmp	.+78     	; 0x22b8 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226a:	8e 01       	movw	r16, r28
    226c:	07 5a       	subi	r16, 0xA7	; 167
    226e:	1f 4f       	sbci	r17, 0xFF	; 255
    2270:	fe 01       	movw	r30, r28
    2272:	e5 5a       	subi	r30, 0xA5	; 165
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	60 81       	ld	r22, Z
    2278:	71 81       	ldd	r23, Z+1	; 0x01
    227a:	82 81       	ldd	r24, Z+2	; 0x02
    227c:	93 81       	ldd	r25, Z+3	; 0x03
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	f8 01       	movw	r30, r16
    2288:	91 83       	std	Z+1, r25	; 0x01
    228a:	80 83       	st	Z, r24
    228c:	de 01       	movw	r26, r28
    228e:	ab 5a       	subi	r26, 0xAB	; 171
    2290:	bf 4f       	sbci	r27, 0xFF	; 255
    2292:	fe 01       	movw	r30, r28
    2294:	e7 5a       	subi	r30, 0xA7	; 167
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	8d 93       	st	X+, r24
    229e:	9c 93       	st	X, r25
    22a0:	fe 01       	movw	r30, r28
    22a2:	eb 5a       	subi	r30, 0xAB	; 171
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 81       	ld	r24, Z
    22a8:	91 81       	ldd	r25, Z+1	; 0x01
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <LCD_displayCharacter+0x196>
    22ae:	fe 01       	movw	r30, r28
    22b0:	eb 5a       	subi	r30, 0xAB	; 171
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	91 83       	std	Z+1, r25	; 0x01
    22b6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    22b8:	a5 e3       	ldi	r26, 0x35	; 53
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e5 e3       	ldi	r30, 0x35	; 53
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	84 60       	ori	r24, 0x04	; 4
    22c4:	8c 93       	st	X, r24
    22c6:	fe 01       	movw	r30, r28
    22c8:	ef 5a       	subi	r30, 0xAF	; 175
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 e8       	ldi	r26, 0x80	; 128
    22d2:	bf e3       	ldi	r27, 0x3F	; 63
    22d4:	80 83       	st	Z, r24
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	a2 83       	std	Z+2, r26	; 0x02
    22da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	8e 01       	movw	r16, r28
    22de:	03 5b       	subi	r16, 0xB3	; 179
    22e0:	1f 4f       	sbci	r17, 0xFF	; 255
    22e2:	fe 01       	movw	r30, r28
    22e4:	ef 5a       	subi	r30, 0xAF	; 175
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a e7       	ldi	r20, 0x7A	; 122
    22f6:	53 e4       	ldi	r21, 0x43	; 67
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	f8 01       	movw	r30, r16
    2302:	80 83       	st	Z, r24
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	a2 83       	std	Z+2, r26	; 0x02
    2308:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    230a:	fe 01       	movw	r30, r28
    230c:	e3 5b       	subi	r30, 0xB3	; 179
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	60 81       	ld	r22, Z
    2312:	71 81       	ldd	r23, Z+1	; 0x01
    2314:	82 81       	ldd	r24, Z+2	; 0x02
    2316:	93 81       	ldd	r25, Z+3	; 0x03
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e8       	ldi	r20, 0x80	; 128
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2324:	88 23       	and	r24, r24
    2326:	44 f4       	brge	.+16     	; 0x2338 <LCD_displayCharacter+0x224>
		__ticks = 1;
    2328:	fe 01       	movw	r30, r28
    232a:	e5 5b       	subi	r30, 0xB5	; 181
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	80 83       	st	Z, r24
    2336:	64 c0       	rjmp	.+200    	; 0x2400 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    2338:	fe 01       	movw	r30, r28
    233a:	e3 5b       	subi	r30, 0xB3	; 179
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	60 81       	ld	r22, Z
    2340:	71 81       	ldd	r23, Z+1	; 0x01
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	0c f0       	brlt	.+2      	; 0x2358 <LCD_displayCharacter+0x244>
    2356:	43 c0       	rjmp	.+134    	; 0x23de <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2358:	fe 01       	movw	r30, r28
    235a:	ef 5a       	subi	r30, 0xAF	; 175
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	93 81       	ldd	r25, Z+3	; 0x03
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e2       	ldi	r20, 0x20	; 32
    236c:	51 e4       	ldi	r21, 0x41	; 65
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8e 01       	movw	r16, r28
    2378:	05 5b       	subi	r16, 0xB5	; 181
    237a:	1f 4f       	sbci	r17, 0xFF	; 255
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	f8 01       	movw	r30, r16
    238a:	91 83       	std	Z+1, r25	; 0x01
    238c:	80 83       	st	Z, r24
    238e:	1f c0       	rjmp	.+62     	; 0x23ce <LCD_displayCharacter+0x2ba>
    2390:	fe 01       	movw	r30, r28
    2392:	e7 5b       	subi	r30, 0xB7	; 183
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	89 e1       	ldi	r24, 0x19	; 25
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	80 83       	st	Z, r24
    239e:	fe 01       	movw	r30, r28
    23a0:	e7 5b       	subi	r30, 0xB7	; 183
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <LCD_displayCharacter+0x294>
    23ac:	fe 01       	movw	r30, r28
    23ae:	e7 5b       	subi	r30, 0xB7	; 183
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	de 01       	movw	r26, r28
    23b8:	a5 5b       	subi	r26, 0xB5	; 181
    23ba:	bf 4f       	sbci	r27, 0xFF	; 255
    23bc:	fe 01       	movw	r30, r28
    23be:	e5 5b       	subi	r30, 0xB5	; 181
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	91 81       	ldd	r25, Z+1	; 0x01
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	11 96       	adiw	r26, 0x01	; 1
    23ca:	9c 93       	st	X, r25
    23cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	fe 01       	movw	r30, r28
    23d0:	e5 5b       	subi	r30, 0xB5	; 181
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	91 81       	ldd	r25, Z+1	; 0x01
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	d1 f6       	brne	.-76     	; 0x2390 <LCD_displayCharacter+0x27c>
    23dc:	27 c0       	rjmp	.+78     	; 0x242c <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23de:	8e 01       	movw	r16, r28
    23e0:	05 5b       	subi	r16, 0xB5	; 181
    23e2:	1f 4f       	sbci	r17, 0xFF	; 255
    23e4:	fe 01       	movw	r30, r28
    23e6:	e3 5b       	subi	r30, 0xB3	; 179
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	60 81       	ld	r22, Z
    23ec:	71 81       	ldd	r23, Z+1	; 0x01
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	f8 01       	movw	r30, r16
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	80 83       	st	Z, r24
    2400:	de 01       	movw	r26, r28
    2402:	a9 5b       	subi	r26, 0xB9	; 185
    2404:	bf 4f       	sbci	r27, 0xFF	; 255
    2406:	fe 01       	movw	r30, r28
    2408:	e5 5b       	subi	r30, 0xB5	; 181
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	91 81       	ldd	r25, Z+1	; 0x01
    2410:	8d 93       	st	X+, r24
    2412:	9c 93       	st	X, r25
    2414:	fe 01       	movw	r30, r28
    2416:	e9 5b       	subi	r30, 0xB9	; 185
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_displayCharacter+0x30a>
    2422:	fe 01       	movw	r30, r28
    2424:	e9 5b       	subi	r30, 0xB9	; 185
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    242c:	ab e3       	ldi	r26, 0x3B	; 59
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	eb e3       	ldi	r30, 0x3B	; 59
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	98 2f       	mov	r25, r24
    2438:	90 7f       	andi	r25, 0xF0	; 240
    243a:	fe 01       	movw	r30, r28
    243c:	ed 59       	subi	r30, 0x9D	; 157
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	82 95       	swap	r24
    2444:	8f 70       	andi	r24, 0x0F	; 15
    2446:	89 2b       	or	r24, r25
    2448:	8c 93       	st	X, r24
    244a:	fe 01       	movw	r30, r28
    244c:	ed 5b       	subi	r30, 0xBD	; 189
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	a0 e8       	ldi	r26, 0x80	; 128
    2456:	bf e3       	ldi	r27, 0x3F	; 63
    2458:	80 83       	st	Z, r24
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	a2 83       	std	Z+2, r26	; 0x02
    245e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2460:	8e 01       	movw	r16, r28
    2462:	01 5c       	subi	r16, 0xC1	; 193
    2464:	1f 4f       	sbci	r17, 0xFF	; 255
    2466:	fe 01       	movw	r30, r28
    2468:	ed 5b       	subi	r30, 0xBD	; 189
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	60 81       	ld	r22, Z
    246e:	71 81       	ldd	r23, Z+1	; 0x01
    2470:	82 81       	ldd	r24, Z+2	; 0x02
    2472:	93 81       	ldd	r25, Z+3	; 0x03
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	4a e7       	ldi	r20, 0x7A	; 122
    247a:	53 e4       	ldi	r21, 0x43	; 67
    247c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	f8 01       	movw	r30, r16
    2486:	80 83       	st	Z, r24
    2488:	91 83       	std	Z+1, r25	; 0x01
    248a:	a2 83       	std	Z+2, r26	; 0x02
    248c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    248e:	fe 01       	movw	r30, r28
    2490:	ff 96       	adiw	r30, 0x3f	; 63
    2492:	60 81       	ld	r22, Z
    2494:	71 81       	ldd	r23, Z+1	; 0x01
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	93 81       	ldd	r25, Z+3	; 0x03
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a6:	88 23       	and	r24, r24
    24a8:	2c f4       	brge	.+10     	; 0x24b4 <LCD_displayCharacter+0x3a0>
		__ticks = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9e af       	std	Y+62, r25	; 0x3e
    24b0:	8d af       	std	Y+61, r24	; 0x3d
    24b2:	46 c0       	rjmp	.+140    	; 0x2540 <LCD_displayCharacter+0x42c>
	else if (__tmp > 65535)
    24b4:	fe 01       	movw	r30, r28
    24b6:	ff 96       	adiw	r30, 0x3f	; 63
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	3f ef       	ldi	r19, 0xFF	; 255
    24c4:	4f e7       	ldi	r20, 0x7F	; 127
    24c6:	57 e4       	ldi	r21, 0x47	; 71
    24c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24cc:	18 16       	cp	r1, r24
    24ce:	64 f5       	brge	.+88     	; 0x2528 <LCD_displayCharacter+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d0:	fe 01       	movw	r30, r28
    24d2:	ed 5b       	subi	r30, 0xBD	; 189
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	60 81       	ld	r22, Z
    24d8:	71 81       	ldd	r23, Z+1	; 0x01
    24da:	82 81       	ldd	r24, Z+2	; 0x02
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e2       	ldi	r20, 0x20	; 32
    24e4:	51 e4       	ldi	r21, 0x41	; 65
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9e af       	std	Y+62, r25	; 0x3e
    24fc:	8d af       	std	Y+61, r24	; 0x3d
    24fe:	0f c0       	rjmp	.+30     	; 0x251e <LCD_displayCharacter+0x40a>
    2500:	89 e1       	ldi	r24, 0x19	; 25
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	9c af       	std	Y+60, r25	; 0x3c
    2506:	8b af       	std	Y+59, r24	; 0x3b
    2508:	8b ad       	ldd	r24, Y+59	; 0x3b
    250a:	9c ad       	ldd	r25, Y+60	; 0x3c
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_displayCharacter+0x3f8>
    2510:	9c af       	std	Y+60, r25	; 0x3c
    2512:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2514:	8d ad       	ldd	r24, Y+61	; 0x3d
    2516:	9e ad       	ldd	r25, Y+62	; 0x3e
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	9e af       	std	Y+62, r25	; 0x3e
    251c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2520:	9e ad       	ldd	r25, Y+62	; 0x3e
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	69 f7       	brne	.-38     	; 0x2500 <LCD_displayCharacter+0x3ec>
    2526:	16 c0       	rjmp	.+44     	; 0x2554 <LCD_displayCharacter+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2528:	fe 01       	movw	r30, r28
    252a:	ff 96       	adiw	r30, 0x3f	; 63
    252c:	60 81       	ld	r22, Z
    252e:	71 81       	ldd	r23, Z+1	; 0x01
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	93 81       	ldd	r25, Z+3	; 0x03
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	9e af       	std	Y+62, r25	; 0x3e
    253e:	8d af       	std	Y+61, r24	; 0x3d
    2540:	8d ad       	ldd	r24, Y+61	; 0x3d
    2542:	9e ad       	ldd	r25, Y+62	; 0x3e
    2544:	9a af       	std	Y+58, r25	; 0x3a
    2546:	89 af       	std	Y+57, r24	; 0x39
    2548:	89 ad       	ldd	r24, Y+57	; 0x39
    254a:	9a ad       	ldd	r25, Y+58	; 0x3a
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_displayCharacter+0x438>
    2550:	9a af       	std	Y+58, r25	; 0x3a
    2552:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2554:	a5 e3       	ldi	r26, 0x35	; 53
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	e5 e3       	ldi	r30, 0x35	; 53
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	8b 7f       	andi	r24, 0xFB	; 251
    2560:	8c 93       	st	X, r24
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	a0 e8       	ldi	r26, 0x80	; 128
    2568:	bf e3       	ldi	r27, 0x3F	; 63
    256a:	8d ab       	std	Y+53, r24	; 0x35
    256c:	9e ab       	std	Y+54, r25	; 0x36
    256e:	af ab       	std	Y+55, r26	; 0x37
    2570:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2572:	6d a9       	ldd	r22, Y+53	; 0x35
    2574:	7e a9       	ldd	r23, Y+54	; 0x36
    2576:	8f a9       	ldd	r24, Y+55	; 0x37
    2578:	98 ad       	ldd	r25, Y+56	; 0x38
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	4a e7       	ldi	r20, 0x7A	; 122
    2580:	53 e4       	ldi	r21, 0x43	; 67
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	89 ab       	std	Y+49, r24	; 0x31
    258c:	9a ab       	std	Y+50, r25	; 0x32
    258e:	ab ab       	std	Y+51, r26	; 0x33
    2590:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2592:	69 a9       	ldd	r22, Y+49	; 0x31
    2594:	7a a9       	ldd	r23, Y+50	; 0x32
    2596:	8b a9       	ldd	r24, Y+51	; 0x33
    2598:	9c a9       	ldd	r25, Y+52	; 0x34
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e8       	ldi	r20, 0x80	; 128
    25a0:	5f e3       	ldi	r21, 0x3F	; 63
    25a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a6:	88 23       	and	r24, r24
    25a8:	2c f4       	brge	.+10     	; 0x25b4 <LCD_displayCharacter+0x4a0>
		__ticks = 1;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	98 ab       	std	Y+48, r25	; 0x30
    25b0:	8f a7       	std	Y+47, r24	; 0x2f
    25b2:	3f c0       	rjmp	.+126    	; 0x2632 <LCD_displayCharacter+0x51e>
	else if (__tmp > 65535)
    25b4:	69 a9       	ldd	r22, Y+49	; 0x31
    25b6:	7a a9       	ldd	r23, Y+50	; 0x32
    25b8:	8b a9       	ldd	r24, Y+51	; 0x33
    25ba:	9c a9       	ldd	r25, Y+52	; 0x34
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	57 e4       	ldi	r21, 0x47	; 71
    25c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	4c f5       	brge	.+82     	; 0x261e <LCD_displayCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25cc:	6d a9       	ldd	r22, Y+53	; 0x35
    25ce:	7e a9       	ldd	r23, Y+54	; 0x36
    25d0:	8f a9       	ldd	r24, Y+55	; 0x37
    25d2:	98 ad       	ldd	r25, Y+56	; 0x38
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e2       	ldi	r20, 0x20	; 32
    25da:	51 e4       	ldi	r21, 0x41	; 65
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	bc 01       	movw	r22, r24
    25e6:	cd 01       	movw	r24, r26
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	98 ab       	std	Y+48, r25	; 0x30
    25f2:	8f a7       	std	Y+47, r24	; 0x2f
    25f4:	0f c0       	rjmp	.+30     	; 0x2614 <LCD_displayCharacter+0x500>
    25f6:	89 e1       	ldi	r24, 0x19	; 25
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	9e a7       	std	Y+46, r25	; 0x2e
    25fc:	8d a7       	std	Y+45, r24	; 0x2d
    25fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2600:	9e a5       	ldd	r25, Y+46	; 0x2e
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <LCD_displayCharacter+0x4ee>
    2606:	9e a7       	std	Y+46, r25	; 0x2e
    2608:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260a:	8f a5       	ldd	r24, Y+47	; 0x2f
    260c:	98 a9       	ldd	r25, Y+48	; 0x30
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	98 ab       	std	Y+48, r25	; 0x30
    2612:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2614:	8f a5       	ldd	r24, Y+47	; 0x2f
    2616:	98 a9       	ldd	r25, Y+48	; 0x30
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	69 f7       	brne	.-38     	; 0x25f6 <LCD_displayCharacter+0x4e2>
    261c:	14 c0       	rjmp	.+40     	; 0x2646 <LCD_displayCharacter+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261e:	69 a9       	ldd	r22, Y+49	; 0x31
    2620:	7a a9       	ldd	r23, Y+50	; 0x32
    2622:	8b a9       	ldd	r24, Y+51	; 0x33
    2624:	9c a9       	ldd	r25, Y+52	; 0x34
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	98 ab       	std	Y+48, r25	; 0x30
    2630:	8f a7       	std	Y+47, r24	; 0x2f
    2632:	8f a5       	ldd	r24, Y+47	; 0x2f
    2634:	98 a9       	ldd	r25, Y+48	; 0x30
    2636:	9c a7       	std	Y+44, r25	; 0x2c
    2638:	8b a7       	std	Y+43, r24	; 0x2b
    263a:	8b a5       	ldd	r24, Y+43	; 0x2b
    263c:	9c a5       	ldd	r25, Y+44	; 0x2c
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_displayCharacter+0x52a>
    2642:	9c a7       	std	Y+44, r25	; 0x2c
    2644:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2646:	a5 e3       	ldi	r26, 0x35	; 53
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e5 e3       	ldi	r30, 0x35	; 53
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	84 60       	ori	r24, 0x04	; 4
    2652:	8c 93       	st	X, r24
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	a0 e8       	ldi	r26, 0x80	; 128
    265a:	bf e3       	ldi	r27, 0x3F	; 63
    265c:	8f a3       	std	Y+39, r24	; 0x27
    265e:	98 a7       	std	Y+40, r25	; 0x28
    2660:	a9 a7       	std	Y+41, r26	; 0x29
    2662:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2664:	6f a1       	ldd	r22, Y+39	; 0x27
    2666:	78 a5       	ldd	r23, Y+40	; 0x28
    2668:	89 a5       	ldd	r24, Y+41	; 0x29
    266a:	9a a5       	ldd	r25, Y+42	; 0x2a
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	4a e7       	ldi	r20, 0x7A	; 122
    2672:	53 e4       	ldi	r21, 0x43	; 67
    2674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	8b a3       	std	Y+35, r24	; 0x23
    267e:	9c a3       	std	Y+36, r25	; 0x24
    2680:	ad a3       	std	Y+37, r26	; 0x25
    2682:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2684:	6b a1       	ldd	r22, Y+35	; 0x23
    2686:	7c a1       	ldd	r23, Y+36	; 0x24
    2688:	8d a1       	ldd	r24, Y+37	; 0x25
    268a:	9e a1       	ldd	r25, Y+38	; 0x26
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e8       	ldi	r20, 0x80	; 128
    2692:	5f e3       	ldi	r21, 0x3F	; 63
    2694:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2698:	88 23       	and	r24, r24
    269a:	2c f4       	brge	.+10     	; 0x26a6 <LCD_displayCharacter+0x592>
		__ticks = 1;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	9a a3       	std	Y+34, r25	; 0x22
    26a2:	89 a3       	std	Y+33, r24	; 0x21
    26a4:	3f c0       	rjmp	.+126    	; 0x2724 <LCD_displayCharacter+0x610>
	else if (__tmp > 65535)
    26a6:	6b a1       	ldd	r22, Y+35	; 0x23
    26a8:	7c a1       	ldd	r23, Y+36	; 0x24
    26aa:	8d a1       	ldd	r24, Y+37	; 0x25
    26ac:	9e a1       	ldd	r25, Y+38	; 0x26
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	3f ef       	ldi	r19, 0xFF	; 255
    26b2:	4f e7       	ldi	r20, 0x7F	; 127
    26b4:	57 e4       	ldi	r21, 0x47	; 71
    26b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ba:	18 16       	cp	r1, r24
    26bc:	4c f5       	brge	.+82     	; 0x2710 <LCD_displayCharacter+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26be:	6f a1       	ldd	r22, Y+39	; 0x27
    26c0:	78 a5       	ldd	r23, Y+40	; 0x28
    26c2:	89 a5       	ldd	r24, Y+41	; 0x29
    26c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e2       	ldi	r20, 0x20	; 32
    26cc:	51 e4       	ldi	r21, 0x41	; 65
    26ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	bc 01       	movw	r22, r24
    26d8:	cd 01       	movw	r24, r26
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	9a a3       	std	Y+34, r25	; 0x22
    26e4:	89 a3       	std	Y+33, r24	; 0x21
    26e6:	0f c0       	rjmp	.+30     	; 0x2706 <LCD_displayCharacter+0x5f2>
    26e8:	89 e1       	ldi	r24, 0x19	; 25
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	98 a3       	std	Y+32, r25	; 0x20
    26ee:	8f 8f       	std	Y+31, r24	; 0x1f
    26f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26f2:	98 a1       	ldd	r25, Y+32	; 0x20
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	f1 f7       	brne	.-4      	; 0x26f4 <LCD_displayCharacter+0x5e0>
    26f8:	98 a3       	std	Y+32, r25	; 0x20
    26fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fc:	89 a1       	ldd	r24, Y+33	; 0x21
    26fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	9a a3       	std	Y+34, r25	; 0x22
    2704:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2706:	89 a1       	ldd	r24, Y+33	; 0x21
    2708:	9a a1       	ldd	r25, Y+34	; 0x22
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	69 f7       	brne	.-38     	; 0x26e8 <LCD_displayCharacter+0x5d4>
    270e:	14 c0       	rjmp	.+40     	; 0x2738 <LCD_displayCharacter+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2710:	6b a1       	ldd	r22, Y+35	; 0x23
    2712:	7c a1       	ldd	r23, Y+36	; 0x24
    2714:	8d a1       	ldd	r24, Y+37	; 0x25
    2716:	9e a1       	ldd	r25, Y+38	; 0x26
    2718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	9a a3       	std	Y+34, r25	; 0x22
    2722:	89 a3       	std	Y+33, r24	; 0x21
    2724:	89 a1       	ldd	r24, Y+33	; 0x21
    2726:	9a a1       	ldd	r25, Y+34	; 0x22
    2728:	9e 8f       	std	Y+30, r25	; 0x1e
    272a:	8d 8f       	std	Y+29, r24	; 0x1d
    272c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    272e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <LCD_displayCharacter+0x61c>
    2734:	9e 8f       	std	Y+30, r25	; 0x1e
    2736:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    2738:	ab e3       	ldi	r26, 0x3B	; 59
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	eb e3       	ldi	r30, 0x3B	; 59
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	98 2f       	mov	r25, r24
    2744:	90 7f       	andi	r25, 0xF0	; 240
    2746:	fe 01       	movw	r30, r28
    2748:	ed 59       	subi	r30, 0x9D	; 157
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 81       	ld	r24, Z
    274e:	8f 70       	andi	r24, 0x0F	; 15
    2750:	89 2b       	or	r24, r25
    2752:	8c 93       	st	X, r24
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	a0 e8       	ldi	r26, 0x80	; 128
    275a:	bf e3       	ldi	r27, 0x3F	; 63
    275c:	89 8f       	std	Y+25, r24	; 0x19
    275e:	9a 8f       	std	Y+26, r25	; 0x1a
    2760:	ab 8f       	std	Y+27, r26	; 0x1b
    2762:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2764:	69 8d       	ldd	r22, Y+25	; 0x19
    2766:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2768:	8b 8d       	ldd	r24, Y+27	; 0x1b
    276a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	4a e7       	ldi	r20, 0x7A	; 122
    2772:	53 e4       	ldi	r21, 0x43	; 67
    2774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	8d 8b       	std	Y+21, r24	; 0x15
    277e:	9e 8b       	std	Y+22, r25	; 0x16
    2780:	af 8b       	std	Y+23, r26	; 0x17
    2782:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2784:	6d 89       	ldd	r22, Y+21	; 0x15
    2786:	7e 89       	ldd	r23, Y+22	; 0x16
    2788:	8f 89       	ldd	r24, Y+23	; 0x17
    278a:	98 8d       	ldd	r25, Y+24	; 0x18
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e8       	ldi	r20, 0x80	; 128
    2792:	5f e3       	ldi	r21, 0x3F	; 63
    2794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2798:	88 23       	and	r24, r24
    279a:	2c f4       	brge	.+10     	; 0x27a6 <LCD_displayCharacter+0x692>
		__ticks = 1;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9c 8b       	std	Y+20, r25	; 0x14
    27a2:	8b 8b       	std	Y+19, r24	; 0x13
    27a4:	3f c0       	rjmp	.+126    	; 0x2824 <LCD_displayCharacter+0x710>
	else if (__tmp > 65535)
    27a6:	6d 89       	ldd	r22, Y+21	; 0x15
    27a8:	7e 89       	ldd	r23, Y+22	; 0x16
    27aa:	8f 89       	ldd	r24, Y+23	; 0x17
    27ac:	98 8d       	ldd	r25, Y+24	; 0x18
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	3f ef       	ldi	r19, 0xFF	; 255
    27b2:	4f e7       	ldi	r20, 0x7F	; 127
    27b4:	57 e4       	ldi	r21, 0x47	; 71
    27b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ba:	18 16       	cp	r1, r24
    27bc:	4c f5       	brge	.+82     	; 0x2810 <LCD_displayCharacter+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27be:	69 8d       	ldd	r22, Y+25	; 0x19
    27c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e2       	ldi	r20, 0x20	; 32
    27cc:	51 e4       	ldi	r21, 0x41	; 65
    27ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	bc 01       	movw	r22, r24
    27d8:	cd 01       	movw	r24, r26
    27da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9c 8b       	std	Y+20, r25	; 0x14
    27e4:	8b 8b       	std	Y+19, r24	; 0x13
    27e6:	0f c0       	rjmp	.+30     	; 0x2806 <LCD_displayCharacter+0x6f2>
    27e8:	89 e1       	ldi	r24, 0x19	; 25
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	9a 8b       	std	Y+18, r25	; 0x12
    27ee:	89 8b       	std	Y+17, r24	; 0x11
    27f0:	89 89       	ldd	r24, Y+17	; 0x11
    27f2:	9a 89       	ldd	r25, Y+18	; 0x12
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <LCD_displayCharacter+0x6e0>
    27f8:	9a 8b       	std	Y+18, r25	; 0x12
    27fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fc:	8b 89       	ldd	r24, Y+19	; 0x13
    27fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	9c 8b       	std	Y+20, r25	; 0x14
    2804:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2806:	8b 89       	ldd	r24, Y+19	; 0x13
    2808:	9c 89       	ldd	r25, Y+20	; 0x14
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	69 f7       	brne	.-38     	; 0x27e8 <LCD_displayCharacter+0x6d4>
    280e:	14 c0       	rjmp	.+40     	; 0x2838 <LCD_displayCharacter+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2810:	6d 89       	ldd	r22, Y+21	; 0x15
    2812:	7e 89       	ldd	r23, Y+22	; 0x16
    2814:	8f 89       	ldd	r24, Y+23	; 0x17
    2816:	98 8d       	ldd	r25, Y+24	; 0x18
    2818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9c 8b       	std	Y+20, r25	; 0x14
    2822:	8b 8b       	std	Y+19, r24	; 0x13
    2824:	8b 89       	ldd	r24, Y+19	; 0x13
    2826:	9c 89       	ldd	r25, Y+20	; 0x14
    2828:	98 8b       	std	Y+16, r25	; 0x10
    282a:	8f 87       	std	Y+15, r24	; 0x0f
    282c:	8f 85       	ldd	r24, Y+15	; 0x0f
    282e:	98 89       	ldd	r25, Y+16	; 0x10
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <LCD_displayCharacter+0x71c>
    2834:	98 8b       	std	Y+16, r25	; 0x10
    2836:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2838:	a5 e3       	ldi	r26, 0x35	; 53
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e5 e3       	ldi	r30, 0x35	; 53
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	8b 7f       	andi	r24, 0xFB	; 251
    2844:	8c 93       	st	X, r24
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a0 e8       	ldi	r26, 0x80	; 128
    284c:	bf e3       	ldi	r27, 0x3F	; 63
    284e:	8b 87       	std	Y+11, r24	; 0x0b
    2850:	9c 87       	std	Y+12, r25	; 0x0c
    2852:	ad 87       	std	Y+13, r26	; 0x0d
    2854:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2856:	6b 85       	ldd	r22, Y+11	; 0x0b
    2858:	7c 85       	ldd	r23, Y+12	; 0x0c
    285a:	8d 85       	ldd	r24, Y+13	; 0x0d
    285c:	9e 85       	ldd	r25, Y+14	; 0x0e
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	4a e7       	ldi	r20, 0x7A	; 122
    2864:	53 e4       	ldi	r21, 0x43	; 67
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	8f 83       	std	Y+7, r24	; 0x07
    2870:	98 87       	std	Y+8, r25	; 0x08
    2872:	a9 87       	std	Y+9, r26	; 0x09
    2874:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2876:	6f 81       	ldd	r22, Y+7	; 0x07
    2878:	78 85       	ldd	r23, Y+8	; 0x08
    287a:	89 85       	ldd	r24, Y+9	; 0x09
    287c:	9a 85       	ldd	r25, Y+10	; 0x0a
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e8       	ldi	r20, 0x80	; 128
    2884:	5f e3       	ldi	r21, 0x3F	; 63
    2886:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    288a:	88 23       	and	r24, r24
    288c:	2c f4       	brge	.+10     	; 0x2898 <LCD_displayCharacter+0x784>
		__ticks = 1;
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	9e 83       	std	Y+6, r25	; 0x06
    2894:	8d 83       	std	Y+5, r24	; 0x05
    2896:	3f c0       	rjmp	.+126    	; 0x2916 <LCD_displayCharacter+0x802>
	else if (__tmp > 65535)
    2898:	6f 81       	ldd	r22, Y+7	; 0x07
    289a:	78 85       	ldd	r23, Y+8	; 0x08
    289c:	89 85       	ldd	r24, Y+9	; 0x09
    289e:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	3f ef       	ldi	r19, 0xFF	; 255
    28a4:	4f e7       	ldi	r20, 0x7F	; 127
    28a6:	57 e4       	ldi	r21, 0x47	; 71
    28a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ac:	18 16       	cp	r1, r24
    28ae:	4c f5       	brge	.+82     	; 0x2902 <LCD_displayCharacter+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e2       	ldi	r20, 0x20	; 32
    28be:	51 e4       	ldi	r21, 0x41	; 65
    28c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	9e 83       	std	Y+6, r25	; 0x06
    28d6:	8d 83       	std	Y+5, r24	; 0x05
    28d8:	0f c0       	rjmp	.+30     	; 0x28f8 <LCD_displayCharacter+0x7e4>
    28da:	89 e1       	ldi	r24, 0x19	; 25
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	9c 83       	std	Y+4, r25	; 0x04
    28e0:	8b 83       	std	Y+3, r24	; 0x03
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	9c 81       	ldd	r25, Y+4	; 0x04
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <LCD_displayCharacter+0x7d2>
    28ea:	9c 83       	std	Y+4, r25	; 0x04
    28ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ee:	8d 81       	ldd	r24, Y+5	; 0x05
    28f0:	9e 81       	ldd	r25, Y+6	; 0x06
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	9e 83       	std	Y+6, r25	; 0x06
    28f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	9e 81       	ldd	r25, Y+6	; 0x06
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	69 f7       	brne	.-38     	; 0x28da <LCD_displayCharacter+0x7c6>
    2900:	14 c0       	rjmp	.+40     	; 0x292a <LCD_displayCharacter+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2902:	6f 81       	ldd	r22, Y+7	; 0x07
    2904:	78 85       	ldd	r23, Y+8	; 0x08
    2906:	89 85       	ldd	r24, Y+9	; 0x09
    2908:	9a 85       	ldd	r25, Y+10	; 0x0a
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	9e 83       	std	Y+6, r25	; 0x06
    2914:	8d 83       	std	Y+5, r24	; 0x05
    2916:	8d 81       	ldd	r24, Y+5	; 0x05
    2918:	9e 81       	ldd	r25, Y+6	; 0x06
    291a:	9a 83       	std	Y+2, r25	; 0x02
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	9a 81       	ldd	r25, Y+2	; 0x02
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <LCD_displayCharacter+0x80e>
    2926:	9a 83       	std	Y+2, r25	; 0x02
    2928:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    292a:	cd 59       	subi	r28, 0x9D	; 157
    292c:	df 4f       	sbci	r29, 0xFF	; 255
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	08 95       	ret

00002942 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <LCD_displayString+0x6>
    2948:	0f 92       	push	r0
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	9b 83       	std	Y+3, r25	; 0x03
    2950:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2952:	19 82       	std	Y+1, r1	; 0x01
    2954:	0e c0       	rjmp	.+28     	; 0x2972 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	28 2f       	mov	r18, r24
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	9b 81       	ldd	r25, Y+3	; 0x03
    2960:	fc 01       	movw	r30, r24
    2962:	e2 0f       	add	r30, r18
    2964:	f3 1f       	adc	r31, r19
    2966:	80 81       	ld	r24, Z
    2968:	0e 94 8a 10 	call	0x2114	; 0x2114 <LCD_displayCharacter>
		i++;
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	8f 5f       	subi	r24, 0xFF	; 255
    2970:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	28 2f       	mov	r18, r24
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	9b 81       	ldd	r25, Y+3	; 0x03
    297c:	fc 01       	movw	r30, r24
    297e:	e2 0f       	add	r30, r18
    2980:	f3 1f       	adc	r31, r19
    2982:	80 81       	ld	r24, Z
    2984:	88 23       	and	r24, r24
    2986:	39 f7       	brne	.-50     	; 0x2956 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	00 d0       	rcall	.+0      	; 0x299a <LCD_goToRowColumn+0x6>
    299a:	00 d0       	rcall	.+0      	; 0x299c <LCD_goToRowColumn+0x8>
    299c:	0f 92       	push	r0
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	8a 83       	std	Y+2, r24	; 0x02
    29a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	28 2f       	mov	r18, r24
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	3d 83       	std	Y+5, r19	; 0x05
    29ae:	2c 83       	std	Y+4, r18	; 0x04
    29b0:	8c 81       	ldd	r24, Y+4	; 0x04
    29b2:	9d 81       	ldd	r25, Y+5	; 0x05
    29b4:	81 30       	cpi	r24, 0x01	; 1
    29b6:	91 05       	cpc	r25, r1
    29b8:	c1 f0       	breq	.+48     	; 0x29ea <LCD_goToRowColumn+0x56>
    29ba:	2c 81       	ldd	r18, Y+4	; 0x04
    29bc:	3d 81       	ldd	r19, Y+5	; 0x05
    29be:	22 30       	cpi	r18, 0x02	; 2
    29c0:	31 05       	cpc	r19, r1
    29c2:	2c f4       	brge	.+10     	; 0x29ce <LCD_goToRowColumn+0x3a>
    29c4:	8c 81       	ldd	r24, Y+4	; 0x04
    29c6:	9d 81       	ldd	r25, Y+5	; 0x05
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	61 f0       	breq	.+24     	; 0x29e4 <LCD_goToRowColumn+0x50>
    29cc:	19 c0       	rjmp	.+50     	; 0x2a00 <LCD_goToRowColumn+0x6c>
    29ce:	2c 81       	ldd	r18, Y+4	; 0x04
    29d0:	3d 81       	ldd	r19, Y+5	; 0x05
    29d2:	22 30       	cpi	r18, 0x02	; 2
    29d4:	31 05       	cpc	r19, r1
    29d6:	69 f0       	breq	.+26     	; 0x29f2 <LCD_goToRowColumn+0x5e>
    29d8:	8c 81       	ldd	r24, Y+4	; 0x04
    29da:	9d 81       	ldd	r25, Y+5	; 0x05
    29dc:	83 30       	cpi	r24, 0x03	; 3
    29de:	91 05       	cpc	r25, r1
    29e0:	61 f0       	breq	.+24     	; 0x29fa <LCD_goToRowColumn+0x66>
    29e2:	0e c0       	rjmp	.+28     	; 0x2a00 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	0b c0       	rjmp	.+22     	; 0x2a00 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	80 5c       	subi	r24, 0xC0	; 192
    29ee:	89 83       	std	Y+1, r24	; 0x01
    29f0:	07 c0       	rjmp	.+14     	; 0x2a00 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	80 5f       	subi	r24, 0xF0	; 240
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	03 c0       	rjmp	.+6      	; 0x2a00 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03
    29fc:	80 5b       	subi	r24, 0xB0	; 176
    29fe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	80 68       	ori	r24, 0x80	; 128
    2a04:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
}
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <LCD_displayStringRowColumn+0x6>
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <LCD_displayStringRowColumn+0x8>
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	6a 83       	std	Y+2, r22	; 0x02
    2a28:	5c 83       	std	Y+4, r21	; 0x04
    2a2a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	6a 81       	ldd	r22, Y+2	; 0x02
    2a30:	0e 94 ca 14 	call	0x2994	; 0x2994 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	9c 81       	ldd	r25, Y+4	; 0x04
    2a38:	0e 94 a1 14 	call	0x2942	; 0x2942 <LCD_displayString>
}
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	0f 90       	pop	r0
    2a44:	cf 91       	pop	r28
    2a46:	df 91       	pop	r29
    2a48:	08 95       	ret

00002a4a <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2a4a:	df 93       	push	r29
    2a4c:	cf 93       	push	r28
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	62 97       	sbiw	r28, 0x12	; 18
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	9a 8b       	std	Y+18, r25	; 0x12
    2a60:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2a62:	89 89       	ldd	r24, Y+17	; 0x11
    2a64:	9a 89       	ldd	r25, Y+18	; 0x12
    2a66:	9e 01       	movw	r18, r28
    2a68:	2f 5f       	subi	r18, 0xFF	; 255
    2a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6c:	b9 01       	movw	r22, r18
    2a6e:	4a e0       	ldi	r20, 0x0A	; 10
    2a70:	50 e0       	ldi	r21, 0x00	; 0
    2a72:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <itoa>
   LCD_displayString(buff);
    2a76:	ce 01       	movw	r24, r28
    2a78:	01 96       	adiw	r24, 0x01	; 1
    2a7a:	0e 94 a1 14 	call	0x2942	; 0x2942 <LCD_displayString>
}
    2a7e:	62 96       	adiw	r28, 0x12	; 18
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	08 95       	ret

00002a90 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2a90:	df 93       	push	r29
    2a92:	cf 93       	push	r28
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
}
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <__vector_9>:
#define NULL_PTR ((void*)0)

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER0_OVF_vect)
{
    2aa4:	1f 92       	push	r1
    2aa6:	0f 92       	push	r0
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	0f 92       	push	r0
    2aac:	11 24       	eor	r1, r1
    2aae:	2f 93       	push	r18
    2ab0:	3f 93       	push	r19
    2ab2:	4f 93       	push	r20
    2ab4:	5f 93       	push	r21
    2ab6:	6f 93       	push	r22
    2ab8:	7f 93       	push	r23
    2aba:	8f 93       	push	r24
    2abc:	9f 93       	push	r25
    2abe:	af 93       	push	r26
    2ac0:	bf 93       	push	r27
    2ac2:	ef 93       	push	r30
    2ac4:	ff 93       	push	r31
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2ace:	80 91 02 01 	lds	r24, 0x0102
    2ad2:	90 91 03 01 	lds	r25, 0x0103
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	29 f0       	breq	.+10     	; 0x2ae4 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2ada:	e0 91 02 01 	lds	r30, 0x0102
    2ade:	f0 91 03 01 	lds	r31, 0x0103
    2ae2:	09 95       	icall
	}
}
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	ff 91       	pop	r31
    2aea:	ef 91       	pop	r30
    2aec:	bf 91       	pop	r27
    2aee:	af 91       	pop	r26
    2af0:	9f 91       	pop	r25
    2af2:	8f 91       	pop	r24
    2af4:	7f 91       	pop	r23
    2af6:	6f 91       	pop	r22
    2af8:	5f 91       	pop	r21
    2afa:	4f 91       	pop	r20
    2afc:	3f 91       	pop	r19
    2afe:	2f 91       	pop	r18
    2b00:	0f 90       	pop	r0
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	0f 90       	pop	r0
    2b06:	1f 90       	pop	r1
    2b08:	18 95       	reti

00002b0a <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    2b0a:	1f 92       	push	r1
    2b0c:	0f 92       	push	r0
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	0f 92       	push	r0
    2b12:	11 24       	eor	r1, r1
    2b14:	2f 93       	push	r18
    2b16:	3f 93       	push	r19
    2b18:	4f 93       	push	r20
    2b1a:	5f 93       	push	r21
    2b1c:	6f 93       	push	r22
    2b1e:	7f 93       	push	r23
    2b20:	8f 93       	push	r24
    2b22:	9f 93       	push	r25
    2b24:	af 93       	push	r26
    2b26:	bf 93       	push	r27
    2b28:	ef 93       	push	r30
    2b2a:	ff 93       	push	r31
    2b2c:	df 93       	push	r29
    2b2e:	cf 93       	push	r28
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2b34:	80 91 02 01 	lds	r24, 0x0102
    2b38:	90 91 03 01 	lds	r25, 0x0103
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	29 f0       	breq	.+10     	; 0x2b4a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2b40:	e0 91 02 01 	lds	r30, 0x0102
    2b44:	f0 91 03 01 	lds	r31, 0x0103
    2b48:	09 95       	icall
	}
}
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	ff 91       	pop	r31
    2b50:	ef 91       	pop	r30
    2b52:	bf 91       	pop	r27
    2b54:	af 91       	pop	r26
    2b56:	9f 91       	pop	r25
    2b58:	8f 91       	pop	r24
    2b5a:	7f 91       	pop	r23
    2b5c:	6f 91       	pop	r22
    2b5e:	5f 91       	pop	r21
    2b60:	4f 91       	pop	r20
    2b62:	3f 91       	pop	r19
    2b64:	2f 91       	pop	r18
    2b66:	0f 90       	pop	r0
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	0f 90       	pop	r0
    2b6c:	1f 90       	pop	r1
    2b6e:	18 95       	reti

00002b70 <Set_callBack>:

void Set_callBack(void(*a_ptr)(void)){
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <Set_callBack+0x6>
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
    2b7c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	9a 81       	ldd	r25, Y+2	; 0x02
    2b82:	90 93 03 01 	sts	0x0103, r25
    2b86:	80 93 02 01 	sts	0x0102, r24
}
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	08 95       	ret

00002b94 <Timer0_init>:


void Timer0_init(const Timer0_ConfigType * Config_Ptr){
    2b94:	df 93       	push	r29
    2b96:	cf 93       	push	r28
    2b98:	00 d0       	rcall	.+0      	; 0x2b9a <Timer0_init+0x6>
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	9a 83       	std	Y+2, r25	; 0x02
    2ba0:	89 83       	std	Y+1, r24	; 0x01

	TCNT0=0;
    2ba2:	e2 e5       	ldi	r30, 0x52	; 82
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	10 82       	st	Z, r1

	if ((Config_Ptr->mode==NORMAL_MODE)){
    2ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    2baa:	fa 81       	ldd	r31, Y+2	; 0x02
    2bac:	80 81       	ld	r24, Z
    2bae:	88 23       	and	r24, r24
    2bb0:	41 f4       	brne	.+16     	; 0x2bc2 <Timer0_init+0x2e>
			SET_BIT(TIMSK,TOIE0);
    2bb2:	a9 e5       	ldi	r26, 0x59	; 89
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	e9 e5       	ldi	r30, 0x59	; 89
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	81 60       	ori	r24, 0x01	; 1
    2bbe:	8c 93       	st	X, r24
    2bc0:	07 c0       	rjmp	.+14     	; 0x2bd0 <Timer0_init+0x3c>
		}else {
			SET_BIT(TIMSK,OCIE0);
    2bc2:	a9 e5       	ldi	r26, 0x59	; 89
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	e9 e5       	ldi	r30, 0x59	; 89
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	82 60       	ori	r24, 0x02	; 2
    2bce:	8c 93       	st	X, r24
		}


	if ((Config_Ptr->mode==NORMAL_MODE)||(Config_Ptr->mode==CTC)){
    2bd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd4:	80 81       	ld	r24, Z
    2bd6:	88 23       	and	r24, r24
    2bd8:	29 f0       	breq	.+10     	; 0x2be4 <Timer0_init+0x50>
    2bda:	e9 81       	ldd	r30, Y+1	; 0x01
    2bdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bde:	80 81       	ld	r24, Z
    2be0:	82 30       	cpi	r24, 0x02	; 2
    2be2:	41 f4       	brne	.+16     	; 0x2bf4 <Timer0_init+0x60>
		SET_BIT(TCCR0,FOC0);
    2be4:	a3 e5       	ldi	r26, 0x53	; 83
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e3 e5       	ldi	r30, 0x53	; 83
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	80 68       	ori	r24, 0x80	; 128
    2bf0:	8c 93       	st	X, r24
    2bf2:	07 c0       	rjmp	.+14     	; 0x2c02 <Timer0_init+0x6e>
	}else{
		CLEAR_BIT(TCCR0,FOC0);
    2bf4:	a3 e5       	ldi	r26, 0x53	; 83
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	e3 e5       	ldi	r30, 0x53	; 83
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	8f 77       	andi	r24, 0x7F	; 127
    2c00:	8c 93       	st	X, r24
	}
	//configue clock
	TCCR0= (TCCR0 & 0xF8) | (Config_Ptr->clock);
    2c02:	a3 e5       	ldi	r26, 0x53	; 83
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e3 e5       	ldi	r30, 0x53	; 83
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	98 2f       	mov	r25, r24
    2c0e:	98 7f       	andi	r25, 0xF8	; 248
    2c10:	e9 81       	ldd	r30, Y+1	; 0x01
    2c12:	fa 81       	ldd	r31, Y+2	; 0x02
    2c14:	81 81       	ldd	r24, Z+1	; 0x01
    2c16:	89 2b       	or	r24, r25
    2c18:	8c 93       	st	X, r24

	//configure mode
	TCCR0 = (TCCR0 & 0xB7) | (((Config_Ptr->mode)&0x01)<<6);
    2c1a:	a3 e5       	ldi	r26, 0x53	; 83
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e3 e5       	ldi	r30, 0x53	; 83
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	28 2f       	mov	r18, r24
    2c26:	27 7b       	andi	r18, 0xB7	; 183
    2c28:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2c:	80 81       	ld	r24, Z
    2c2e:	88 2f       	mov	r24, r24
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	81 70       	andi	r24, 0x01	; 1
    2c34:	90 70       	andi	r25, 0x00	; 0
    2c36:	00 24       	eor	r0, r0
    2c38:	96 95       	lsr	r25
    2c3a:	87 95       	ror	r24
    2c3c:	07 94       	ror	r0
    2c3e:	96 95       	lsr	r25
    2c40:	87 95       	ror	r24
    2c42:	07 94       	ror	r0
    2c44:	98 2f       	mov	r25, r24
    2c46:	80 2d       	mov	r24, r0
    2c48:	82 2b       	or	r24, r18
    2c4a:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xB7) | (((Config_Ptr->mode)&0x02)<<3);
    2c4c:	a3 e5       	ldi	r26, 0x53	; 83
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e3 e5       	ldi	r30, 0x53	; 83
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	28 2f       	mov	r18, r24
    2c58:	27 7b       	andi	r18, 0xB7	; 183
    2c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c5e:	80 81       	ld	r24, Z
    2c60:	88 2f       	mov	r24, r24
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	82 70       	andi	r24, 0x02	; 2
    2c66:	90 70       	andi	r25, 0x00	; 0
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	88 0f       	add	r24, r24
    2c6e:	99 1f       	adc	r25, r25
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	82 2b       	or	r24, r18
    2c76:	8c 93       	st	X, r24

	//configure OCR
	OCR0=Config_Ptr->OCR;
    2c78:	ac e5       	ldi	r26, 0x5C	; 92
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	8c 93       	st	X, r24
}
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <timer0_DeInit>:


void timer0_DeInit(){
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    2c96:	e3 e5       	ldi	r30, 0x53	; 83
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	10 82       	st	Z, r1
	TCNT0=0;
    2c9c:	e2 e5       	ldi	r30, 0x52	; 82
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0);
    2ca2:	a9 e5       	ldi	r26, 0x59	; 89
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	e9 e5       	ldi	r30, 0x59	; 89
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	8d 7f       	andi	r24, 0xFD	; 253
    2cae:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    2cb0:	a9 e5       	ldi	r26, 0x59	; 89
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	e9 e5       	ldi	r30, 0x59	; 89
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 81       	ld	r24, Z
    2cba:	8e 7f       	andi	r24, 0xFE	; 254
    2cbc:	8c 93       	st	X, r24
}
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2ccc:	eb e2       	ldi	r30, 0x2B	; 43
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	82 e0       	ldi	r24, 0x02	; 2
    2cd2:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2cd4:	ea e2       	ldi	r30, 0x2A	; 42
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	88 e1       	ldi	r24, 0x18	; 24
    2cda:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2cdc:	e0 e4       	ldi	r30, 0x40	; 64
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	86 e8       	ldi	r24, 0x86	; 134
    2ce2:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2ce4:	e0 e4       	ldi	r30, 0x40	; 64
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2cea:	e9 e2       	ldi	r30, 0x29	; 41
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	8c e0       	ldi	r24, 0x0C	; 12
    2cf0:	80 83       	st	Z, r24
}
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	0f 92       	push	r0
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2d04:	eb e2       	ldi	r30, 0x2B	; 43
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	88 2f       	mov	r24, r24
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	80 72       	andi	r24, 0x20	; 32
    2d10:	90 70       	andi	r25, 0x00	; 0
    2d12:	00 97       	sbiw	r24, 0x00	; 0
    2d14:	b9 f3       	breq	.-18     	; 0x2d04 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2d16:	ec e2       	ldi	r30, 0x2C	; 44
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2d1e:	0f 90       	pop	r0
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2d2e:	eb e2       	ldi	r30, 0x2B	; 43
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	88 23       	and	r24, r24
    2d36:	dc f7       	brge	.-10     	; 0x2d2e <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2d38:	ec e2       	ldi	r30, 0x2C	; 44
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
}
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	08 95       	ret

00002d44 <UART_sendString>:

void UART_sendString(const char *Str)
{
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <UART_sendString+0x6>
    2d4a:	0f 92       	push	r0
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	9b 83       	std	Y+3, r25	; 0x03
    2d52:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d54:	19 82       	std	Y+1, r1	; 0x01
    2d56:	0e c0       	rjmp	.+28     	; 0x2d74 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d60:	9b 81       	ldd	r25, Y+3	; 0x03
    2d62:	fc 01       	movw	r30, r24
    2d64:	e2 0f       	add	r30, r18
    2d66:	f3 1f       	adc	r31, r19
    2d68:	80 81       	ld	r24, Z
    2d6a:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <UART_sendByte>
		i++;
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	8f 5f       	subi	r24, 0xFF	; 255
    2d72:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	28 2f       	mov	r18, r24
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7e:	fc 01       	movw	r30, r24
    2d80:	e2 0f       	add	r30, r18
    2d82:	f3 1f       	adc	r31, r19
    2d84:	80 81       	ld	r24, Z
    2d86:	88 23       	and	r24, r24
    2d88:	39 f7       	brne	.-50     	; 0x2d58 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	08 95       	ret

00002d96 <UART_receiveString>:

void UART_receiveString(char *Str)
{
    2d96:	0f 93       	push	r16
    2d98:	1f 93       	push	r17
    2d9a:	df 93       	push	r29
    2d9c:	cf 93       	push	r28
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <UART_receiveString+0xa>
    2da0:	0f 92       	push	r0
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	9b 83       	std	Y+3, r25	; 0x03
    2da8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2daa:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	9b 81       	ldd	r25, Y+3	; 0x03
    2db6:	8c 01       	movw	r16, r24
    2db8:	02 0f       	add	r16, r18
    2dba:	13 1f       	adc	r17, r19
    2dbc:	0e 94 93 16 	call	0x2d26	; 0x2d26 <UART_recieveByte>
    2dc0:	f8 01       	movw	r30, r16
    2dc2:	80 83       	st	Z, r24
    2dc4:	0f c0       	rjmp	.+30     	; 0x2de4 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	8f 5f       	subi	r24, 0xFF	; 255
    2dca:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	28 2f       	mov	r18, r24
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd6:	8c 01       	movw	r16, r24
    2dd8:	02 0f       	add	r16, r18
    2dda:	13 1f       	adc	r17, r19
    2ddc:	0e 94 93 16 	call	0x2d26	; 0x2d26 <UART_recieveByte>
    2de0:	f8 01       	movw	r30, r16
    2de2:	80 83       	st	Z, r24

void UART_receiveString(char *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	28 2f       	mov	r18, r24
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	9b 81       	ldd	r25, Y+3	; 0x03
    2dee:	fc 01       	movw	r30, r24
    2df0:	e2 0f       	add	r30, r18
    2df2:	f3 1f       	adc	r31, r19
    2df4:	80 81       	ld	r24, Z
    2df6:	83 32       	cpi	r24, 0x23	; 35
    2df8:	31 f7       	brne	.-52     	; 0x2dc6 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	28 2f       	mov	r18, r24
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	9b 81       	ldd	r25, Y+3	; 0x03
    2e04:	fc 01       	movw	r30, r24
    2e06:	e2 0f       	add	r30, r18
    2e08:	f3 1f       	adc	r31, r19
    2e0a:	10 82       	st	Z, r1
}
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	cf 91       	pop	r28
    2e14:	df 91       	pop	r29
    2e16:	1f 91       	pop	r17
    2e18:	0f 91       	pop	r16
    2e1a:	08 95       	ret

00002e1c <__prologue_saves__>:
    2e1c:	2f 92       	push	r2
    2e1e:	3f 92       	push	r3
    2e20:	4f 92       	push	r4
    2e22:	5f 92       	push	r5
    2e24:	6f 92       	push	r6
    2e26:	7f 92       	push	r7
    2e28:	8f 92       	push	r8
    2e2a:	9f 92       	push	r9
    2e2c:	af 92       	push	r10
    2e2e:	bf 92       	push	r11
    2e30:	cf 92       	push	r12
    2e32:	df 92       	push	r13
    2e34:	ef 92       	push	r14
    2e36:	ff 92       	push	r15
    2e38:	0f 93       	push	r16
    2e3a:	1f 93       	push	r17
    2e3c:	cf 93       	push	r28
    2e3e:	df 93       	push	r29
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	ca 1b       	sub	r28, r26
    2e46:	db 0b       	sbc	r29, r27
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	09 94       	ijmp

00002e54 <__epilogue_restores__>:
    2e54:	2a 88       	ldd	r2, Y+18	; 0x12
    2e56:	39 88       	ldd	r3, Y+17	; 0x11
    2e58:	48 88       	ldd	r4, Y+16	; 0x10
    2e5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e60:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e62:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e64:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e66:	b9 84       	ldd	r11, Y+9	; 0x09
    2e68:	c8 84       	ldd	r12, Y+8	; 0x08
    2e6a:	df 80       	ldd	r13, Y+7	; 0x07
    2e6c:	ee 80       	ldd	r14, Y+6	; 0x06
    2e6e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e70:	0c 81       	ldd	r16, Y+4	; 0x04
    2e72:	1b 81       	ldd	r17, Y+3	; 0x03
    2e74:	aa 81       	ldd	r26, Y+2	; 0x02
    2e76:	b9 81       	ldd	r27, Y+1	; 0x01
    2e78:	ce 0f       	add	r28, r30
    2e7a:	d1 1d       	adc	r29, r1
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	ed 01       	movw	r28, r26
    2e88:	08 95       	ret

00002e8a <itoa>:
    2e8a:	fb 01       	movw	r30, r22
    2e8c:	9f 01       	movw	r18, r30
    2e8e:	e8 94       	clt
    2e90:	42 30       	cpi	r20, 0x02	; 2
    2e92:	c4 f0       	brlt	.+48     	; 0x2ec4 <itoa+0x3a>
    2e94:	45 32       	cpi	r20, 0x25	; 37
    2e96:	b4 f4       	brge	.+44     	; 0x2ec4 <itoa+0x3a>
    2e98:	4a 30       	cpi	r20, 0x0A	; 10
    2e9a:	29 f4       	brne	.+10     	; 0x2ea6 <itoa+0x1c>
    2e9c:	97 fb       	bst	r25, 7
    2e9e:	1e f4       	brtc	.+6      	; 0x2ea6 <itoa+0x1c>
    2ea0:	90 95       	com	r25
    2ea2:	81 95       	neg	r24
    2ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea6:	64 2f       	mov	r22, r20
    2ea8:	77 27       	eor	r23, r23
    2eaa:	0e 94 76 17 	call	0x2eec	; 0x2eec <__udivmodhi4>
    2eae:	80 5d       	subi	r24, 0xD0	; 208
    2eb0:	8a 33       	cpi	r24, 0x3A	; 58
    2eb2:	0c f0       	brlt	.+2      	; 0x2eb6 <itoa+0x2c>
    2eb4:	89 5d       	subi	r24, 0xD9	; 217
    2eb6:	81 93       	st	Z+, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	00 97       	sbiw	r24, 0x00	; 0
    2ebc:	a1 f7       	brne	.-24     	; 0x2ea6 <itoa+0x1c>
    2ebe:	16 f4       	brtc	.+4      	; 0x2ec4 <itoa+0x3a>
    2ec0:	5d e2       	ldi	r21, 0x2D	; 45
    2ec2:	51 93       	st	Z+, r21
    2ec4:	10 82       	st	Z, r1
    2ec6:	c9 01       	movw	r24, r18
    2ec8:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <strrev>

00002ecc <strrev>:
    2ecc:	dc 01       	movw	r26, r24
    2ece:	fc 01       	movw	r30, r24
    2ed0:	67 2f       	mov	r22, r23
    2ed2:	71 91       	ld	r23, Z+
    2ed4:	77 23       	and	r23, r23
    2ed6:	e1 f7       	brne	.-8      	; 0x2ed0 <strrev+0x4>
    2ed8:	32 97       	sbiw	r30, 0x02	; 2
    2eda:	04 c0       	rjmp	.+8      	; 0x2ee4 <strrev+0x18>
    2edc:	7c 91       	ld	r23, X
    2ede:	6d 93       	st	X+, r22
    2ee0:	70 83       	st	Z, r23
    2ee2:	62 91       	ld	r22, -Z
    2ee4:	ae 17       	cp	r26, r30
    2ee6:	bf 07       	cpc	r27, r31
    2ee8:	c8 f3       	brcs	.-14     	; 0x2edc <strrev+0x10>
    2eea:	08 95       	ret

00002eec <__udivmodhi4>:
    2eec:	aa 1b       	sub	r26, r26
    2eee:	bb 1b       	sub	r27, r27
    2ef0:	51 e1       	ldi	r21, 0x11	; 17
    2ef2:	07 c0       	rjmp	.+14     	; 0x2f02 <__udivmodhi4_ep>

00002ef4 <__udivmodhi4_loop>:
    2ef4:	aa 1f       	adc	r26, r26
    2ef6:	bb 1f       	adc	r27, r27
    2ef8:	a6 17       	cp	r26, r22
    2efa:	b7 07       	cpc	r27, r23
    2efc:	10 f0       	brcs	.+4      	; 0x2f02 <__udivmodhi4_ep>
    2efe:	a6 1b       	sub	r26, r22
    2f00:	b7 0b       	sbc	r27, r23

00002f02 <__udivmodhi4_ep>:
    2f02:	88 1f       	adc	r24, r24
    2f04:	99 1f       	adc	r25, r25
    2f06:	5a 95       	dec	r21
    2f08:	a9 f7       	brne	.-22     	; 0x2ef4 <__udivmodhi4_loop>
    2f0a:	80 95       	com	r24
    2f0c:	90 95       	com	r25
    2f0e:	bc 01       	movw	r22, r24
    2f10:	cd 01       	movw	r24, r26
    2f12:	08 95       	ret

00002f14 <_exit>:
    2f14:	f8 94       	cli

00002f16 <__stop_program>:
    2f16:	ff cf       	rjmp	.-2      	; 0x2f16 <__stop_program>
